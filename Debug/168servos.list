
168servos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004210  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080043d8  080043d8  000143d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043f0  080043f0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080043f0  080043f0  000143f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043f8  080043f8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043f8  080043f8  000143f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043fc  080043fc  000143fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004400  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e4c  2000000c  0800440c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e58  0800440c  00021e58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011ed8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002908  00000000  00000000  00031f14  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010b8  00000000  00000000  00034820  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f50  00000000  00000000  000358d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026828  00000000  00000000  00036828  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e159  00000000  00000000  0005d050  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ecc26  00000000  00000000  0006b1a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00157dcf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004518  00000000  00000000  00157e4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080043c0 	.word	0x080043c0

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	080043c0 	.word	0x080043c0

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000218:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800021c:	f000 b972 	b.w	8000504 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	4688      	mov	r8, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14b      	bne.n	80002de <__udivmoddi4+0xa6>
 8000246:	428a      	cmp	r2, r1
 8000248:	4615      	mov	r5, r2
 800024a:	d967      	bls.n	800031c <__udivmoddi4+0xe4>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0720 	rsb	r7, r2, #32
 8000256:	fa01 f302 	lsl.w	r3, r1, r2
 800025a:	fa20 f707 	lsr.w	r7, r0, r7
 800025e:	4095      	lsls	r5, r2
 8000260:	ea47 0803 	orr.w	r8, r7, r3
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000270:	fa1f fc85 	uxth.w	ip, r5
 8000274:	fb0e 8817 	mls	r8, lr, r7, r8
 8000278:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027c:	fb07 f10c 	mul.w	r1, r7, ip
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18eb      	adds	r3, r5, r3
 8000286:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800028a:	f080 811b 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8118 	bls.w	80004c4 <__udivmoddi4+0x28c>
 8000294:	3f02      	subs	r7, #2
 8000296:	442b      	add	r3, r5
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ac:	45a4      	cmp	ip, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	192c      	adds	r4, r5, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x290>
 80002ba:	45a4      	cmp	ip, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x290>
 80002c0:	3802      	subs	r0, #2
 80002c2:	442c      	add	r4, r5
 80002c4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c8:	eba4 040c 	sub.w	r4, r4, ip
 80002cc:	2700      	movs	r7, #0
 80002ce:	b11e      	cbz	r6, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c6 4300 	strd	r4, r3, [r6]
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xbe>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80eb 	beq.w	80004be <__udivmoddi4+0x286>
 80002e8:	2700      	movs	r7, #0
 80002ea:	e9c6 0100 	strd	r0, r1, [r6]
 80002ee:	4638      	mov	r0, r7
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f783 	clz	r7, r3
 80002fa:	2f00      	cmp	r7, #0
 80002fc:	d147      	bne.n	800038e <__udivmoddi4+0x156>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd0>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80fa 	bhi.w	80004fc <__udivmoddi4+0x2c4>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4698      	mov	r8, r3
 8000312:	2e00      	cmp	r6, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000316:	e9c6 4800 	strd	r4, r8, [r6]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa0>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xe8>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 808f 	bne.w	8000448 <__udivmoddi4+0x210>
 800032a:	1b49      	subs	r1, r1, r5
 800032c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000330:	fa1f f885 	uxth.w	r8, r5
 8000334:	2701      	movs	r7, #1
 8000336:	fbb1 fcfe 	udiv	ip, r1, lr
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000340:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000344:	fb08 f10c 	mul.w	r1, r8, ip
 8000348:	4299      	cmp	r1, r3
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x124>
 800034c:	18eb      	adds	r3, r5, r3
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4299      	cmp	r1, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 800035a:	4684      	mov	ip, r0
 800035c:	1a59      	subs	r1, r3, r1
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1410 	mls	r4, lr, r0, r1
 8000368:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x14c>
 8000374:	192c      	adds	r4, r5, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x14a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80b6 	bhi.w	80004ee <__udivmoddi4+0x2b6>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e79f      	b.n	80002ce <__udivmoddi4+0x96>
 800038e:	f1c7 0c20 	rsb	ip, r7, #32
 8000392:	40bb      	lsls	r3, r7
 8000394:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000398:	ea4e 0e03 	orr.w	lr, lr, r3
 800039c:	fa01 f407 	lsl.w	r4, r1, r7
 80003a0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003ac:	4325      	orrs	r5, r4
 80003ae:	fbb3 f9f8 	udiv	r9, r3, r8
 80003b2:	0c2c      	lsrs	r4, r5, #16
 80003b4:	fb08 3319 	mls	r3, r8, r9, r3
 80003b8:	fa1f fa8e 	uxth.w	sl, lr
 80003bc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c0:	fb09 f40a 	mul.w	r4, r9, sl
 80003c4:	429c      	cmp	r4, r3
 80003c6:	fa02 f207 	lsl.w	r2, r2, r7
 80003ca:	fa00 f107 	lsl.w	r1, r0, r7
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1e 0303 	adds.w	r3, lr, r3
 80003d4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003d8:	f080 8087 	bcs.w	80004ea <__udivmoddi4+0x2b2>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f240 8084 	bls.w	80004ea <__udivmoddi4+0x2b2>
 80003e2:	f1a9 0902 	sub.w	r9, r9, #2
 80003e6:	4473      	add	r3, lr
 80003e8:	1b1b      	subs	r3, r3, r4
 80003ea:	b2ad      	uxth	r5, r5
 80003ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f0:	fb08 3310 	mls	r3, r8, r0, r3
 80003f4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003fc:	45a2      	cmp	sl, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1e 0404 	adds.w	r4, lr, r4
 8000404:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000408:	d26b      	bcs.n	80004e2 <__udivmoddi4+0x2aa>
 800040a:	45a2      	cmp	sl, r4
 800040c:	d969      	bls.n	80004e2 <__udivmoddi4+0x2aa>
 800040e:	3802      	subs	r0, #2
 8000410:	4474      	add	r4, lr
 8000412:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000416:	fba0 8902 	umull	r8, r9, r0, r2
 800041a:	eba4 040a 	sub.w	r4, r4, sl
 800041e:	454c      	cmp	r4, r9
 8000420:	46c2      	mov	sl, r8
 8000422:	464b      	mov	r3, r9
 8000424:	d354      	bcc.n	80004d0 <__udivmoddi4+0x298>
 8000426:	d051      	beq.n	80004cc <__udivmoddi4+0x294>
 8000428:	2e00      	cmp	r6, #0
 800042a:	d069      	beq.n	8000500 <__udivmoddi4+0x2c8>
 800042c:	ebb1 050a 	subs.w	r5, r1, sl
 8000430:	eb64 0403 	sbc.w	r4, r4, r3
 8000434:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000438:	40fd      	lsrs	r5, r7
 800043a:	40fc      	lsrs	r4, r7
 800043c:	ea4c 0505 	orr.w	r5, ip, r5
 8000440:	e9c6 5400 	strd	r5, r4, [r6]
 8000444:	2700      	movs	r7, #0
 8000446:	e747      	b.n	80002d8 <__udivmoddi4+0xa0>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f703 	lsr.w	r7, r0, r3
 8000450:	4095      	lsls	r5, r2
 8000452:	fa01 f002 	lsl.w	r0, r1, r2
 8000456:	fa21 f303 	lsr.w	r3, r1, r3
 800045a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045e:	4338      	orrs	r0, r7
 8000460:	0c01      	lsrs	r1, r0, #16
 8000462:	fbb3 f7fe 	udiv	r7, r3, lr
 8000466:	fa1f f885 	uxth.w	r8, r5
 800046a:	fb0e 3317 	mls	r3, lr, r7, r3
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb07 f308 	mul.w	r3, r7, r8
 8000476:	428b      	cmp	r3, r1
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x256>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000484:	d22f      	bcs.n	80004e6 <__udivmoddi4+0x2ae>
 8000486:	428b      	cmp	r3, r1
 8000488:	d92d      	bls.n	80004e6 <__udivmoddi4+0x2ae>
 800048a:	3f02      	subs	r7, #2
 800048c:	4429      	add	r1, r5
 800048e:	1acb      	subs	r3, r1, r3
 8000490:	b281      	uxth	r1, r0
 8000492:	fbb3 f0fe 	udiv	r0, r3, lr
 8000496:	fb0e 3310 	mls	r3, lr, r0, r3
 800049a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049e:	fb00 f308 	mul.w	r3, r0, r8
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x27e>
 80004a6:	1869      	adds	r1, r5, r1
 80004a8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004ac:	d217      	bcs.n	80004de <__udivmoddi4+0x2a6>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d915      	bls.n	80004de <__udivmoddi4+0x2a6>
 80004b2:	3802      	subs	r0, #2
 80004b4:	4429      	add	r1, r5
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004bc:	e73b      	b.n	8000336 <__udivmoddi4+0xfe>
 80004be:	4637      	mov	r7, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e709      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c4:	4607      	mov	r7, r0
 80004c6:	e6e7      	b.n	8000298 <__udivmoddi4+0x60>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004cc:	4541      	cmp	r1, r8
 80004ce:	d2ab      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d4:	eb69 020e 	sbc.w	r2, r9, lr
 80004d8:	3801      	subs	r0, #1
 80004da:	4613      	mov	r3, r2
 80004dc:	e7a4      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004de:	4660      	mov	r0, ip
 80004e0:	e7e9      	b.n	80004b6 <__udivmoddi4+0x27e>
 80004e2:	4618      	mov	r0, r3
 80004e4:	e795      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e6:	4667      	mov	r7, ip
 80004e8:	e7d1      	b.n	800048e <__udivmoddi4+0x256>
 80004ea:	4681      	mov	r9, r0
 80004ec:	e77c      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004ee:	3802      	subs	r0, #2
 80004f0:	442c      	add	r4, r5
 80004f2:	e747      	b.n	8000384 <__udivmoddi4+0x14c>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	442b      	add	r3, r5
 80004fa:	e72f      	b.n	800035c <__udivmoddi4+0x124>
 80004fc:	4638      	mov	r0, r7
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xda>
 8000500:	4637      	mov	r7, r6
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0xa0>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08c      	sub	sp, #48	; 0x30
 800050c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050e:	f107 031c 	add.w	r3, r7, #28
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
 800051c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800051e:	4b7b      	ldr	r3, [pc, #492]	; (800070c <MX_GPIO_Init+0x204>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	4a7a      	ldr	r2, [pc, #488]	; (800070c <MX_GPIO_Init+0x204>)
 8000524:	f043 0304 	orr.w	r3, r3, #4
 8000528:	6313      	str	r3, [r2, #48]	; 0x30
 800052a:	4b78      	ldr	r3, [pc, #480]	; (800070c <MX_GPIO_Init+0x204>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	f003 0304 	and.w	r3, r3, #4
 8000532:	61bb      	str	r3, [r7, #24]
 8000534:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000536:	4b75      	ldr	r3, [pc, #468]	; (800070c <MX_GPIO_Init+0x204>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	4a74      	ldr	r2, [pc, #464]	; (800070c <MX_GPIO_Init+0x204>)
 800053c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000540:	6313      	str	r3, [r2, #48]	; 0x30
 8000542:	4b72      	ldr	r3, [pc, #456]	; (800070c <MX_GPIO_Init+0x204>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800054a:	617b      	str	r3, [r7, #20]
 800054c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800054e:	4b6f      	ldr	r3, [pc, #444]	; (800070c <MX_GPIO_Init+0x204>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000552:	4a6e      	ldr	r2, [pc, #440]	; (800070c <MX_GPIO_Init+0x204>)
 8000554:	f043 0301 	orr.w	r3, r3, #1
 8000558:	6313      	str	r3, [r2, #48]	; 0x30
 800055a:	4b6c      	ldr	r3, [pc, #432]	; (800070c <MX_GPIO_Init+0x204>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	613b      	str	r3, [r7, #16]
 8000564:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000566:	4b69      	ldr	r3, [pc, #420]	; (800070c <MX_GPIO_Init+0x204>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	4a68      	ldr	r2, [pc, #416]	; (800070c <MX_GPIO_Init+0x204>)
 800056c:	f043 0302 	orr.w	r3, r3, #2
 8000570:	6313      	str	r3, [r2, #48]	; 0x30
 8000572:	4b66      	ldr	r3, [pc, #408]	; (800070c <MX_GPIO_Init+0x204>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	f003 0302 	and.w	r3, r3, #2
 800057a:	60fb      	str	r3, [r7, #12]
 800057c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800057e:	4b63      	ldr	r3, [pc, #396]	; (800070c <MX_GPIO_Init+0x204>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	4a62      	ldr	r2, [pc, #392]	; (800070c <MX_GPIO_Init+0x204>)
 8000584:	f043 0308 	orr.w	r3, r3, #8
 8000588:	6313      	str	r3, [r2, #48]	; 0x30
 800058a:	4b60      	ldr	r3, [pc, #384]	; (800070c <MX_GPIO_Init+0x204>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	f003 0308 	and.w	r3, r3, #8
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000596:	4b5d      	ldr	r3, [pc, #372]	; (800070c <MX_GPIO_Init+0x204>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	4a5c      	ldr	r2, [pc, #368]	; (800070c <MX_GPIO_Init+0x204>)
 800059c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005a0:	6313      	str	r3, [r2, #48]	; 0x30
 80005a2:	4b5a      	ldr	r3, [pc, #360]	; (800070c <MX_GPIO_Init+0x204>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80005ae:	2200      	movs	r2, #0
 80005b0:	f244 0181 	movw	r1, #16513	; 0x4081
 80005b4:	4856      	ldr	r0, [pc, #344]	; (8000710 <MX_GPIO_Init+0x208>)
 80005b6:	f001 faa3 	bl	8001b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2140      	movs	r1, #64	; 0x40
 80005be:	4855      	ldr	r0, [pc, #340]	; (8000714 <MX_GPIO_Init+0x20c>)
 80005c0:	f001 fa9e 	bl	8001b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SERVO_4_Pin|SERVO_3_Pin|SERVO_2_Pin, GPIO_PIN_RESET);
 80005c4:	2200      	movs	r2, #0
 80005c6:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80005ca:	4853      	ldr	r0, [pc, #332]	; (8000718 <MX_GPIO_Init+0x210>)
 80005cc:	f001 fa98 	bl	8001b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SERVO_1_GPIO_Port, SERVO_1_Pin, GPIO_PIN_RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	2104      	movs	r1, #4
 80005d4:	4851      	ldr	r0, [pc, #324]	; (800071c <MX_GPIO_Init+0x214>)
 80005d6:	f001 fa93 	bl	8001b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80005da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005e0:	4b4f      	ldr	r3, [pc, #316]	; (8000720 <MX_GPIO_Init+0x218>)
 80005e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e4:	2300      	movs	r3, #0
 80005e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80005e8:	f107 031c 	add.w	r3, r7, #28
 80005ec:	4619      	mov	r1, r3
 80005ee:	484a      	ldr	r0, [pc, #296]	; (8000718 <MX_GPIO_Init+0x210>)
 80005f0:	f001 f8dc 	bl	80017ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80005f4:	2332      	movs	r3, #50	; 0x32
 80005f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005f8:	2302      	movs	r3, #2
 80005fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fc:	2300      	movs	r3, #0
 80005fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000600:	2303      	movs	r3, #3
 8000602:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000604:	230b      	movs	r3, #11
 8000606:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000608:	f107 031c 	add.w	r3, r7, #28
 800060c:	4619      	mov	r1, r3
 800060e:	4842      	ldr	r0, [pc, #264]	; (8000718 <MX_GPIO_Init+0x210>)
 8000610:	f001 f8cc 	bl	80017ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000614:	2386      	movs	r3, #134	; 0x86
 8000616:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000618:	2302      	movs	r3, #2
 800061a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061c:	2300      	movs	r3, #0
 800061e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000620:	2303      	movs	r3, #3
 8000622:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000624:	230b      	movs	r3, #11
 8000626:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000628:	f107 031c 	add.w	r3, r7, #28
 800062c:	4619      	mov	r1, r3
 800062e:	483d      	ldr	r0, [pc, #244]	; (8000724 <MX_GPIO_Init+0x21c>)
 8000630:	f001 f8bc 	bl	80017ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000634:	f244 0381 	movw	r3, #16513	; 0x4081
 8000638:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063a:	2301      	movs	r3, #1
 800063c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063e:	2300      	movs	r3, #0
 8000640:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000642:	2300      	movs	r3, #0
 8000644:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000646:	f107 031c 	add.w	r3, r7, #28
 800064a:	4619      	mov	r1, r3
 800064c:	4830      	ldr	r0, [pc, #192]	; (8000710 <MX_GPIO_Init+0x208>)
 800064e:	f001 f8ad 	bl	80017ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000652:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000656:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000658:	2302      	movs	r3, #2
 800065a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000660:	2303      	movs	r3, #3
 8000662:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000664:	230b      	movs	r3, #11
 8000666:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000668:	f107 031c 	add.w	r3, r7, #28
 800066c:	4619      	mov	r1, r3
 800066e:	4828      	ldr	r0, [pc, #160]	; (8000710 <MX_GPIO_Init+0x208>)
 8000670:	f001 f89c 	bl	80017ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000674:	2340      	movs	r3, #64	; 0x40
 8000676:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000678:	2301      	movs	r3, #1
 800067a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000680:	2300      	movs	r3, #0
 8000682:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000684:	f107 031c 	add.w	r3, r7, #28
 8000688:	4619      	mov	r1, r3
 800068a:	4822      	ldr	r0, [pc, #136]	; (8000714 <MX_GPIO_Init+0x20c>)
 800068c:	f001 f88e 	bl	80017ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000690:	2380      	movs	r3, #128	; 0x80
 8000692:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000694:	2300      	movs	r3, #0
 8000696:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800069c:	f107 031c 	add.w	r3, r7, #28
 80006a0:	4619      	mov	r1, r3
 80006a2:	481c      	ldr	r0, [pc, #112]	; (8000714 <MX_GPIO_Init+0x20c>)
 80006a4:	f001 f882 	bl	80017ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SERVO_4_Pin|SERVO_3_Pin|SERVO_2_Pin;
 80006a8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80006ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ae:	2301      	movs	r3, #1
 80006b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b6:	2300      	movs	r3, #0
 80006b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ba:	f107 031c 	add.w	r3, r7, #28
 80006be:	4619      	mov	r1, r3
 80006c0:	4815      	ldr	r0, [pc, #84]	; (8000718 <MX_GPIO_Init+0x210>)
 80006c2:	f001 f873 	bl	80017ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SERVO_1_Pin;
 80006c6:	2304      	movs	r3, #4
 80006c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ca:	2301      	movs	r3, #1
 80006cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	2300      	movs	r3, #0
 80006d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d2:	2300      	movs	r3, #0
 80006d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SERVO_1_GPIO_Port, &GPIO_InitStruct);
 80006d6:	f107 031c 	add.w	r3, r7, #28
 80006da:	4619      	mov	r1, r3
 80006dc:	480f      	ldr	r0, [pc, #60]	; (800071c <MX_GPIO_Init+0x214>)
 80006de:	f001 f865 	bl	80017ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80006e2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80006e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e8:	2302      	movs	r3, #2
 80006ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f0:	2303      	movs	r3, #3
 80006f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006f4:	230b      	movs	r3, #11
 80006f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006f8:	f107 031c 	add.w	r3, r7, #28
 80006fc:	4619      	mov	r1, r3
 80006fe:	4805      	ldr	r0, [pc, #20]	; (8000714 <MX_GPIO_Init+0x20c>)
 8000700:	f001 f854 	bl	80017ac <HAL_GPIO_Init>

}
 8000704:	bf00      	nop
 8000706:	3730      	adds	r7, #48	; 0x30
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40023800 	.word	0x40023800
 8000710:	40020400 	.word	0x40020400
 8000714:	40021800 	.word	0x40021800
 8000718:	40020800 	.word	0x40020800
 800071c:	40020c00 	.word	0x40020c00
 8000720:	10110000 	.word	0x10110000
 8000724:	40020000 	.word	0x40020000

08000728 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800072c:	f000 fead 	bl	800148a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000730:	f000 f8c8 	bl	80008c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000734:	f7ff fee8 	bl	8000508 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000738:	f000 fd80 	bl	800123c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800073c:	f000 fdf2 	bl	8001324 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM6_Init();
 8000740:	f000 fd20 	bl	8001184 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  SERVOS_Init();
 8000744:	f000 f958 	bl	80009f8 <SERVOS_Init>
  SERVOS_Configure(0, SERVO_1_Pin, SERVO_1_GPIO_Port);
 8000748:	4a5a      	ldr	r2, [pc, #360]	; (80008b4 <main+0x18c>)
 800074a:	2104      	movs	r1, #4
 800074c:	2000      	movs	r0, #0
 800074e:	f000 f9c1 	bl	8000ad4 <SERVOS_Configure>
  SERVOS_Configure(1, SERVO_2_Pin, SERVO_2_GPIO_Port);
 8000752:	4a59      	ldr	r2, [pc, #356]	; (80008b8 <main+0x190>)
 8000754:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000758:	2001      	movs	r0, #1
 800075a:	f000 f9bb 	bl	8000ad4 <SERVOS_Configure>
  SERVOS_Configure(2, LD3_Pin, LD3_GPIO_Port);
 800075e:	4a57      	ldr	r2, [pc, #348]	; (80008bc <main+0x194>)
 8000760:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000764:	2002      	movs	r0, #2
 8000766:	f000 f9b5 	bl	8000ad4 <SERVOS_Configure>
  SERVOS_Configure(3, LD3_Pin, LD3_GPIO_Port);
 800076a:	4a54      	ldr	r2, [pc, #336]	; (80008bc <main+0x194>)
 800076c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000770:	2003      	movs	r0, #3
 8000772:	f000 f9af 	bl	8000ad4 <SERVOS_Configure>
  SERVOS_Configure(4, LD3_Pin, LD3_GPIO_Port);
 8000776:	4a51      	ldr	r2, [pc, #324]	; (80008bc <main+0x194>)
 8000778:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800077c:	2004      	movs	r0, #4
 800077e:	f000 f9a9 	bl	8000ad4 <SERVOS_Configure>
  SERVOS_Configure(5, LD3_Pin, LD3_GPIO_Port);
 8000782:	4a4e      	ldr	r2, [pc, #312]	; (80008bc <main+0x194>)
 8000784:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000788:	2005      	movs	r0, #5
 800078a:	f000 f9a3 	bl	8000ad4 <SERVOS_Configure>
  SERVOS_Configure(6, LD3_Pin, LD3_GPIO_Port);
 800078e:	4a4b      	ldr	r2, [pc, #300]	; (80008bc <main+0x194>)
 8000790:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000794:	2006      	movs	r0, #6
 8000796:	f000 f99d 	bl	8000ad4 <SERVOS_Configure>
  SERVOS_Configure(7, LD3_Pin, LD3_GPIO_Port);
 800079a:	4a48      	ldr	r2, [pc, #288]	; (80008bc <main+0x194>)
 800079c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007a0:	2007      	movs	r0, #7
 80007a2:	f000 f997 	bl	8000ad4 <SERVOS_Configure>
  SERVOS_Configure(8, SERVO_3_Pin, SERVO_3_GPIO_Port);
 80007a6:	4a44      	ldr	r2, [pc, #272]	; (80008b8 <main+0x190>)
 80007a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007ac:	2008      	movs	r0, #8
 80007ae:	f000 f991 	bl	8000ad4 <SERVOS_Configure>
  SERVOS_Configure(9, LD3_Pin, LD3_GPIO_Port);
 80007b2:	4a42      	ldr	r2, [pc, #264]	; (80008bc <main+0x194>)
 80007b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007b8:	2009      	movs	r0, #9
 80007ba:	f000 f98b 	bl	8000ad4 <SERVOS_Configure>
  SERVOS_Configure(10, LD3_Pin, LD3_GPIO_Port);
 80007be:	4a3f      	ldr	r2, [pc, #252]	; (80008bc <main+0x194>)
 80007c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007c4:	200a      	movs	r0, #10
 80007c6:	f000 f985 	bl	8000ad4 <SERVOS_Configure>
  SERVOS_Configure(11, LD3_Pin, LD3_GPIO_Port);
 80007ca:	4a3c      	ldr	r2, [pc, #240]	; (80008bc <main+0x194>)
 80007cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007d0:	200b      	movs	r0, #11
 80007d2:	f000 f97f 	bl	8000ad4 <SERVOS_Configure>
  SERVOS_Configure(12, LD3_Pin, LD3_GPIO_Port);
 80007d6:	4a39      	ldr	r2, [pc, #228]	; (80008bc <main+0x194>)
 80007d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007dc:	200c      	movs	r0, #12
 80007de:	f000 f979 	bl	8000ad4 <SERVOS_Configure>
  SERVOS_Configure(13, LD3_Pin, LD3_GPIO_Port);
 80007e2:	4a36      	ldr	r2, [pc, #216]	; (80008bc <main+0x194>)
 80007e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007e8:	200d      	movs	r0, #13
 80007ea:	f000 f973 	bl	8000ad4 <SERVOS_Configure>
  SERVOS_Configure(14, LD3_Pin, LD3_GPIO_Port);
 80007ee:	4a33      	ldr	r2, [pc, #204]	; (80008bc <main+0x194>)
 80007f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007f4:	200e      	movs	r0, #14
 80007f6:	f000 f96d 	bl	8000ad4 <SERVOS_Configure>
  SERVOS_Configure(15, LD3_Pin, LD3_GPIO_Port);
 80007fa:	4a30      	ldr	r2, [pc, #192]	; (80008bc <main+0x194>)
 80007fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000800:	200f      	movs	r0, #15
 8000802:	f000 f967 	bl	8000ad4 <SERVOS_Configure>
  SERVOS_Configure(16, SERVO_4_Pin, SERVO_4_GPIO_Port);
 8000806:	4a2c      	ldr	r2, [pc, #176]	; (80008b8 <main+0x190>)
 8000808:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800080c:	2010      	movs	r0, #16
 800080e:	f000 f961 	bl	8000ad4 <SERVOS_Configure>
  SERVOS_Configure(17, LD3_Pin, LD3_GPIO_Port);
 8000812:	4a2a      	ldr	r2, [pc, #168]	; (80008bc <main+0x194>)
 8000814:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000818:	2011      	movs	r0, #17
 800081a:	f000 f95b 	bl	8000ad4 <SERVOS_Configure>
  SERVOS_Configure(18, LD3_Pin, LD3_GPIO_Port);
 800081e:	4a27      	ldr	r2, [pc, #156]	; (80008bc <main+0x194>)
 8000820:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000824:	2012      	movs	r0, #18
 8000826:	f000 f955 	bl	8000ad4 <SERVOS_Configure>
  SERVOS_Configure(19, LD3_Pin, LD3_GPIO_Port);
 800082a:	4a24      	ldr	r2, [pc, #144]	; (80008bc <main+0x194>)
 800082c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000830:	2013      	movs	r0, #19
 8000832:	f000 f94f 	bl	8000ad4 <SERVOS_Configure>
  SERVOS_Configure(20, LD3_Pin, LD3_GPIO_Port);
 8000836:	4a21      	ldr	r2, [pc, #132]	; (80008bc <main+0x194>)
 8000838:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800083c:	2014      	movs	r0, #20
 800083e:	f000 f949 	bl	8000ad4 <SERVOS_Configure>
  SERVOS_Configure(21, LD3_Pin, LD3_GPIO_Port);
 8000842:	4a1e      	ldr	r2, [pc, #120]	; (80008bc <main+0x194>)
 8000844:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000848:	2015      	movs	r0, #21
 800084a:	f000 f943 	bl	8000ad4 <SERVOS_Configure>
  SERVOS_Configure(22, LD3_Pin, LD3_GPIO_Port);
 800084e:	4a1b      	ldr	r2, [pc, #108]	; (80008bc <main+0x194>)
 8000850:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000854:	2016      	movs	r0, #22
 8000856:	f000 f93d 	bl	8000ad4 <SERVOS_Configure>
  SERVOS_Configure(23, LD3_Pin, LD3_GPIO_Port);
 800085a:	4a18      	ldr	r2, [pc, #96]	; (80008bc <main+0x194>)
 800085c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000860:	2017      	movs	r0, #23
 8000862:	f000 f937 	bl	8000ad4 <SERVOS_Configure>
  SERVOS_Configure(24, LD3_Pin, LD3_GPIO_Port);
 8000866:	4a15      	ldr	r2, [pc, #84]	; (80008bc <main+0x194>)
 8000868:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800086c:	2018      	movs	r0, #24
 800086e:	f000 f931 	bl	8000ad4 <SERVOS_Configure>
  SERVOS_Set(0, 100);
 8000872:	2164      	movs	r1, #100	; 0x64
 8000874:	2000      	movs	r0, #0
 8000876:	f000 f9f1 	bl	8000c5c <SERVOS_Set>
  SERVOS_Set(8, 200);
 800087a:	21c8      	movs	r1, #200	; 0xc8
 800087c:	2008      	movs	r0, #8
 800087e:	f000 f9ed 	bl	8000c5c <SERVOS_Set>
  SERVOS_Set(16, 300);
 8000882:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000886:	2010      	movs	r0, #16
 8000888:	f000 f9e8 	bl	8000c5c <SERVOS_Set>
  SERVOS_Set(1, 400);
 800088c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000890:	2001      	movs	r0, #1
 8000892:	f000 f9e3 	bl	8000c5c <SERVOS_Set>

  SERVOS_Set(16, 150);
 8000896:	2196      	movs	r1, #150	; 0x96
 8000898:	2010      	movs	r0, #16
 800089a:	f000 f9df 	bl	8000c5c <SERVOS_Set>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (bTick1ms)
 800089e:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <main+0x198>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d0fb      	beq.n	800089e <main+0x176>
	{
	  bTick1ms = 0;
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <main+0x198>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
	  SERVOS_Task1ms();
 80008ac:	f000 fb96 	bl	8000fdc <SERVOS_Task1ms>
	if (bTick1ms)
 80008b0:	e7f5      	b.n	800089e <main+0x176>
 80008b2:	bf00      	nop
 80008b4:	40020c00 	.word	0x40020c00
 80008b8:	40020800 	.word	0x40020800
 80008bc:	40020400 	.word	0x40020400
 80008c0:	20000028 	.word	0x20000028

080008c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b0b4      	sub	sp, #208	; 0xd0
 80008c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ca:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80008ce:	2230      	movs	r2, #48	; 0x30
 80008d0:	2100      	movs	r1, #0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f003 fd6c 	bl	80043b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
 80008e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008e8:	f107 0308 	add.w	r3, r7, #8
 80008ec:	2284      	movs	r2, #132	; 0x84
 80008ee:	2100      	movs	r1, #0
 80008f0:	4618      	mov	r0, r3
 80008f2:	f003 fd5d 	bl	80043b0 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008f6:	f001 fa65 	bl	8001dc4 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fa:	4b3a      	ldr	r3, [pc, #232]	; (80009e4 <SystemClock_Config+0x120>)
 80008fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fe:	4a39      	ldr	r2, [pc, #228]	; (80009e4 <SystemClock_Config+0x120>)
 8000900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000904:	6413      	str	r3, [r2, #64]	; 0x40
 8000906:	4b37      	ldr	r3, [pc, #220]	; (80009e4 <SystemClock_Config+0x120>)
 8000908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000912:	4b35      	ldr	r3, [pc, #212]	; (80009e8 <SystemClock_Config+0x124>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a34      	ldr	r2, [pc, #208]	; (80009e8 <SystemClock_Config+0x124>)
 8000918:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800091c:	6013      	str	r3, [r2, #0]
 800091e:	4b32      	ldr	r3, [pc, #200]	; (80009e8 <SystemClock_Config+0x124>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000926:	603b      	str	r3, [r7, #0]
 8000928:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800092a:	2301      	movs	r3, #1
 800092c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000930:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000934:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000938:	2302      	movs	r3, #2
 800093a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800093e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000942:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000946:	2304      	movs	r3, #4
 8000948:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 800094c:	23d8      	movs	r3, #216	; 0xd8
 800094e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000952:	2302      	movs	r3, #2
 8000954:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000958:	2309      	movs	r3, #9
 800095a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800095e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000962:	4618      	mov	r0, r3
 8000964:	f001 fa8e 	bl	8001e84 <HAL_RCC_OscConfig>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800096e:	f000 f83f 	bl	80009f0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000972:	f001 fa37 	bl	8001de4 <HAL_PWREx_EnableOverDrive>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800097c:	f000 f838 	bl	80009f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000980:	230f      	movs	r3, #15
 8000982:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000986:	2302      	movs	r3, #2
 8000988:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800098c:	2300      	movs	r3, #0
 800098e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000992:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000996:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800099a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800099e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80009a2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80009a6:	2107      	movs	r1, #7
 80009a8:	4618      	mov	r0, r3
 80009aa:	f001 fd0f 	bl	80023cc <HAL_RCC_ClockConfig>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80009b4:	f000 f81c 	bl	80009f0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 80009b8:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <SystemClock_Config+0x128>)
 80009ba:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80009bc:	2300      	movs	r3, #0
 80009be:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009c6:	f107 0308 	add.w	r3, r7, #8
 80009ca:	4618      	mov	r0, r3
 80009cc:	f001 fef6 	bl	80027bc <HAL_RCCEx_PeriphCLKConfig>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <SystemClock_Config+0x116>
  {
    Error_Handler();
 80009d6:	f000 f80b 	bl	80009f0 <Error_Handler>
  }
}
 80009da:	bf00      	nop
 80009dc:	37d0      	adds	r7, #208	; 0xd0
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40023800 	.word	0x40023800
 80009e8:	40007000 	.word	0x40007000
 80009ec:	00200100 	.word	0x00200100

080009f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f6:	e7fe      	b.n	80009f6 <Error_Handler+0x6>

080009f8 <SERVOS_Init>:
 * Initializes the data fields and starts the timer with an empty sequence
 * with 20ms period time
 *
 */
void SERVOS_Init()
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
	servos_iCnt = 0;
 80009fe:	4b29      	ldr	r3, [pc, #164]	; (8000aa4 <SERVOS_Init+0xac>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
	for (int i=0; i<SERVOS_TOTAL; i++)
 8000a04:	2300      	movs	r3, #0
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	e007      	b.n	8000a1a <SERVOS_Init+0x22>
	{
		servos_au8Indices[i] = SERVOS_ID_EMPTY;
 8000a0a:	4a27      	ldr	r2, [pc, #156]	; (8000aa8 <SERVOS_Init+0xb0>)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4413      	add	r3, r2
 8000a10:	22ff      	movs	r2, #255	; 0xff
 8000a12:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<SERVOS_TOTAL; i++)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	3301      	adds	r3, #1
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2ba7      	cmp	r3, #167	; 0xa7
 8000a1e:	ddf4      	ble.n	8000a0a <SERVOS_Init+0x12>
	}
	for (int i=0; i<SERVOS_SERIAL; i++)
 8000a20:	2300      	movs	r3, #0
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	e00b      	b.n	8000a3e <SERVOS_Init+0x46>
	{
		servos_asParallel[i].cnt = 0;
 8000a26:	4921      	ldr	r1, [pc, #132]	; (8000aac <SERVOS_Init+0xb4>)
 8000a28:	683a      	ldr	r2, [r7, #0]
 8000a2a:	4613      	mov	r3, r2
 8000a2c:	00db      	lsls	r3, r3, #3
 8000a2e:	1a9b      	subs	r3, r3, r2
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	440b      	add	r3, r1
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
	for (int i=0; i<SERVOS_SERIAL; i++)
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	603b      	str	r3, [r7, #0]
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	2b07      	cmp	r3, #7
 8000a42:	ddf0      	ble.n	8000a26 <SERVOS_Init+0x2e>
	}

	servos_asActions[0].pServosBSSR = &(servos_u32DummyBSSR);
 8000a44:	4b1a      	ldr	r3, [pc, #104]	; (8000ab0 <SERVOS_Init+0xb8>)
 8000a46:	4a1b      	ldr	r2, [pc, #108]	; (8000ab4 <SERVOS_Init+0xbc>)
 8000a48:	605a      	str	r2, [r3, #4]
	servos_asActions[0].u32ServosBSSRVal = 0;
 8000a4a:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <SERVOS_Init+0xb8>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
	servos_asActions[0].u16ARR = 0 ;
 8000a50:	4b17      	ldr	r3, [pc, #92]	; (8000ab0 <SERVOS_Init+0xb8>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	801a      	strh	r2, [r3, #0]

	servos_pBSSR      = servos_asActions[1].pServosBSSR = &(servos_u32DummyBSSR);
 8000a56:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <SERVOS_Init+0xb8>)
 8000a58:	4a16      	ldr	r2, [pc, #88]	; (8000ab4 <SERVOS_Init+0xbc>)
 8000a5a:	611a      	str	r2, [r3, #16]
 8000a5c:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <SERVOS_Init+0xb8>)
 8000a5e:	691b      	ldr	r3, [r3, #16]
 8000a60:	4a15      	ldr	r2, [pc, #84]	; (8000ab8 <SERVOS_Init+0xc0>)
 8000a62:	6013      	str	r3, [r2, #0]
	servos_u32BSSRVal = servos_asActions[1].u32ServosBSSRVal = 0;
 8000a64:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <SERVOS_Init+0xb8>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	615a      	str	r2, [r3, #20]
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <SERVOS_Init+0xb8>)
 8000a6c:	695b      	ldr	r3, [r3, #20]
 8000a6e:	4a13      	ldr	r2, [pc, #76]	; (8000abc <SERVOS_Init+0xc4>)
 8000a70:	6013      	str	r3, [r2, #0]
	servos_u16ARR     = servos_asActions[1].u16ARR = 1000-1;
 8000a72:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <SERVOS_Init+0xb8>)
 8000a74:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a78:	819a      	strh	r2, [r3, #12]
 8000a7a:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <SERVOS_Init+0xb8>)
 8000a7c:	899a      	ldrh	r2, [r3, #12]
 8000a7e:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <SERVOS_Init+0xc8>)
 8000a80:	801a      	strh	r2, [r3, #0]

	servos_iActionCnt = 0;
 8000a82:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <SERVOS_Init+0xcc>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
	servos_iActionLen = 2;
 8000a88:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <SERVOS_Init+0xd0>)
 8000a8a:	2202      	movs	r2, #2
 8000a8c:	601a      	str	r2, [r3, #0]

	servos_bRequestUpdate = 0;
 8000a8e:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <SERVOS_Init+0xd4>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim6);
 8000a94:	480e      	ldr	r0, [pc, #56]	; (8000ad0 <SERVOS_Init+0xd8>)
 8000a96:	f002 faab 	bl	8002ff0 <HAL_TIM_Base_Start_IT>
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	20001988 	.word	0x20001988
 8000aa8:	20000030 	.word	0x20000030
 8000aac:	200010b0 	.word	0x200010b0
 8000ab0:	200000d8 	.word	0x200000d8
 8000ab4:	20001190 	.word	0x20001190
 8000ab8:	20001980 	.word	0x20001980
 8000abc:	2000198c 	.word	0x2000198c
 8000ac0:	20001984 	.word	0x20001984
 8000ac4:	20001194 	.word	0x20001194
 8000ac8:	20001198 	.word	0x20001198
 8000acc:	2000197c 	.word	0x2000197c
 8000ad0:	20001990 	.word	0x20001990

08000ad4 <SERVOS_Configure>:
 *
 * \return error result
 *
 */
int SERVOS_Configure(uint8_t u8ServoId, uint16_t u16GpioPin, GPIO_TypeDef* pGpioPort)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	603a      	str	r2, [r7, #0]
 8000ade:	71fb      	strb	r3, [r7, #7]
 8000ae0:	460b      	mov	r3, r1
 8000ae2:	80bb      	strh	r3, [r7, #4]
	int iSerialIx;
	int iParallelIx;

	// Check range of u8ServoId
	if (u8ServoId >= SERVOS_TOTAL)
 8000ae4:	79fb      	ldrb	r3, [r7, #7]
 8000ae6:	2ba7      	cmp	r3, #167	; 0xa7
 8000ae8:	d901      	bls.n	8000aee <SERVOS_Configure+0x1a>
	{
		return SERVOS_ERROR_ID_OUT_OF_RANGE;
 8000aea:	2301      	movs	r3, #1
 8000aec:	e080      	b.n	8000bf0 <SERVOS_Configure+0x11c>
	}

	// configure a servo only one time
	if (servos_au8Indices[u8ServoId] != SERVOS_ID_EMPTY)
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	4a42      	ldr	r2, [pc, #264]	; (8000bfc <SERVOS_Configure+0x128>)
 8000af2:	5cd3      	ldrb	r3, [r2, r3]
 8000af4:	2bff      	cmp	r3, #255	; 0xff
 8000af6:	d001      	beq.n	8000afc <SERVOS_Configure+0x28>
	{
		return SERVOS_ERROR_ALREADY_CONFIGURED;
 8000af8:	2303      	movs	r3, #3
 8000afa:	e079      	b.n	8000bf0 <SERVOS_Configure+0x11c>
	}

	// Add servoID to table
	servos_au8Indices[u8ServoId] = servos_iCnt;
 8000afc:	4b40      	ldr	r3, [pc, #256]	; (8000c00 <SERVOS_Configure+0x12c>)
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	b2d1      	uxtb	r1, r2
 8000b04:	4a3d      	ldr	r2, [pc, #244]	; (8000bfc <SERVOS_Configure+0x128>)
 8000b06:	54d1      	strb	r1, [r2, r3]
	servos_asAll[servos_iCnt].value = SERVOS_DEFAULT_VAL;
 8000b08:	4b3d      	ldr	r3, [pc, #244]	; (8000c00 <SERVOS_Configure+0x12c>)
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	493d      	ldr	r1, [pc, #244]	; (8000c04 <SERVOS_Configure+0x130>)
 8000b0e:	4613      	mov	r3, r2
 8000b10:	005b      	lsls	r3, r3, #1
 8000b12:	4413      	add	r3, r2
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	18ca      	adds	r2, r1, r3
 8000b18:	8813      	ldrh	r3, [r2, #0]
 8000b1a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000b1e:	f361 0309 	bfi	r3, r1, #0, #10
 8000b22:	8013      	strh	r3, [r2, #0]
	servos_asAll[servos_iCnt].attached = 0;
 8000b24:	4b36      	ldr	r3, [pc, #216]	; (8000c00 <SERVOS_Configure+0x12c>)
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	4936      	ldr	r1, [pc, #216]	; (8000c04 <SERVOS_Configure+0x130>)
 8000b2a:	4613      	mov	r3, r2
 8000b2c:	005b      	lsls	r3, r3, #1
 8000b2e:	4413      	add	r3, r2
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	18ca      	adds	r2, r1, r3
 8000b34:	7853      	ldrb	r3, [r2, #1]
 8000b36:	f36f 0382 	bfc	r3, #2, #1
 8000b3a:	7053      	strb	r3, [r2, #1]
	servos_asAll[servos_iCnt].servoIndex = servos_iCnt;
 8000b3c:	4b30      	ldr	r3, [pc, #192]	; (8000c00 <SERVOS_Configure+0x12c>)
 8000b3e:	6819      	ldr	r1, [r3, #0]
 8000b40:	4b2f      	ldr	r3, [pc, #188]	; (8000c00 <SERVOS_Configure+0x12c>)
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	b2c8      	uxtb	r0, r1
 8000b46:	492f      	ldr	r1, [pc, #188]	; (8000c04 <SERVOS_Configure+0x130>)
 8000b48:	4613      	mov	r3, r2
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	4413      	add	r3, r2
 8000b4e:	009b      	lsls	r3, r3, #2
 8000b50:	440b      	add	r3, r1
 8000b52:	3309      	adds	r3, #9
 8000b54:	4602      	mov	r2, r0
 8000b56:	701a      	strb	r2, [r3, #0]
	servos_asAll[servos_iCnt].pGpioPort = pGpioPort;
 8000b58:	4b29      	ldr	r3, [pc, #164]	; (8000c00 <SERVOS_Configure+0x12c>)
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	4929      	ldr	r1, [pc, #164]	; (8000c04 <SERVOS_Configure+0x130>)
 8000b5e:	4613      	mov	r3, r2
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	4413      	add	r3, r2
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	440b      	add	r3, r1
 8000b68:	3304      	adds	r3, #4
 8000b6a:	683a      	ldr	r2, [r7, #0]
 8000b6c:	601a      	str	r2, [r3, #0]
	servos_asAll[servos_iCnt].u16GpioPin = u16GpioPin;
 8000b6e:	4b24      	ldr	r3, [pc, #144]	; (8000c00 <SERVOS_Configure+0x12c>)
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	4924      	ldr	r1, [pc, #144]	; (8000c04 <SERVOS_Configure+0x130>)
 8000b74:	4613      	mov	r3, r2
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	4413      	add	r3, r2
 8000b7a:	009b      	lsls	r3, r3, #2
 8000b7c:	440b      	add	r3, r1
 8000b7e:	3302      	adds	r3, #2
 8000b80:	88ba      	ldrh	r2, [r7, #4]
 8000b82:	801a      	strh	r2, [r3, #0]

	// update the parallel counter
	iSerialIx = servos_iCnt & SERVOS_SERIAL_MASK;
 8000b84:	4b1e      	ldr	r3, [pc, #120]	; (8000c00 <SERVOS_Configure+0x12c>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f003 0307 	and.w	r3, r3, #7
 8000b8c:	60fb      	str	r3, [r7, #12]
	iParallelIx = servos_iCnt >> SERVOS_SERIAL_SHIFT;
 8000b8e:	4b1c      	ldr	r3, [pc, #112]	; (8000c00 <SERVOS_Configure+0x12c>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	10db      	asrs	r3, r3, #3
 8000b94:	60bb      	str	r3, [r7, #8]
	servos_asParallel[iSerialIx].cnt = iParallelIx + 1;
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	491a      	ldr	r1, [pc, #104]	; (8000c08 <SERVOS_Configure+0x134>)
 8000b9e:	68fa      	ldr	r2, [r7, #12]
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	00db      	lsls	r3, r3, #3
 8000ba4:	1a9b      	subs	r3, r3, r2
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	440b      	add	r3, r1
 8000baa:	6018      	str	r0, [r3, #0]
	servos_asParallel[iSerialIx].servos[iParallelIx] = servos_iCnt;
 8000bac:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <SERVOS_Configure+0x12c>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	b2d8      	uxtb	r0, r3
 8000bb2:	4915      	ldr	r1, [pc, #84]	; (8000c08 <SERVOS_Configure+0x134>)
 8000bb4:	68fa      	ldr	r2, [r7, #12]
 8000bb6:	4613      	mov	r3, r2
 8000bb8:	00db      	lsls	r3, r3, #3
 8000bba:	1a9b      	subs	r3, r3, r2
 8000bbc:	009b      	lsls	r3, r3, #2
 8000bbe:	18ca      	adds	r2, r1, r3
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	3304      	adds	r3, #4
 8000bc6:	4602      	mov	r2, r0
 8000bc8:	701a      	strb	r2, [r3, #0]
	servos_asAll[servos_iCnt].parallelSortPos = iParallelIx;
 8000bca:	4b0d      	ldr	r3, [pc, #52]	; (8000c00 <SERVOS_Configure+0x12c>)
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	b2d8      	uxtb	r0, r3
 8000bd2:	490c      	ldr	r1, [pc, #48]	; (8000c04 <SERVOS_Configure+0x130>)
 8000bd4:	4613      	mov	r3, r2
 8000bd6:	005b      	lsls	r3, r3, #1
 8000bd8:	4413      	add	r3, r2
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	440b      	add	r3, r1
 8000bde:	3308      	adds	r3, #8
 8000be0:	4602      	mov	r2, r0
 8000be2:	701a      	strb	r2, [r3, #0]

	//added
	servos_iCnt++;
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <SERVOS_Configure+0x12c>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	3301      	adds	r3, #1
 8000bea:	4a05      	ldr	r2, [pc, #20]	; (8000c00 <SERVOS_Configure+0x12c>)
 8000bec:	6013      	str	r3, [r2, #0]

	return SERVOS_ERROR_OK;
 8000bee:	2300      	movs	r3, #0
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3714      	adds	r7, #20
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	20000030 	.word	0x20000030
 8000c00:	20001988 	.word	0x20001988
 8000c04:	2000119c 	.word	0x2000119c
 8000c08:	200010b0 	.word	0x200010b0

08000c0c <SERVOS_Swap>:
 * \param otherServo and the other servo to swap
 * \param servosParallel the current parallel structure
 *
 */
__STATIC_INLINE void SERVOS_Swap(SERVO_s* thisServo, SERVO_s* otherServo, SERVO_PARALLEL_s* servosParallel)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
	// Swap
	thisServo->parallelSortPos--;
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	7a1b      	ldrb	r3, [r3, #8]
 8000c1c:	3b01      	subs	r3, #1
 8000c1e:	b2da      	uxtb	r2, r3
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	721a      	strb	r2, [r3, #8]
	otherServo->parallelSortPos++;
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	7a1b      	ldrb	r3, [r3, #8]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	b2da      	uxtb	r2, r3
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	721a      	strb	r2, [r3, #8]
	servosParallel->servos[thisServo->parallelSortPos] = thisServo->servoIndex;
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	7a1b      	ldrb	r3, [r3, #8]
 8000c34:	4619      	mov	r1, r3
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	7a5a      	ldrb	r2, [r3, #9]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	440b      	add	r3, r1
 8000c3e:	711a      	strb	r2, [r3, #4]
	servosParallel->servos[otherServo->parallelSortPos] = otherServo->servoIndex;
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	7a1b      	ldrb	r3, [r3, #8]
 8000c44:	4619      	mov	r1, r3
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	7a5a      	ldrb	r2, [r3, #9]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	440b      	add	r3, r1
 8000c4e:	711a      	strb	r2, [r3, #4]
}
 8000c50:	bf00      	nop
 8000c52:	3714      	adds	r7, #20
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <SERVOS_Set>:
 *
 * \return error result
 *
 */
int SERVOS_Set(uint8_t u8ServoId, uint32_t u32Value)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b088      	sub	sp, #32
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	6039      	str	r1, [r7, #0]
 8000c66:	71fb      	strb	r3, [r7, #7]
	SERVO_s* thisServo;
	SERVO_s* otherServo;
	SERVO_PARALLEL_s* servosParallel;

	// Check range of u8ServoId
	if (u8ServoId >= SERVOS_TOTAL)
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	2ba7      	cmp	r3, #167	; 0xa7
 8000c6c:	d901      	bls.n	8000c72 <SERVOS_Set+0x16>
	{
		return SERVOS_ERROR_ID_OUT_OF_RANGE;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e091      	b.n	8000d96 <SERVOS_Set+0x13a>
	}

	// Limit to maximum value
	if (u32Value > SERVOS_MAXVAL)
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c78:	d902      	bls.n	8000c80 <SERVOS_Set+0x24>
	{
		u32Value = SERVOS_MAXVAL;
 8000c7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c7e:	603b      	str	r3, [r7, #0]
	}


	// Get reference of the servo
	servoindex = servos_au8Indices[u8ServoId];
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	4a47      	ldr	r2, [pc, #284]	; (8000da0 <SERVOS_Set+0x144>)
 8000c84:	5cd3      	ldrb	r3, [r2, r3]
 8000c86:	61bb      	str	r3, [r7, #24]
	// Check if configured
	if (servoindex == SERVOS_ID_EMPTY)
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	2bff      	cmp	r3, #255	; 0xff
 8000c8c:	d101      	bne.n	8000c92 <SERVOS_Set+0x36>
	{
		return SERVOS_ERROR_NOT_CONFIGURED;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	e081      	b.n	8000d96 <SERVOS_Set+0x13a>
	}
	thisServo = &servos_asAll[servoindex];
 8000c92:	69ba      	ldr	r2, [r7, #24]
 8000c94:	4613      	mov	r3, r2
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	4413      	add	r3, r2
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	4a41      	ldr	r2, [pc, #260]	; (8000da4 <SERVOS_Set+0x148>)
 8000c9e:	4413      	add	r3, r2
 8000ca0:	617b      	str	r3, [r7, #20]

	// Attach it if not
	thisServo->attached = 1;
 8000ca2:	697a      	ldr	r2, [r7, #20]
 8000ca4:	7853      	ldrb	r3, [r2, #1]
 8000ca6:	f043 0304 	orr.w	r3, r3, #4
 8000caa:	7053      	strb	r3, [r2, #1]

	// has the value changed?
	if (thisServo->value != u32Value)
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	881b      	ldrh	r3, [r3, #0]
 8000cb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d06a      	beq.n	8000d94 <SERVOS_Set+0x138>
	{
		thisServo->value = u32Value;
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000cc4:	b299      	uxth	r1, r3
 8000cc6:	697a      	ldr	r2, [r7, #20]
 8000cc8:	8813      	ldrh	r3, [r2, #0]
 8000cca:	f361 0309 	bfi	r3, r1, #0, #10
 8000cce:	8013      	strh	r3, [r2, #0]

		// update the parallel counter
		serialIndex = servoindex & SERVOS_SERIAL_MASK;
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	f003 0307 	and.w	r3, r3, #7
 8000cd6:	613b      	str	r3, [r7, #16]
		//parallelIndex = servos_cnt >> SERVOS_SERIAL_SHIFT;
		servosParallel = &servos_asParallel[serialIndex];
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	4613      	mov	r3, r2
 8000cdc:	00db      	lsls	r3, r3, #3
 8000cde:	1a9b      	subs	r3, r3, r2
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	4a31      	ldr	r2, [pc, #196]	; (8000da8 <SERVOS_Set+0x14c>)
 8000ce4:	4413      	add	r3, r2
 8000ce6:	60fb      	str	r3, [r7, #12]

		// Are there more than 1 servos, we have to sort them
		if ( servosParallel->cnt > 1)
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d951      	bls.n	8000d94 <SERVOS_Set+0x138>
		{
			// sort downwards
			do
			{
				bFound = 0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	61fb      	str	r3, [r7, #28]

				if (thisServo->parallelSortPos > 0)
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	7a1b      	ldrb	r3, [r3, #8]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d01d      	beq.n	8000d38 <SERVOS_Set+0xdc>
				{
					otherServo = &servos_asAll[servosParallel->servos[(thisServo->parallelSortPos)-1]];
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	7a1b      	ldrb	r3, [r3, #8]
 8000d00:	3b01      	subs	r3, #1
 8000d02:	68fa      	ldr	r2, [r7, #12]
 8000d04:	4413      	add	r3, r2
 8000d06:	791b      	ldrb	r3, [r3, #4]
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4613      	mov	r3, r2
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	4413      	add	r3, r2
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	4a24      	ldr	r2, [pc, #144]	; (8000da4 <SERVOS_Set+0x148>)
 8000d14:	4413      	add	r3, r2
 8000d16:	60bb      	str	r3, [r7, #8]
					if (u32Value < 	otherServo->value )
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	881b      	ldrh	r3, [r3, #0]
 8000d1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	461a      	mov	r2, r3
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d206      	bcs.n	8000d38 <SERVOS_Set+0xdc>
					{
						bFound = 1;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	61fb      	str	r3, [r7, #28]
						// Swap
						SERVOS_Swap(thisServo, otherServo, servosParallel);
 8000d2e:	68fa      	ldr	r2, [r7, #12]
 8000d30:	68b9      	ldr	r1, [r7, #8]
 8000d32:	6978      	ldr	r0, [r7, #20]
 8000d34:	f7ff ff6a 	bl	8000c0c <SERVOS_Swap>
					}
				}
			} while (bFound);
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d1d8      	bne.n	8000cf0 <SERVOS_Set+0x94>

			// sort upwards
			do
			{
				bFound = 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]

				if (thisServo->parallelSortPos < (servosParallel->cnt-1))
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	7a1b      	ldrb	r3, [r3, #8]
 8000d46:	461a      	mov	r2, r3
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	3b01      	subs	r3, #1
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d21d      	bcs.n	8000d8e <SERVOS_Set+0x132>
				{
					otherServo = &servos_asAll[servosParallel->servos[(thisServo->parallelSortPos)+1]];
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	7a1b      	ldrb	r3, [r3, #8]
 8000d56:	3301      	adds	r3, #1
 8000d58:	68fa      	ldr	r2, [r7, #12]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	791b      	ldrb	r3, [r3, #4]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	4613      	mov	r3, r2
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	4413      	add	r3, r2
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	4a0e      	ldr	r2, [pc, #56]	; (8000da4 <SERVOS_Set+0x148>)
 8000d6a:	4413      	add	r3, r2
 8000d6c:	60bb      	str	r3, [r7, #8]
					if (u32Value  >	otherServo->value )
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	881b      	ldrh	r3, [r3, #0]
 8000d72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	461a      	mov	r2, r3
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d906      	bls.n	8000d8e <SERVOS_Set+0x132>
					{
						bFound = 1;
 8000d80:	2301      	movs	r3, #1
 8000d82:	61fb      	str	r3, [r7, #28]
						// Swap
						SERVOS_Swap(thisServo, otherServo, servosParallel);
 8000d84:	68fa      	ldr	r2, [r7, #12]
 8000d86:	68b9      	ldr	r1, [r7, #8]
 8000d88:	6978      	ldr	r0, [r7, #20]
 8000d8a:	f7ff ff3f 	bl	8000c0c <SERVOS_Swap>
					}
				}
			} while (bFound);
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d1d4      	bne.n	8000d3e <SERVOS_Set+0xe2>

		}
	}

	return SERVOS_ERROR_OK;
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3720      	adds	r7, #32
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000030 	.word	0x20000030
 8000da4:	2000119c 	.word	0x2000119c
 8000da8:	200010b0 	.word	0x200010b0

08000dac <SERVOS_Update>:
/**
 * Update the action table for the ISR
 *
 */
static void SERVOS_Update(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b08b      	sub	sp, #44	; 0x2c
 8000db0:	af00      	add	r7, sp, #0
	int iTimeUs = 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	613b      	str	r3, [r7, #16]
	int iTimeUsLast = 0;
 8000db6:	2300      	movs	r3, #0
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
	int iActionCnt;
	int iParallelPulsesTime;
	SERVO_s* psServo;
	SERVO_PARALLEL_s* psServosParallel;

	iActionCnt = 1;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	623b      	str	r3, [r7, #32]
	for (int s=0; s<SERVOS_SERIAL; s++)
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61fb      	str	r3, [r7, #28]
 8000dc2:	e0cb      	b.n	8000f5c <SERVOS_Update+0x1b0>
	{
		psServosParallel = &servos_asParallel[s];
 8000dc4:	69fa      	ldr	r2, [r7, #28]
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	00db      	lsls	r3, r3, #3
 8000dca:	1a9b      	subs	r3, r3, r2
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	4a7e      	ldr	r2, [pc, #504]	; (8000fc8 <SERVOS_Update+0x21c>)
 8000dd0:	4413      	add	r3, r2
 8000dd2:	60fb      	str	r3, [r7, #12]
		iParallelPulsesTime = s * SERVOS_TIME_PULSE_GRID;
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	f640 02ca 	movw	r2, #2250	; 0x8ca
 8000dda:	fb02 f303 	mul.w	r3, r2, r3
 8000dde:	60bb      	str	r3, [r7, #8]

		// Set the action for all positive edged of the servo pulses that
		// are controlled in parallel
		for (int p=0; p<psServosParallel->cnt; p++)
 8000de0:	2300      	movs	r3, #0
 8000de2:	61bb      	str	r3, [r7, #24]
 8000de4:	e05a      	b.n	8000e9c <SERVOS_Update+0xf0>
		{
			psServo = &servos_asAll[psServosParallel->servos[p]];
 8000de6:	68fa      	ldr	r2, [r7, #12]
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	4413      	add	r3, r2
 8000dec:	3304      	adds	r3, #4
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	461a      	mov	r2, r3
 8000df2:	4613      	mov	r3, r2
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	4413      	add	r3, r2
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	4a74      	ldr	r2, [pc, #464]	; (8000fcc <SERVOS_Update+0x220>)
 8000dfc:	4413      	add	r3, r2
 8000dfe:	607b      	str	r3, [r7, #4]
			iTimeUs = p * SERVOS_TIME_OFFSET_PARALLEL + iParallelPulsesTime;
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	4613      	mov	r3, r2
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	4413      	add	r3, r2
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	4413      	add	r3, r2
 8000e10:	613b      	str	r3, [r7, #16]
			servos_asActions[iActionCnt].pServosBSSR = &psServo->pGpioPort->BSRR;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f103 0118 	add.w	r1, r3, #24
 8000e1a:	486d      	ldr	r0, [pc, #436]	; (8000fd0 <SERVOS_Update+0x224>)
 8000e1c:	6a3a      	ldr	r2, [r7, #32]
 8000e1e:	4613      	mov	r3, r2
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	4413      	add	r3, r2
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	4403      	add	r3, r0
 8000e28:	3304      	adds	r3, #4
 8000e2a:	6019      	str	r1, [r3, #0]
			if (psServo->attached)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	785b      	ldrb	r3, [r3, #1]
 8000e30:	f003 0304 	and.w	r3, r3, #4
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d00c      	beq.n	8000e54 <SERVOS_Update+0xa8>
			{
				servos_asActions[iActionCnt].u32ServosBSSRVal = psServo->u16GpioPin;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	885b      	ldrh	r3, [r3, #2]
 8000e3e:	4618      	mov	r0, r3
 8000e40:	4963      	ldr	r1, [pc, #396]	; (8000fd0 <SERVOS_Update+0x224>)
 8000e42:	6a3a      	ldr	r2, [r7, #32]
 8000e44:	4613      	mov	r3, r2
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	4413      	add	r3, r2
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	440b      	add	r3, r1
 8000e4e:	3308      	adds	r3, #8
 8000e50:	6018      	str	r0, [r3, #0]
 8000e52:	e009      	b.n	8000e68 <SERVOS_Update+0xbc>
			}
			else
			{
				servos_asActions[iActionCnt].u32ServosBSSRVal = 0;
 8000e54:	495e      	ldr	r1, [pc, #376]	; (8000fd0 <SERVOS_Update+0x224>)
 8000e56:	6a3a      	ldr	r2, [r7, #32]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	4413      	add	r3, r2
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	440b      	add	r3, r1
 8000e62:	3308      	adds	r3, #8
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
			}
			servos_asActions[iActionCnt-1].u16ARR = iTimeUs - iTimeUsLast - 1;
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	b29a      	uxth	r2, r3
 8000e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	6a3a      	ldr	r2, [r7, #32]
 8000e76:	3a01      	subs	r2, #1
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	b298      	uxth	r0, r3
 8000e7c:	4954      	ldr	r1, [pc, #336]	; (8000fd0 <SERVOS_Update+0x224>)
 8000e7e:	4613      	mov	r3, r2
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	4413      	add	r3, r2
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	440b      	add	r3, r1
 8000e88:	4602      	mov	r2, r0
 8000e8a:	801a      	strh	r2, [r3, #0]
			iTimeUsLast = iTimeUs;
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	627b      	str	r3, [r7, #36]	; 0x24
			iActionCnt++;
 8000e90:	6a3b      	ldr	r3, [r7, #32]
 8000e92:	3301      	adds	r3, #1
 8000e94:	623b      	str	r3, [r7, #32]
		for (int p=0; p<psServosParallel->cnt; p++)
 8000e96:	69bb      	ldr	r3, [r7, #24]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	61bb      	str	r3, [r7, #24]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	429a      	cmp	r2, r3
 8000ea4:	d89f      	bhi.n	8000de6 <SERVOS_Update+0x3a>
		}
		// Set the action for all negative edged of the servo pulses that
		// are controlled in parallel
		for (int p=0; p<psServosParallel->cnt; p++)
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	617b      	str	r3, [r7, #20]
 8000eaa:	e04f      	b.n	8000f4c <SERVOS_Update+0x1a0>
		{
			psServo = &servos_asAll[psServosParallel->servos[p]];
 8000eac:	68fa      	ldr	r2, [r7, #12]
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	3304      	adds	r3, #4
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	4613      	mov	r3, r2
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	4413      	add	r3, r2
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	4a42      	ldr	r2, [pc, #264]	; (8000fcc <SERVOS_Update+0x220>)
 8000ec2:	4413      	add	r3, r2
 8000ec4:	607b      	str	r3, [r7, #4]
			iTimeUs = psServo->value + SERVOS_TIME_PULSE_BASE
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	881b      	ldrh	r3, [r3, #0]
 8000eca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	f503 717a 	add.w	r1, r3, #1000	; 0x3e8
					+  p * SERVOS_TIME_OFFSET_PARALLEL + iParallelPulsesTime;
 8000ed4:	697a      	ldr	r2, [r7, #20]
 8000ed6:	4613      	mov	r3, r2
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	4413      	add	r3, r2
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	440b      	add	r3, r1
			iTimeUs = psServo->value + SERVOS_TIME_PULSE_BASE
 8000ee0:	68ba      	ldr	r2, [r7, #8]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
			servos_asActions[iActionCnt].pServosBSSR = &psServo->pGpioPort->BSRR;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f103 0118 	add.w	r1, r3, #24
 8000eee:	4838      	ldr	r0, [pc, #224]	; (8000fd0 <SERVOS_Update+0x224>)
 8000ef0:	6a3a      	ldr	r2, [r7, #32]
 8000ef2:	4613      	mov	r3, r2
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	4413      	add	r3, r2
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	4403      	add	r3, r0
 8000efc:	3304      	adds	r3, #4
 8000efe:	6019      	str	r1, [r3, #0]
			servos_asActions[iActionCnt].u32ServosBSSRVal = (uint32_t)psServo->u16GpioPin << 16;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	885b      	ldrh	r3, [r3, #2]
 8000f04:	0419      	lsls	r1, r3, #16
 8000f06:	4832      	ldr	r0, [pc, #200]	; (8000fd0 <SERVOS_Update+0x224>)
 8000f08:	6a3a      	ldr	r2, [r7, #32]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	4413      	add	r3, r2
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	4403      	add	r3, r0
 8000f14:	3308      	adds	r3, #8
 8000f16:	6019      	str	r1, [r3, #0]
			servos_asActions[iActionCnt-1].u16ARR = iTimeUs - iTimeUsLast - 1;
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	b29a      	uxth	r2, r3
 8000f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1e:	b29b      	uxth	r3, r3
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	6a3a      	ldr	r2, [r7, #32]
 8000f26:	3a01      	subs	r2, #1
 8000f28:	3b01      	subs	r3, #1
 8000f2a:	b298      	uxth	r0, r3
 8000f2c:	4928      	ldr	r1, [pc, #160]	; (8000fd0 <SERVOS_Update+0x224>)
 8000f2e:	4613      	mov	r3, r2
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	4413      	add	r3, r2
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	440b      	add	r3, r1
 8000f38:	4602      	mov	r2, r0
 8000f3a:	801a      	strh	r2, [r3, #0]
			iTimeUsLast = iTimeUs;
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	627b      	str	r3, [r7, #36]	; 0x24
			iActionCnt++;
 8000f40:	6a3b      	ldr	r3, [r7, #32]
 8000f42:	3301      	adds	r3, #1
 8000f44:	623b      	str	r3, [r7, #32]
		for (int p=0; p<psServosParallel->cnt; p++)
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	617b      	str	r3, [r7, #20]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	429a      	cmp	r2, r3
 8000f54:	d8aa      	bhi.n	8000eac <SERVOS_Update+0x100>
	for (int s=0; s<SERVOS_SERIAL; s++)
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	61fb      	str	r3, [r7, #28]
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	2b07      	cmp	r3, #7
 8000f60:	f77f af30 	ble.w	8000dc4 <SERVOS_Update+0x18>
		}
	}

	// Set the last action to a dummy but with time to get a 20ms period
	iTimeUs = SERVOS_TIME_PERIODE;
 8000f64:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000f68:	613b      	str	r3, [r7, #16]
	servos_asActions[iActionCnt].pServosBSSR = &servos_u32DummyBSSR;
 8000f6a:	4919      	ldr	r1, [pc, #100]	; (8000fd0 <SERVOS_Update+0x224>)
 8000f6c:	6a3a      	ldr	r2, [r7, #32]
 8000f6e:	4613      	mov	r3, r2
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	4413      	add	r3, r2
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	440b      	add	r3, r1
 8000f78:	3304      	adds	r3, #4
 8000f7a:	4a16      	ldr	r2, [pc, #88]	; (8000fd4 <SERVOS_Update+0x228>)
 8000f7c:	601a      	str	r2, [r3, #0]
	servos_asActions[iActionCnt].u32ServosBSSRVal = 0;
 8000f7e:	4914      	ldr	r1, [pc, #80]	; (8000fd0 <SERVOS_Update+0x224>)
 8000f80:	6a3a      	ldr	r2, [r7, #32]
 8000f82:	4613      	mov	r3, r2
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	4413      	add	r3, r2
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	440b      	add	r3, r1
 8000f8c:	3308      	adds	r3, #8
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
	servos_asActions[iActionCnt-1].u16ARR = iTimeUs - iTimeUsLast - 1;
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	b29a      	uxth	r2, r3
 8000f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	6a3a      	ldr	r2, [r7, #32]
 8000fa0:	3a01      	subs	r2, #1
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	b298      	uxth	r0, r3
 8000fa6:	490a      	ldr	r1, [pc, #40]	; (8000fd0 <SERVOS_Update+0x224>)
 8000fa8:	4613      	mov	r3, r2
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	4413      	add	r3, r2
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	440b      	add	r3, r1
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	801a      	strh	r2, [r3, #0]
	servos_iActionLen = iActionCnt;
 8000fb6:	4a08      	ldr	r2, [pc, #32]	; (8000fd8 <SERVOS_Update+0x22c>)
 8000fb8:	6a3b      	ldr	r3, [r7, #32]
 8000fba:	6013      	str	r3, [r2, #0]
}
 8000fbc:	bf00      	nop
 8000fbe:	372c      	adds	r7, #44	; 0x2c
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	200010b0 	.word	0x200010b0
 8000fcc:	2000119c 	.word	0x2000119c
 8000fd0:	200000d8 	.word	0x200000d8
 8000fd4:	20001190 	.word	0x20001190
 8000fd8:	20001198 	.word	0x20001198

08000fdc <SERVOS_Task1ms>:
 *
 * It starts the creation of the action tabled triggered from the ISR
 *
 */
void SERVOS_Task1ms()
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
	if (servos_bRequestUpdate)
 8000fe0:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <SERVOS_Task1ms+0x1c>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d004      	beq.n	8000ff2 <SERVOS_Task1ms+0x16>
	{
		SERVOS_Update();
 8000fe8:	f7ff fee0 	bl	8000dac <SERVOS_Update>
		servos_bRequestUpdate = 0;
 8000fec:	4b02      	ldr	r3, [pc, #8]	; (8000ff8 <SERVOS_Task1ms+0x1c>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
	}
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	2000197c 	.word	0x2000197c

08000ffc <SERVOS_ISR>:
 *
 * Generates a pulse on one of the 168 GPIOs
 *
 */
__INLINE void SERVOS_ISR(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
	// set port value as fast as possible
	*servos_pBSSR = servos_u32BSSRVal;
 8001000:	4b1c      	ldr	r3, [pc, #112]	; (8001074 <SERVOS_ISR+0x78>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a1c      	ldr	r2, [pc, #112]	; (8001078 <SERVOS_ISR+0x7c>)
 8001006:	6812      	ldr	r2, [r2, #0]
 8001008:	601a      	str	r2, [r3, #0]
	// set timer for next edge
	htim6.Instance->ARR = servos_u16ARR;
 800100a:	4b1c      	ldr	r3, [pc, #112]	; (800107c <SERVOS_ISR+0x80>)
 800100c:	881a      	ldrh	r2, [r3, #0]
 800100e:	4b1c      	ldr	r3, [pc, #112]	; (8001080 <SERVOS_ISR+0x84>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	62da      	str	r2, [r3, #44]	; 0x2c

	// Get the next action for the next IRQ
	servos_iActionCnt++;
 8001014:	4b1b      	ldr	r3, [pc, #108]	; (8001084 <SERVOS_ISR+0x88>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	3301      	adds	r3, #1
 800101a:	4a1a      	ldr	r2, [pc, #104]	; (8001084 <SERVOS_ISR+0x88>)
 800101c:	6013      	str	r3, [r2, #0]
	if (servos_iActionCnt >= servos_iActionLen)
 800101e:	4b19      	ldr	r3, [pc, #100]	; (8001084 <SERVOS_ISR+0x88>)
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	4b19      	ldr	r3, [pc, #100]	; (8001088 <SERVOS_ISR+0x8c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	429a      	cmp	r2, r3
 8001028:	db05      	blt.n	8001036 <SERVOS_ISR+0x3a>
	{
		servos_iActionCnt = 1;
 800102a:	4b16      	ldr	r3, [pc, #88]	; (8001084 <SERVOS_ISR+0x88>)
 800102c:	2201      	movs	r2, #1
 800102e:	601a      	str	r2, [r3, #0]
		servos_bRequestUpdate = 1;
 8001030:	4b16      	ldr	r3, [pc, #88]	; (800108c <SERVOS_ISR+0x90>)
 8001032:	2201      	movs	r2, #1
 8001034:	601a      	str	r2, [r3, #0]
	}
	servos_pAction = &servos_asActions[servos_iActionCnt];
 8001036:	4b13      	ldr	r3, [pc, #76]	; (8001084 <SERVOS_ISR+0x88>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	4613      	mov	r3, r2
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	4413      	add	r3, r2
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	4a13      	ldr	r2, [pc, #76]	; (8001090 <SERVOS_ISR+0x94>)
 8001044:	4413      	add	r3, r2
 8001046:	4a13      	ldr	r2, [pc, #76]	; (8001094 <SERVOS_ISR+0x98>)
 8001048:	6013      	str	r3, [r2, #0]
	servos_u16ARR = servos_pAction->u16ARR;
 800104a:	4b12      	ldr	r3, [pc, #72]	; (8001094 <SERVOS_ISR+0x98>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	881a      	ldrh	r2, [r3, #0]
 8001050:	4b0a      	ldr	r3, [pc, #40]	; (800107c <SERVOS_ISR+0x80>)
 8001052:	801a      	strh	r2, [r3, #0]
	servos_pBSSR = servos_pAction->pServosBSSR;
 8001054:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <SERVOS_ISR+0x98>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	4a06      	ldr	r2, [pc, #24]	; (8001074 <SERVOS_ISR+0x78>)
 800105c:	6013      	str	r3, [r2, #0]
	servos_u32BSSRVal= servos_pAction->u32ServosBSSRVal;
 800105e:	4b0d      	ldr	r3, [pc, #52]	; (8001094 <SERVOS_ISR+0x98>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	4a04      	ldr	r2, [pc, #16]	; (8001078 <SERVOS_ISR+0x7c>)
 8001066:	6013      	str	r3, [r2, #0]
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	20001980 	.word	0x20001980
 8001078:	2000198c 	.word	0x2000198c
 800107c:	20001984 	.word	0x20001984
 8001080:	20001990 	.word	0x20001990
 8001084:	20001194 	.word	0x20001194
 8001088:	20001198 	.word	0x20001198
 800108c:	2000197c 	.word	0x2000197c
 8001090:	200000d8 	.word	0x200000d8
 8001094:	2000002c 	.word	0x2000002c

08001098 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800109e:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <HAL_MspInit+0x44>)
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	4a0e      	ldr	r2, [pc, #56]	; (80010dc <HAL_MspInit+0x44>)
 80010a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a8:	6413      	str	r3, [r2, #64]	; 0x40
 80010aa:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <HAL_MspInit+0x44>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b6:	4b09      	ldr	r3, [pc, #36]	; (80010dc <HAL_MspInit+0x44>)
 80010b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ba:	4a08      	ldr	r2, [pc, #32]	; (80010dc <HAL_MspInit+0x44>)
 80010bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c0:	6453      	str	r3, [r2, #68]	; 0x44
 80010c2:	4b06      	ldr	r3, [pc, #24]	; (80010dc <HAL_MspInit+0x44>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ca:	603b      	str	r3, [r7, #0]
 80010cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	40023800 	.word	0x40023800

080010e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010e4:	e7fe      	b.n	80010e4 <NMI_Handler+0x4>

080010e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ea:	e7fe      	b.n	80010ea <HardFault_Handler+0x4>

080010ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f0:	e7fe      	b.n	80010f0 <MemManage_Handler+0x4>

080010f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010f2:	b480      	push	{r7}
 80010f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010f6:	e7fe      	b.n	80010f6 <BusFault_Handler+0x4>

080010f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010fc:	e7fe      	b.n	80010fc <UsageFault_Handler+0x4>

080010fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  bTick1ms = 1;
 800112c:	4b03      	ldr	r3, [pc, #12]	; (800113c <SysTick_Handler+0x14>)
 800112e:	2201      	movs	r2, #1
 8001130:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001132:	f000 f9e7 	bl	8001504 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000028 	.word	0x20000028

08001140 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
  SERVOS_ISR();
 8001144:	f7ff ff5a 	bl	8000ffc <SERVOS_ISR>
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001148:	4802      	ldr	r0, [pc, #8]	; (8001154 <TIM6_DAC_IRQHandler+0x14>)
 800114a:	f001 ff7b 	bl	8003044 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20001990 	.word	0x20001990

08001158 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800115c:	4b08      	ldr	r3, [pc, #32]	; (8001180 <SystemInit+0x28>)
 800115e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001162:	4a07      	ldr	r2, [pc, #28]	; (8001180 <SystemInit+0x28>)
 8001164:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001168:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800116c:	4b04      	ldr	r3, [pc, #16]	; (8001180 <SystemInit+0x28>)
 800116e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001172:	609a      	str	r2, [r3, #8]
#endif
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800118a:	1d3b      	adds	r3, r7, #4
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8001194:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <MX_TIM6_Init+0x64>)
 8001196:	4a15      	ldr	r2, [pc, #84]	; (80011ec <MX_TIM6_Init+0x68>)
 8001198:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 107;
 800119a:	4b13      	ldr	r3, [pc, #76]	; (80011e8 <MX_TIM6_Init+0x64>)
 800119c:	226b      	movs	r2, #107	; 0x6b
 800119e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a0:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <MX_TIM6_Init+0x64>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80011a6:	4b10      	ldr	r3, [pc, #64]	; (80011e8 <MX_TIM6_Init+0x64>)
 80011a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011ac:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ae:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <MX_TIM6_Init+0x64>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80011b4:	480c      	ldr	r0, [pc, #48]	; (80011e8 <MX_TIM6_Init+0x64>)
 80011b6:	f001 feef 	bl	8002f98 <HAL_TIM_Base_Init>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80011c0:	f7ff fc16 	bl	80009f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c4:	2300      	movs	r3, #0
 80011c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c8:	2300      	movs	r3, #0
 80011ca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	4619      	mov	r1, r3
 80011d0:	4805      	ldr	r0, [pc, #20]	; (80011e8 <MX_TIM6_Init+0x64>)
 80011d2:	f002 f929 	bl	8003428 <HAL_TIMEx_MasterConfigSynchronization>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80011dc:	f7ff fc08 	bl	80009f0 <Error_Handler>
  }

}
 80011e0:	bf00      	nop
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20001990 	.word	0x20001990
 80011ec:	40001000 	.word	0x40001000

080011f0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a0d      	ldr	r2, [pc, #52]	; (8001234 <HAL_TIM_Base_MspInit+0x44>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d113      	bne.n	800122a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001202:	4b0d      	ldr	r3, [pc, #52]	; (8001238 <HAL_TIM_Base_MspInit+0x48>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	4a0c      	ldr	r2, [pc, #48]	; (8001238 <HAL_TIM_Base_MspInit+0x48>)
 8001208:	f043 0310 	orr.w	r3, r3, #16
 800120c:	6413      	str	r3, [r2, #64]	; 0x40
 800120e:	4b0a      	ldr	r3, [pc, #40]	; (8001238 <HAL_TIM_Base_MspInit+0x48>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	f003 0310 	and.w	r3, r3, #16
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800121a:	2200      	movs	r2, #0
 800121c:	2100      	movs	r1, #0
 800121e:	2036      	movs	r0, #54	; 0x36
 8001220:	f000 fa8d 	bl	800173e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001224:	2036      	movs	r0, #54	; 0x36
 8001226:	f000 faa6 	bl	8001776 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800122a:	bf00      	nop
 800122c:	3710      	adds	r7, #16
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40001000 	.word	0x40001000
 8001238:	40023800 	.word	0x40023800

0800123c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001240:	4b14      	ldr	r3, [pc, #80]	; (8001294 <MX_USART3_UART_Init+0x58>)
 8001242:	4a15      	ldr	r2, [pc, #84]	; (8001298 <MX_USART3_UART_Init+0x5c>)
 8001244:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001246:	4b13      	ldr	r3, [pc, #76]	; (8001294 <MX_USART3_UART_Init+0x58>)
 8001248:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800124c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800124e:	4b11      	ldr	r3, [pc, #68]	; (8001294 <MX_USART3_UART_Init+0x58>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001254:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <MX_USART3_UART_Init+0x58>)
 8001256:	2200      	movs	r2, #0
 8001258:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800125a:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <MX_USART3_UART_Init+0x58>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001260:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <MX_USART3_UART_Init+0x58>)
 8001262:	220c      	movs	r2, #12
 8001264:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001266:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <MX_USART3_UART_Init+0x58>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800126c:	4b09      	ldr	r3, [pc, #36]	; (8001294 <MX_USART3_UART_Init+0x58>)
 800126e:	2200      	movs	r2, #0
 8001270:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001272:	4b08      	ldr	r3, [pc, #32]	; (8001294 <MX_USART3_UART_Init+0x58>)
 8001274:	2200      	movs	r2, #0
 8001276:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001278:	4b06      	ldr	r3, [pc, #24]	; (8001294 <MX_USART3_UART_Init+0x58>)
 800127a:	2200      	movs	r2, #0
 800127c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800127e:	4805      	ldr	r0, [pc, #20]	; (8001294 <MX_USART3_UART_Init+0x58>)
 8001280:	f002 f97e 	bl	8003580 <HAL_UART_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800128a:	f7ff fbb1 	bl	80009f0 <Error_Handler>
  }

}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	200019d0 	.word	0x200019d0
 8001298:	40004800 	.word	0x40004800

0800129c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08a      	sub	sp, #40	; 0x28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a17      	ldr	r2, [pc, #92]	; (8001318 <HAL_UART_MspInit+0x7c>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d128      	bne.n	8001310 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012be:	4b17      	ldr	r3, [pc, #92]	; (800131c <HAL_UART_MspInit+0x80>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	4a16      	ldr	r2, [pc, #88]	; (800131c <HAL_UART_MspInit+0x80>)
 80012c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012c8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ca:	4b14      	ldr	r3, [pc, #80]	; (800131c <HAL_UART_MspInit+0x80>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012d2:	613b      	str	r3, [r7, #16]
 80012d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012d6:	4b11      	ldr	r3, [pc, #68]	; (800131c <HAL_UART_MspInit+0x80>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a10      	ldr	r2, [pc, #64]	; (800131c <HAL_UART_MspInit+0x80>)
 80012dc:	f043 0308 	orr.w	r3, r3, #8
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b0e      	ldr	r3, [pc, #56]	; (800131c <HAL_UART_MspInit+0x80>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f003 0308 	and.w	r3, r3, #8
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80012ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f4:	2302      	movs	r3, #2
 80012f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fc:	2303      	movs	r3, #3
 80012fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001300:	2307      	movs	r3, #7
 8001302:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	4619      	mov	r1, r3
 800130a:	4805      	ldr	r0, [pc, #20]	; (8001320 <HAL_UART_MspInit+0x84>)
 800130c:	f000 fa4e 	bl	80017ac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001310:	bf00      	nop
 8001312:	3728      	adds	r7, #40	; 0x28
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40004800 	.word	0x40004800
 800131c:	40023800 	.word	0x40023800
 8001320:	40020c00 	.word	0x40020c00

08001324 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001328:	4b14      	ldr	r3, [pc, #80]	; (800137c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800132a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800132e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001330:	4b12      	ldr	r3, [pc, #72]	; (800137c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001332:	2206      	movs	r2, #6
 8001334:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001336:	4b11      	ldr	r3, [pc, #68]	; (800137c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001338:	2202      	movs	r2, #2
 800133a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800133c:	4b0f      	ldr	r3, [pc, #60]	; (800137c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800133e:	2200      	movs	r2, #0
 8001340:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001344:	2202      	movs	r2, #2
 8001346:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001348:	4b0c      	ldr	r3, [pc, #48]	; (800137c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800134a:	2201      	movs	r2, #1
 800134c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800134e:	4b0b      	ldr	r3, [pc, #44]	; (800137c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001350:	2200      	movs	r2, #0
 8001352:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001354:	4b09      	ldr	r3, [pc, #36]	; (800137c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001356:	2200      	movs	r2, #0
 8001358:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800135a:	4b08      	ldr	r3, [pc, #32]	; (800137c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800135c:	2201      	movs	r2, #1
 800135e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001360:	4b06      	ldr	r3, [pc, #24]	; (800137c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001362:	2200      	movs	r2, #0
 8001364:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001366:	4805      	ldr	r0, [pc, #20]	; (800137c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001368:	f000 fbe3 	bl	8001b32 <HAL_PCD_Init>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001372:	f7ff fb3d 	bl	80009f0 <Error_Handler>
  }

}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20001a50 	.word	0x20001a50

08001380 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08a      	sub	sp, #40	; 0x28
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013a0:	d141      	bne.n	8001426 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a2:	4b23      	ldr	r3, [pc, #140]	; (8001430 <HAL_PCD_MspInit+0xb0>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a22      	ldr	r2, [pc, #136]	; (8001430 <HAL_PCD_MspInit+0xb0>)
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
 80013ae:	4b20      	ldr	r3, [pc, #128]	; (8001430 <HAL_PCD_MspInit+0xb0>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	613b      	str	r3, [r7, #16]
 80013b8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80013ba:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80013be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c0:	2302      	movs	r3, #2
 80013c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c8:	2303      	movs	r3, #3
 80013ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80013cc:	230a      	movs	r3, #10
 80013ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	4619      	mov	r1, r3
 80013d6:	4817      	ldr	r0, [pc, #92]	; (8001434 <HAL_PCD_MspInit+0xb4>)
 80013d8:	f000 f9e8 	bl	80017ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80013dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80013ea:	f107 0314 	add.w	r3, r7, #20
 80013ee:	4619      	mov	r1, r3
 80013f0:	4810      	ldr	r0, [pc, #64]	; (8001434 <HAL_PCD_MspInit+0xb4>)
 80013f2:	f000 f9db 	bl	80017ac <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80013f6:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <HAL_PCD_MspInit+0xb0>)
 80013f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013fa:	4a0d      	ldr	r2, [pc, #52]	; (8001430 <HAL_PCD_MspInit+0xb0>)
 80013fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001400:	6353      	str	r3, [r2, #52]	; 0x34
 8001402:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <HAL_PCD_MspInit+0xb0>)
 8001404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	4b08      	ldr	r3, [pc, #32]	; (8001430 <HAL_PCD_MspInit+0xb0>)
 8001410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001412:	4a07      	ldr	r2, [pc, #28]	; (8001430 <HAL_PCD_MspInit+0xb0>)
 8001414:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001418:	6453      	str	r3, [r2, #68]	; 0x44
 800141a:	4b05      	ldr	r3, [pc, #20]	; (8001430 <HAL_PCD_MspInit+0xb0>)
 800141c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001426:	bf00      	nop
 8001428:	3728      	adds	r7, #40	; 0x28
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40023800 	.word	0x40023800
 8001434:	40020000 	.word	0x40020000

08001438 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001438:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001470 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800143c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800143e:	e003      	b.n	8001448 <LoopCopyDataInit>

08001440 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001440:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001442:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001444:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001446:	3104      	adds	r1, #4

08001448 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001448:	480b      	ldr	r0, [pc, #44]	; (8001478 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800144a:	4b0c      	ldr	r3, [pc, #48]	; (800147c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800144c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800144e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001450:	d3f6      	bcc.n	8001440 <CopyDataInit>
  ldr  r2, =_sbss
 8001452:	4a0b      	ldr	r2, [pc, #44]	; (8001480 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001454:	e002      	b.n	800145c <LoopFillZerobss>

08001456 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001456:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001458:	f842 3b04 	str.w	r3, [r2], #4

0800145c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800145c:	4b09      	ldr	r3, [pc, #36]	; (8001484 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800145e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001460:	d3f9      	bcc.n	8001456 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001462:	f7ff fe79 	bl	8001158 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001466:	f002 ff7f 	bl	8004368 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800146a:	f7ff f95d 	bl	8000728 <main>
  bx  lr    
 800146e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001470:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001474:	08004400 	.word	0x08004400
  ldr  r0, =_sdata
 8001478:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800147c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001480:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001484:	20001e58 	.word	0x20001e58

08001488 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001488:	e7fe      	b.n	8001488 <ADC_IRQHandler>

0800148a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800148e:	2003      	movs	r0, #3
 8001490:	f000 f94a 	bl	8001728 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001494:	2000      	movs	r0, #0
 8001496:	f000 f805 	bl	80014a4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800149a:	f7ff fdfd 	bl	8001098 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800149e:	2300      	movs	r3, #0
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014ac:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <HAL_InitTick+0x54>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HAL_InitTick+0x58>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	4619      	mov	r1, r3
 80014b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80014be:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c2:	4618      	mov	r0, r3
 80014c4:	f000 f965 	bl	8001792 <HAL_SYSTICK_Config>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e00e      	b.n	80014f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2b0f      	cmp	r3, #15
 80014d6:	d80a      	bhi.n	80014ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014d8:	2200      	movs	r2, #0
 80014da:	6879      	ldr	r1, [r7, #4]
 80014dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014e0:	f000 f92d 	bl	800173e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014e4:	4a06      	ldr	r2, [pc, #24]	; (8001500 <HAL_InitTick+0x5c>)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ea:	2300      	movs	r3, #0
 80014ec:	e000      	b.n	80014f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20000000 	.word	0x20000000
 80014fc:	20000008 	.word	0x20000008
 8001500:	20000004 	.word	0x20000004

08001504 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <HAL_IncTick+0x20>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	461a      	mov	r2, r3
 800150e:	4b06      	ldr	r3, [pc, #24]	; (8001528 <HAL_IncTick+0x24>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4413      	add	r3, r2
 8001514:	4a04      	ldr	r2, [pc, #16]	; (8001528 <HAL_IncTick+0x24>)
 8001516:	6013      	str	r3, [r2, #0]
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	20000008 	.word	0x20000008
 8001528:	20001e54 	.word	0x20001e54

0800152c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return uwTick;
 8001530:	4b03      	ldr	r3, [pc, #12]	; (8001540 <HAL_GetTick+0x14>)
 8001532:	681b      	ldr	r3, [r3, #0]
}
 8001534:	4618      	mov	r0, r3
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	20001e54 	.word	0x20001e54

08001544 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800154c:	f7ff ffee 	bl	800152c <HAL_GetTick>
 8001550:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800155c:	d005      	beq.n	800156a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800155e:	4b09      	ldr	r3, [pc, #36]	; (8001584 <HAL_Delay+0x40>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	461a      	mov	r2, r3
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	4413      	add	r3, r2
 8001568:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800156a:	bf00      	nop
 800156c:	f7ff ffde 	bl	800152c <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	68fa      	ldr	r2, [r7, #12]
 8001578:	429a      	cmp	r2, r3
 800157a:	d8f7      	bhi.n	800156c <HAL_Delay+0x28>
  {
  }
}
 800157c:	bf00      	nop
 800157e:	3710      	adds	r7, #16
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20000008 	.word	0x20000008

08001588 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001598:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <__NVIC_SetPriorityGrouping+0x40>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800159e:	68ba      	ldr	r2, [r7, #8]
 80015a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015a4:	4013      	ands	r3, r2
 80015a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <__NVIC_SetPriorityGrouping+0x44>)
 80015b2:	4313      	orrs	r3, r2
 80015b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015b6:	4a04      	ldr	r2, [pc, #16]	; (80015c8 <__NVIC_SetPriorityGrouping+0x40>)
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	60d3      	str	r3, [r2, #12]
}
 80015bc:	bf00      	nop
 80015be:	3714      	adds	r7, #20
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	e000ed00 	.word	0xe000ed00
 80015cc:	05fa0000 	.word	0x05fa0000

080015d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d4:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <__NVIC_GetPriorityGrouping+0x18>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	0a1b      	lsrs	r3, r3, #8
 80015da:	f003 0307 	and.w	r3, r3, #7
}
 80015de:	4618      	mov	r0, r3
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	db0b      	blt.n	8001616 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	f003 021f 	and.w	r2, r3, #31
 8001604:	4907      	ldr	r1, [pc, #28]	; (8001624 <__NVIC_EnableIRQ+0x38>)
 8001606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160a:	095b      	lsrs	r3, r3, #5
 800160c:	2001      	movs	r0, #1
 800160e:	fa00 f202 	lsl.w	r2, r0, r2
 8001612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	e000e100 	.word	0xe000e100

08001628 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	6039      	str	r1, [r7, #0]
 8001632:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001638:	2b00      	cmp	r3, #0
 800163a:	db0a      	blt.n	8001652 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	b2da      	uxtb	r2, r3
 8001640:	490c      	ldr	r1, [pc, #48]	; (8001674 <__NVIC_SetPriority+0x4c>)
 8001642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001646:	0112      	lsls	r2, r2, #4
 8001648:	b2d2      	uxtb	r2, r2
 800164a:	440b      	add	r3, r1
 800164c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001650:	e00a      	b.n	8001668 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	b2da      	uxtb	r2, r3
 8001656:	4908      	ldr	r1, [pc, #32]	; (8001678 <__NVIC_SetPriority+0x50>)
 8001658:	79fb      	ldrb	r3, [r7, #7]
 800165a:	f003 030f 	and.w	r3, r3, #15
 800165e:	3b04      	subs	r3, #4
 8001660:	0112      	lsls	r2, r2, #4
 8001662:	b2d2      	uxtb	r2, r2
 8001664:	440b      	add	r3, r1
 8001666:	761a      	strb	r2, [r3, #24]
}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	e000e100 	.word	0xe000e100
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800167c:	b480      	push	{r7}
 800167e:	b089      	sub	sp, #36	; 0x24
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	f1c3 0307 	rsb	r3, r3, #7
 8001696:	2b04      	cmp	r3, #4
 8001698:	bf28      	it	cs
 800169a:	2304      	movcs	r3, #4
 800169c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	3304      	adds	r3, #4
 80016a2:	2b06      	cmp	r3, #6
 80016a4:	d902      	bls.n	80016ac <NVIC_EncodePriority+0x30>
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	3b03      	subs	r3, #3
 80016aa:	e000      	b.n	80016ae <NVIC_EncodePriority+0x32>
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43da      	mvns	r2, r3
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	401a      	ands	r2, r3
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	fa01 f303 	lsl.w	r3, r1, r3
 80016ce:	43d9      	mvns	r1, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d4:	4313      	orrs	r3, r2
         );
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3724      	adds	r7, #36	; 0x24
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
	...

080016e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3b01      	subs	r3, #1
 80016f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016f4:	d301      	bcc.n	80016fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016f6:	2301      	movs	r3, #1
 80016f8:	e00f      	b.n	800171a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016fa:	4a0a      	ldr	r2, [pc, #40]	; (8001724 <SysTick_Config+0x40>)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3b01      	subs	r3, #1
 8001700:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001702:	210f      	movs	r1, #15
 8001704:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001708:	f7ff ff8e 	bl	8001628 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800170c:	4b05      	ldr	r3, [pc, #20]	; (8001724 <SysTick_Config+0x40>)
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001712:	4b04      	ldr	r3, [pc, #16]	; (8001724 <SysTick_Config+0x40>)
 8001714:	2207      	movs	r2, #7
 8001716:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	e000e010 	.word	0xe000e010

08001728 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f7ff ff29 	bl	8001588 <__NVIC_SetPriorityGrouping>
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800173e:	b580      	push	{r7, lr}
 8001740:	b086      	sub	sp, #24
 8001742:	af00      	add	r7, sp, #0
 8001744:	4603      	mov	r3, r0
 8001746:	60b9      	str	r1, [r7, #8]
 8001748:	607a      	str	r2, [r7, #4]
 800174a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001750:	f7ff ff3e 	bl	80015d0 <__NVIC_GetPriorityGrouping>
 8001754:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	68b9      	ldr	r1, [r7, #8]
 800175a:	6978      	ldr	r0, [r7, #20]
 800175c:	f7ff ff8e 	bl	800167c <NVIC_EncodePriority>
 8001760:	4602      	mov	r2, r0
 8001762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001766:	4611      	mov	r1, r2
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff ff5d 	bl	8001628 <__NVIC_SetPriority>
}
 800176e:	bf00      	nop
 8001770:	3718      	adds	r7, #24
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b082      	sub	sp, #8
 800177a:	af00      	add	r7, sp, #0
 800177c:	4603      	mov	r3, r0
 800177e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff ff31 	bl	80015ec <__NVIC_EnableIRQ>
}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b082      	sub	sp, #8
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f7ff ffa2 	bl	80016e4 <SysTick_Config>
 80017a0:	4603      	mov	r3, r0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
	...

080017ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b089      	sub	sp, #36	; 0x24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80017b6:	2300      	movs	r3, #0
 80017b8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80017be:	2300      	movs	r3, #0
 80017c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80017c6:	2300      	movs	r3, #0
 80017c8:	61fb      	str	r3, [r7, #28]
 80017ca:	e175      	b.n	8001ab8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80017cc:	2201      	movs	r2, #1
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	697a      	ldr	r2, [r7, #20]
 80017dc:	4013      	ands	r3, r2
 80017de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	f040 8164 	bne.w	8001ab2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d00b      	beq.n	800180a <HAL_GPIO_Init+0x5e>
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d007      	beq.n	800180a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017fe:	2b11      	cmp	r3, #17
 8001800:	d003      	beq.n	800180a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	2b12      	cmp	r3, #18
 8001808:	d130      	bne.n	800186c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	2203      	movs	r2, #3
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	43db      	mvns	r3, r3
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	4013      	ands	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	68da      	ldr	r2, [r3, #12]
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4313      	orrs	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001840:	2201      	movs	r2, #1
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	43db      	mvns	r3, r3
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4013      	ands	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	091b      	lsrs	r3, r3, #4
 8001856:	f003 0201 	and.w	r2, r3, #1
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	4313      	orrs	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	2203      	movs	r2, #3
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	43db      	mvns	r3, r3
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4013      	ands	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	689a      	ldr	r2, [r3, #8]
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4313      	orrs	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d003      	beq.n	80018ac <HAL_GPIO_Init+0x100>
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	2b12      	cmp	r3, #18
 80018aa:	d123      	bne.n	80018f4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	08da      	lsrs	r2, r3, #3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3208      	adds	r2, #8
 80018b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	f003 0307 	and.w	r3, r3, #7
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	220f      	movs	r2, #15
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	43db      	mvns	r3, r3
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	4013      	ands	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	691a      	ldr	r2, [r3, #16]
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	08da      	lsrs	r2, r3, #3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	3208      	adds	r2, #8
 80018ee:	69b9      	ldr	r1, [r7, #24]
 80018f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	2203      	movs	r2, #3
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	43db      	mvns	r3, r3
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	4013      	ands	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f003 0203 	and.w	r2, r3, #3
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	4313      	orrs	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001930:	2b00      	cmp	r3, #0
 8001932:	f000 80be 	beq.w	8001ab2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001936:	4b65      	ldr	r3, [pc, #404]	; (8001acc <HAL_GPIO_Init+0x320>)
 8001938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193a:	4a64      	ldr	r2, [pc, #400]	; (8001acc <HAL_GPIO_Init+0x320>)
 800193c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001940:	6453      	str	r3, [r2, #68]	; 0x44
 8001942:	4b62      	ldr	r3, [pc, #392]	; (8001acc <HAL_GPIO_Init+0x320>)
 8001944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001946:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800194e:	4a60      	ldr	r2, [pc, #384]	; (8001ad0 <HAL_GPIO_Init+0x324>)
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	089b      	lsrs	r3, r3, #2
 8001954:	3302      	adds	r3, #2
 8001956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800195a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	f003 0303 	and.w	r3, r3, #3
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	220f      	movs	r2, #15
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	43db      	mvns	r3, r3
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	4013      	ands	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a57      	ldr	r2, [pc, #348]	; (8001ad4 <HAL_GPIO_Init+0x328>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d037      	beq.n	80019ea <HAL_GPIO_Init+0x23e>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a56      	ldr	r2, [pc, #344]	; (8001ad8 <HAL_GPIO_Init+0x32c>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d031      	beq.n	80019e6 <HAL_GPIO_Init+0x23a>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a55      	ldr	r2, [pc, #340]	; (8001adc <HAL_GPIO_Init+0x330>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d02b      	beq.n	80019e2 <HAL_GPIO_Init+0x236>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a54      	ldr	r2, [pc, #336]	; (8001ae0 <HAL_GPIO_Init+0x334>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d025      	beq.n	80019de <HAL_GPIO_Init+0x232>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a53      	ldr	r2, [pc, #332]	; (8001ae4 <HAL_GPIO_Init+0x338>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d01f      	beq.n	80019da <HAL_GPIO_Init+0x22e>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a52      	ldr	r2, [pc, #328]	; (8001ae8 <HAL_GPIO_Init+0x33c>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d019      	beq.n	80019d6 <HAL_GPIO_Init+0x22a>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a51      	ldr	r2, [pc, #324]	; (8001aec <HAL_GPIO_Init+0x340>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d013      	beq.n	80019d2 <HAL_GPIO_Init+0x226>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a50      	ldr	r2, [pc, #320]	; (8001af0 <HAL_GPIO_Init+0x344>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d00d      	beq.n	80019ce <HAL_GPIO_Init+0x222>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a4f      	ldr	r2, [pc, #316]	; (8001af4 <HAL_GPIO_Init+0x348>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d007      	beq.n	80019ca <HAL_GPIO_Init+0x21e>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a4e      	ldr	r2, [pc, #312]	; (8001af8 <HAL_GPIO_Init+0x34c>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d101      	bne.n	80019c6 <HAL_GPIO_Init+0x21a>
 80019c2:	2309      	movs	r3, #9
 80019c4:	e012      	b.n	80019ec <HAL_GPIO_Init+0x240>
 80019c6:	230a      	movs	r3, #10
 80019c8:	e010      	b.n	80019ec <HAL_GPIO_Init+0x240>
 80019ca:	2308      	movs	r3, #8
 80019cc:	e00e      	b.n	80019ec <HAL_GPIO_Init+0x240>
 80019ce:	2307      	movs	r3, #7
 80019d0:	e00c      	b.n	80019ec <HAL_GPIO_Init+0x240>
 80019d2:	2306      	movs	r3, #6
 80019d4:	e00a      	b.n	80019ec <HAL_GPIO_Init+0x240>
 80019d6:	2305      	movs	r3, #5
 80019d8:	e008      	b.n	80019ec <HAL_GPIO_Init+0x240>
 80019da:	2304      	movs	r3, #4
 80019dc:	e006      	b.n	80019ec <HAL_GPIO_Init+0x240>
 80019de:	2303      	movs	r3, #3
 80019e0:	e004      	b.n	80019ec <HAL_GPIO_Init+0x240>
 80019e2:	2302      	movs	r3, #2
 80019e4:	e002      	b.n	80019ec <HAL_GPIO_Init+0x240>
 80019e6:	2301      	movs	r3, #1
 80019e8:	e000      	b.n	80019ec <HAL_GPIO_Init+0x240>
 80019ea:	2300      	movs	r3, #0
 80019ec:	69fa      	ldr	r2, [r7, #28]
 80019ee:	f002 0203 	and.w	r2, r2, #3
 80019f2:	0092      	lsls	r2, r2, #2
 80019f4:	4093      	lsls	r3, r2
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80019fc:	4934      	ldr	r1, [pc, #208]	; (8001ad0 <HAL_GPIO_Init+0x324>)
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	089b      	lsrs	r3, r3, #2
 8001a02:	3302      	adds	r3, #2
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a0a:	4b3c      	ldr	r3, [pc, #240]	; (8001afc <HAL_GPIO_Init+0x350>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	43db      	mvns	r3, r3
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	4013      	ands	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d003      	beq.n	8001a2e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a2e:	4a33      	ldr	r2, [pc, #204]	; (8001afc <HAL_GPIO_Init+0x350>)
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a34:	4b31      	ldr	r3, [pc, #196]	; (8001afc <HAL_GPIO_Init+0x350>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4013      	ands	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d003      	beq.n	8001a58 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a58:	4a28      	ldr	r2, [pc, #160]	; (8001afc <HAL_GPIO_Init+0x350>)
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a5e:	4b27      	ldr	r3, [pc, #156]	; (8001afc <HAL_GPIO_Init+0x350>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	43db      	mvns	r3, r3
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a82:	4a1e      	ldr	r2, [pc, #120]	; (8001afc <HAL_GPIO_Init+0x350>)
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a88:	4b1c      	ldr	r3, [pc, #112]	; (8001afc <HAL_GPIO_Init+0x350>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	43db      	mvns	r3, r3
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4013      	ands	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d003      	beq.n	8001aac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001aac:	4a13      	ldr	r2, [pc, #76]	; (8001afc <HAL_GPIO_Init+0x350>)
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	61fb      	str	r3, [r7, #28]
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	2b0f      	cmp	r3, #15
 8001abc:	f67f ae86 	bls.w	80017cc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001ac0:	bf00      	nop
 8001ac2:	3724      	adds	r7, #36	; 0x24
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	40013800 	.word	0x40013800
 8001ad4:	40020000 	.word	0x40020000
 8001ad8:	40020400 	.word	0x40020400
 8001adc:	40020800 	.word	0x40020800
 8001ae0:	40020c00 	.word	0x40020c00
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	40021400 	.word	0x40021400
 8001aec:	40021800 	.word	0x40021800
 8001af0:	40021c00 	.word	0x40021c00
 8001af4:	40022000 	.word	0x40022000
 8001af8:	40022400 	.word	0x40022400
 8001afc:	40013c00 	.word	0x40013c00

08001b00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	460b      	mov	r3, r1
 8001b0a:	807b      	strh	r3, [r7, #2]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b10:	787b      	ldrb	r3, [r7, #1]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b16:	887a      	ldrh	r2, [r7, #2]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001b1c:	e003      	b.n	8001b26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001b1e:	887b      	ldrh	r3, [r7, #2]
 8001b20:	041a      	lsls	r2, r3, #16
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	619a      	str	r2, [r3, #24]
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b34:	b08f      	sub	sp, #60	; 0x3c
 8001b36:	af0a      	add	r7, sp, #40	; 0x28
 8001b38:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d101      	bne.n	8001b44 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e116      	b.n	8001d72 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d106      	bne.n	8001b64 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff fc0e 	bl	8001380 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2203      	movs	r2, #3
 8001b68:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d102      	bne.n	8001b7e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f002 f998 	bl	8003eb8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	603b      	str	r3, [r7, #0]
 8001b8e:	687e      	ldr	r6, [r7, #4]
 8001b90:	466d      	mov	r5, sp
 8001b92:	f106 0410 	add.w	r4, r6, #16
 8001b96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b9e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ba2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ba6:	1d33      	adds	r3, r6, #4
 8001ba8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001baa:	6838      	ldr	r0, [r7, #0]
 8001bac:	f002 f92c 	bl	8003e08 <USB_CoreInit>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d005      	beq.n	8001bc2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2202      	movs	r2, #2
 8001bba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e0d7      	b.n	8001d72 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f002 f986 	bl	8003eda <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bce:	2300      	movs	r3, #0
 8001bd0:	73fb      	strb	r3, [r7, #15]
 8001bd2:	e04a      	b.n	8001c6a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001bd4:	7bfa      	ldrb	r2, [r7, #15]
 8001bd6:	6879      	ldr	r1, [r7, #4]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	1a9b      	subs	r3, r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	440b      	add	r3, r1
 8001be2:	333d      	adds	r3, #61	; 0x3d
 8001be4:	2201      	movs	r2, #1
 8001be6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001be8:	7bfa      	ldrb	r2, [r7, #15]
 8001bea:	6879      	ldr	r1, [r7, #4]
 8001bec:	4613      	mov	r3, r2
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	1a9b      	subs	r3, r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	333c      	adds	r3, #60	; 0x3c
 8001bf8:	7bfa      	ldrb	r2, [r7, #15]
 8001bfa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001bfc:	7bfa      	ldrb	r2, [r7, #15]
 8001bfe:	7bfb      	ldrb	r3, [r7, #15]
 8001c00:	b298      	uxth	r0, r3
 8001c02:	6879      	ldr	r1, [r7, #4]
 8001c04:	4613      	mov	r3, r2
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	1a9b      	subs	r3, r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	440b      	add	r3, r1
 8001c0e:	3342      	adds	r3, #66	; 0x42
 8001c10:	4602      	mov	r2, r0
 8001c12:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c14:	7bfa      	ldrb	r2, [r7, #15]
 8001c16:	6879      	ldr	r1, [r7, #4]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	1a9b      	subs	r3, r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	440b      	add	r3, r1
 8001c22:	333f      	adds	r3, #63	; 0x3f
 8001c24:	2200      	movs	r2, #0
 8001c26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c28:	7bfa      	ldrb	r2, [r7, #15]
 8001c2a:	6879      	ldr	r1, [r7, #4]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	1a9b      	subs	r3, r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	440b      	add	r3, r1
 8001c36:	3344      	adds	r3, #68	; 0x44
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c3c:	7bfa      	ldrb	r2, [r7, #15]
 8001c3e:	6879      	ldr	r1, [r7, #4]
 8001c40:	4613      	mov	r3, r2
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	1a9b      	subs	r3, r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	440b      	add	r3, r1
 8001c4a:	3348      	adds	r3, #72	; 0x48
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c50:	7bfa      	ldrb	r2, [r7, #15]
 8001c52:	6879      	ldr	r1, [r7, #4]
 8001c54:	4613      	mov	r3, r2
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	1a9b      	subs	r3, r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	440b      	add	r3, r1
 8001c5e:	3350      	adds	r3, #80	; 0x50
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c64:	7bfb      	ldrb	r3, [r7, #15]
 8001c66:	3301      	adds	r3, #1
 8001c68:	73fb      	strb	r3, [r7, #15]
 8001c6a:	7bfa      	ldrb	r2, [r7, #15]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d3af      	bcc.n	8001bd4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c74:	2300      	movs	r3, #0
 8001c76:	73fb      	strb	r3, [r7, #15]
 8001c78:	e044      	b.n	8001d04 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c7a:	7bfa      	ldrb	r2, [r7, #15]
 8001c7c:	6879      	ldr	r1, [r7, #4]
 8001c7e:	4613      	mov	r3, r2
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	1a9b      	subs	r3, r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	440b      	add	r3, r1
 8001c88:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c90:	7bfa      	ldrb	r2, [r7, #15]
 8001c92:	6879      	ldr	r1, [r7, #4]
 8001c94:	4613      	mov	r3, r2
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	1a9b      	subs	r3, r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	440b      	add	r3, r1
 8001c9e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001ca2:	7bfa      	ldrb	r2, [r7, #15]
 8001ca4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ca6:	7bfa      	ldrb	r2, [r7, #15]
 8001ca8:	6879      	ldr	r1, [r7, #4]
 8001caa:	4613      	mov	r3, r2
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	1a9b      	subs	r3, r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	440b      	add	r3, r1
 8001cb4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001cb8:	2200      	movs	r2, #0
 8001cba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001cbc:	7bfa      	ldrb	r2, [r7, #15]
 8001cbe:	6879      	ldr	r1, [r7, #4]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	1a9b      	subs	r3, r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	440b      	add	r3, r1
 8001cca:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001cd2:	7bfa      	ldrb	r2, [r7, #15]
 8001cd4:	6879      	ldr	r1, [r7, #4]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	1a9b      	subs	r3, r3, r2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	440b      	add	r3, r1
 8001ce0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ce8:	7bfa      	ldrb	r2, [r7, #15]
 8001cea:	6879      	ldr	r1, [r7, #4]
 8001cec:	4613      	mov	r3, r2
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	1a9b      	subs	r3, r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	440b      	add	r3, r1
 8001cf6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cfe:	7bfb      	ldrb	r3, [r7, #15]
 8001d00:	3301      	adds	r3, #1
 8001d02:	73fb      	strb	r3, [r7, #15]
 8001d04:	7bfa      	ldrb	r2, [r7, #15]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d3b5      	bcc.n	8001c7a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	603b      	str	r3, [r7, #0]
 8001d14:	687e      	ldr	r6, [r7, #4]
 8001d16:	466d      	mov	r5, sp
 8001d18:	f106 0410 	add.w	r4, r6, #16
 8001d1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d24:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d28:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d2c:	1d33      	adds	r3, r6, #4
 8001d2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d30:	6838      	ldr	r0, [r7, #0]
 8001d32:	f002 f8fd 	bl	8003f30 <USB_DevInit>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d005      	beq.n	8001d48 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2202      	movs	r2, #2
 8001d40:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e014      	b.n	8001d72 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d102      	bne.n	8001d66 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f000 f80b 	bl	8001d7c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f002 faaf 	bl	80042ce <USB_DevDisconnect>

  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3714      	adds	r7, #20
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001d7c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001daa:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <HAL_PCDEx_ActivateLPM+0x44>)
 8001dac:	4313      	orrs	r3, r2
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001db2:	2300      	movs	r3, #0
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3714      	adds	r7, #20
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	10000003 	.word	0x10000003

08001dc4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dc8:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a04      	ldr	r2, [pc, #16]	; (8001de0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001dce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd2:	6013      	str	r3, [r2, #0]
}
 8001dd4:	bf00      	nop
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	40007000 	.word	0x40007000

08001de4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001dea:	2300      	movs	r3, #0
 8001dec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001dee:	4b23      	ldr	r3, [pc, #140]	; (8001e7c <HAL_PWREx_EnableOverDrive+0x98>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	4a22      	ldr	r2, [pc, #136]	; (8001e7c <HAL_PWREx_EnableOverDrive+0x98>)
 8001df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001df8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dfa:	4b20      	ldr	r3, [pc, #128]	; (8001e7c <HAL_PWREx_EnableOverDrive+0x98>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e02:	603b      	str	r3, [r7, #0]
 8001e04:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001e06:	4b1e      	ldr	r3, [pc, #120]	; (8001e80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a1d      	ldr	r2, [pc, #116]	; (8001e80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e10:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e12:	f7ff fb8b 	bl	800152c <HAL_GetTick>
 8001e16:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e18:	e009      	b.n	8001e2e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e1a:	f7ff fb87 	bl	800152c <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e28:	d901      	bls.n	8001e2e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e022      	b.n	8001e74 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e2e:	4b14      	ldr	r3, [pc, #80]	; (8001e80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e3a:	d1ee      	bne.n	8001e1a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001e3c:	4b10      	ldr	r3, [pc, #64]	; (8001e80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a0f      	ldr	r2, [pc, #60]	; (8001e80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e46:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e48:	f7ff fb70 	bl	800152c <HAL_GetTick>
 8001e4c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e4e:	e009      	b.n	8001e64 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e50:	f7ff fb6c 	bl	800152c <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e5e:	d901      	bls.n	8001e64 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e007      	b.n	8001e74 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e64:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e70:	d1ee      	bne.n	8001e50 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	40007000 	.word	0x40007000

08001e84 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e291      	b.n	80023be <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f000 8087 	beq.w	8001fb6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ea8:	4b96      	ldr	r3, [pc, #600]	; (8002104 <HAL_RCC_OscConfig+0x280>)
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f003 030c 	and.w	r3, r3, #12
 8001eb0:	2b04      	cmp	r3, #4
 8001eb2:	d00c      	beq.n	8001ece <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eb4:	4b93      	ldr	r3, [pc, #588]	; (8002104 <HAL_RCC_OscConfig+0x280>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f003 030c 	and.w	r3, r3, #12
 8001ebc:	2b08      	cmp	r3, #8
 8001ebe:	d112      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x62>
 8001ec0:	4b90      	ldr	r3, [pc, #576]	; (8002104 <HAL_RCC_OscConfig+0x280>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ec8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ecc:	d10b      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ece:	4b8d      	ldr	r3, [pc, #564]	; (8002104 <HAL_RCC_OscConfig+0x280>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d06c      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x130>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d168      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e26b      	b.n	80023be <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eee:	d106      	bne.n	8001efe <HAL_RCC_OscConfig+0x7a>
 8001ef0:	4b84      	ldr	r3, [pc, #528]	; (8002104 <HAL_RCC_OscConfig+0x280>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a83      	ldr	r2, [pc, #524]	; (8002104 <HAL_RCC_OscConfig+0x280>)
 8001ef6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001efa:	6013      	str	r3, [r2, #0]
 8001efc:	e02e      	b.n	8001f5c <HAL_RCC_OscConfig+0xd8>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d10c      	bne.n	8001f20 <HAL_RCC_OscConfig+0x9c>
 8001f06:	4b7f      	ldr	r3, [pc, #508]	; (8002104 <HAL_RCC_OscConfig+0x280>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a7e      	ldr	r2, [pc, #504]	; (8002104 <HAL_RCC_OscConfig+0x280>)
 8001f0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f10:	6013      	str	r3, [r2, #0]
 8001f12:	4b7c      	ldr	r3, [pc, #496]	; (8002104 <HAL_RCC_OscConfig+0x280>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a7b      	ldr	r2, [pc, #492]	; (8002104 <HAL_RCC_OscConfig+0x280>)
 8001f18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f1c:	6013      	str	r3, [r2, #0]
 8001f1e:	e01d      	b.n	8001f5c <HAL_RCC_OscConfig+0xd8>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f28:	d10c      	bne.n	8001f44 <HAL_RCC_OscConfig+0xc0>
 8001f2a:	4b76      	ldr	r3, [pc, #472]	; (8002104 <HAL_RCC_OscConfig+0x280>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a75      	ldr	r2, [pc, #468]	; (8002104 <HAL_RCC_OscConfig+0x280>)
 8001f30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f34:	6013      	str	r3, [r2, #0]
 8001f36:	4b73      	ldr	r3, [pc, #460]	; (8002104 <HAL_RCC_OscConfig+0x280>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a72      	ldr	r2, [pc, #456]	; (8002104 <HAL_RCC_OscConfig+0x280>)
 8001f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f40:	6013      	str	r3, [r2, #0]
 8001f42:	e00b      	b.n	8001f5c <HAL_RCC_OscConfig+0xd8>
 8001f44:	4b6f      	ldr	r3, [pc, #444]	; (8002104 <HAL_RCC_OscConfig+0x280>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a6e      	ldr	r2, [pc, #440]	; (8002104 <HAL_RCC_OscConfig+0x280>)
 8001f4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f4e:	6013      	str	r3, [r2, #0]
 8001f50:	4b6c      	ldr	r3, [pc, #432]	; (8002104 <HAL_RCC_OscConfig+0x280>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a6b      	ldr	r2, [pc, #428]	; (8002104 <HAL_RCC_OscConfig+0x280>)
 8001f56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d013      	beq.n	8001f8c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f64:	f7ff fae2 	bl	800152c <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f6c:	f7ff fade 	bl	800152c <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b64      	cmp	r3, #100	; 0x64
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e21f      	b.n	80023be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f7e:	4b61      	ldr	r3, [pc, #388]	; (8002104 <HAL_RCC_OscConfig+0x280>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d0f0      	beq.n	8001f6c <HAL_RCC_OscConfig+0xe8>
 8001f8a:	e014      	b.n	8001fb6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f8c:	f7ff face 	bl	800152c <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f94:	f7ff faca 	bl	800152c <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b64      	cmp	r3, #100	; 0x64
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e20b      	b.n	80023be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fa6:	4b57      	ldr	r3, [pc, #348]	; (8002104 <HAL_RCC_OscConfig+0x280>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1f0      	bne.n	8001f94 <HAL_RCC_OscConfig+0x110>
 8001fb2:	e000      	b.n	8001fb6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d069      	beq.n	8002096 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fc2:	4b50      	ldr	r3, [pc, #320]	; (8002104 <HAL_RCC_OscConfig+0x280>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f003 030c 	and.w	r3, r3, #12
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d00b      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fce:	4b4d      	ldr	r3, [pc, #308]	; (8002104 <HAL_RCC_OscConfig+0x280>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f003 030c 	and.w	r3, r3, #12
 8001fd6:	2b08      	cmp	r3, #8
 8001fd8:	d11c      	bne.n	8002014 <HAL_RCC_OscConfig+0x190>
 8001fda:	4b4a      	ldr	r3, [pc, #296]	; (8002104 <HAL_RCC_OscConfig+0x280>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d116      	bne.n	8002014 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fe6:	4b47      	ldr	r3, [pc, #284]	; (8002104 <HAL_RCC_OscConfig+0x280>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d005      	beq.n	8001ffe <HAL_RCC_OscConfig+0x17a>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d001      	beq.n	8001ffe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e1df      	b.n	80023be <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ffe:	4b41      	ldr	r3, [pc, #260]	; (8002104 <HAL_RCC_OscConfig+0x280>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	493d      	ldr	r1, [pc, #244]	; (8002104 <HAL_RCC_OscConfig+0x280>)
 800200e:	4313      	orrs	r3, r2
 8002010:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002012:	e040      	b.n	8002096 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d023      	beq.n	8002064 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800201c:	4b39      	ldr	r3, [pc, #228]	; (8002104 <HAL_RCC_OscConfig+0x280>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a38      	ldr	r2, [pc, #224]	; (8002104 <HAL_RCC_OscConfig+0x280>)
 8002022:	f043 0301 	orr.w	r3, r3, #1
 8002026:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002028:	f7ff fa80 	bl	800152c <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002030:	f7ff fa7c 	bl	800152c <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e1bd      	b.n	80023be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002042:	4b30      	ldr	r3, [pc, #192]	; (8002104 <HAL_RCC_OscConfig+0x280>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d0f0      	beq.n	8002030 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800204e:	4b2d      	ldr	r3, [pc, #180]	; (8002104 <HAL_RCC_OscConfig+0x280>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	4929      	ldr	r1, [pc, #164]	; (8002104 <HAL_RCC_OscConfig+0x280>)
 800205e:	4313      	orrs	r3, r2
 8002060:	600b      	str	r3, [r1, #0]
 8002062:	e018      	b.n	8002096 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002064:	4b27      	ldr	r3, [pc, #156]	; (8002104 <HAL_RCC_OscConfig+0x280>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a26      	ldr	r2, [pc, #152]	; (8002104 <HAL_RCC_OscConfig+0x280>)
 800206a:	f023 0301 	bic.w	r3, r3, #1
 800206e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002070:	f7ff fa5c 	bl	800152c <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002078:	f7ff fa58 	bl	800152c <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e199      	b.n	80023be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800208a:	4b1e      	ldr	r3, [pc, #120]	; (8002104 <HAL_RCC_OscConfig+0x280>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1f0      	bne.n	8002078 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d038      	beq.n	8002114 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d019      	beq.n	80020de <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020aa:	4b16      	ldr	r3, [pc, #88]	; (8002104 <HAL_RCC_OscConfig+0x280>)
 80020ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020ae:	4a15      	ldr	r2, [pc, #84]	; (8002104 <HAL_RCC_OscConfig+0x280>)
 80020b0:	f043 0301 	orr.w	r3, r3, #1
 80020b4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b6:	f7ff fa39 	bl	800152c <HAL_GetTick>
 80020ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020bc:	e008      	b.n	80020d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020be:	f7ff fa35 	bl	800152c <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d901      	bls.n	80020d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e176      	b.n	80023be <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020d0:	4b0c      	ldr	r3, [pc, #48]	; (8002104 <HAL_RCC_OscConfig+0x280>)
 80020d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d0f0      	beq.n	80020be <HAL_RCC_OscConfig+0x23a>
 80020dc:	e01a      	b.n	8002114 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020de:	4b09      	ldr	r3, [pc, #36]	; (8002104 <HAL_RCC_OscConfig+0x280>)
 80020e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020e2:	4a08      	ldr	r2, [pc, #32]	; (8002104 <HAL_RCC_OscConfig+0x280>)
 80020e4:	f023 0301 	bic.w	r3, r3, #1
 80020e8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ea:	f7ff fa1f 	bl	800152c <HAL_GetTick>
 80020ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020f0:	e00a      	b.n	8002108 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020f2:	f7ff fa1b 	bl	800152c <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d903      	bls.n	8002108 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e15c      	b.n	80023be <HAL_RCC_OscConfig+0x53a>
 8002104:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002108:	4b91      	ldr	r3, [pc, #580]	; (8002350 <HAL_RCC_OscConfig+0x4cc>)
 800210a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1ee      	bne.n	80020f2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0304 	and.w	r3, r3, #4
 800211c:	2b00      	cmp	r3, #0
 800211e:	f000 80a4 	beq.w	800226a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002122:	4b8b      	ldr	r3, [pc, #556]	; (8002350 <HAL_RCC_OscConfig+0x4cc>)
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d10d      	bne.n	800214a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800212e:	4b88      	ldr	r3, [pc, #544]	; (8002350 <HAL_RCC_OscConfig+0x4cc>)
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	4a87      	ldr	r2, [pc, #540]	; (8002350 <HAL_RCC_OscConfig+0x4cc>)
 8002134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002138:	6413      	str	r3, [r2, #64]	; 0x40
 800213a:	4b85      	ldr	r3, [pc, #532]	; (8002350 <HAL_RCC_OscConfig+0x4cc>)
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002142:	60bb      	str	r3, [r7, #8]
 8002144:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002146:	2301      	movs	r3, #1
 8002148:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800214a:	4b82      	ldr	r3, [pc, #520]	; (8002354 <HAL_RCC_OscConfig+0x4d0>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002152:	2b00      	cmp	r3, #0
 8002154:	d118      	bne.n	8002188 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002156:	4b7f      	ldr	r3, [pc, #508]	; (8002354 <HAL_RCC_OscConfig+0x4d0>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a7e      	ldr	r2, [pc, #504]	; (8002354 <HAL_RCC_OscConfig+0x4d0>)
 800215c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002160:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002162:	f7ff f9e3 	bl	800152c <HAL_GetTick>
 8002166:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002168:	e008      	b.n	800217c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800216a:	f7ff f9df 	bl	800152c <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b64      	cmp	r3, #100	; 0x64
 8002176:	d901      	bls.n	800217c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e120      	b.n	80023be <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800217c:	4b75      	ldr	r3, [pc, #468]	; (8002354 <HAL_RCC_OscConfig+0x4d0>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002184:	2b00      	cmp	r3, #0
 8002186:	d0f0      	beq.n	800216a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d106      	bne.n	800219e <HAL_RCC_OscConfig+0x31a>
 8002190:	4b6f      	ldr	r3, [pc, #444]	; (8002350 <HAL_RCC_OscConfig+0x4cc>)
 8002192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002194:	4a6e      	ldr	r2, [pc, #440]	; (8002350 <HAL_RCC_OscConfig+0x4cc>)
 8002196:	f043 0301 	orr.w	r3, r3, #1
 800219a:	6713      	str	r3, [r2, #112]	; 0x70
 800219c:	e02d      	b.n	80021fa <HAL_RCC_OscConfig+0x376>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d10c      	bne.n	80021c0 <HAL_RCC_OscConfig+0x33c>
 80021a6:	4b6a      	ldr	r3, [pc, #424]	; (8002350 <HAL_RCC_OscConfig+0x4cc>)
 80021a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021aa:	4a69      	ldr	r2, [pc, #420]	; (8002350 <HAL_RCC_OscConfig+0x4cc>)
 80021ac:	f023 0301 	bic.w	r3, r3, #1
 80021b0:	6713      	str	r3, [r2, #112]	; 0x70
 80021b2:	4b67      	ldr	r3, [pc, #412]	; (8002350 <HAL_RCC_OscConfig+0x4cc>)
 80021b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b6:	4a66      	ldr	r2, [pc, #408]	; (8002350 <HAL_RCC_OscConfig+0x4cc>)
 80021b8:	f023 0304 	bic.w	r3, r3, #4
 80021bc:	6713      	str	r3, [r2, #112]	; 0x70
 80021be:	e01c      	b.n	80021fa <HAL_RCC_OscConfig+0x376>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	2b05      	cmp	r3, #5
 80021c6:	d10c      	bne.n	80021e2 <HAL_RCC_OscConfig+0x35e>
 80021c8:	4b61      	ldr	r3, [pc, #388]	; (8002350 <HAL_RCC_OscConfig+0x4cc>)
 80021ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021cc:	4a60      	ldr	r2, [pc, #384]	; (8002350 <HAL_RCC_OscConfig+0x4cc>)
 80021ce:	f043 0304 	orr.w	r3, r3, #4
 80021d2:	6713      	str	r3, [r2, #112]	; 0x70
 80021d4:	4b5e      	ldr	r3, [pc, #376]	; (8002350 <HAL_RCC_OscConfig+0x4cc>)
 80021d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d8:	4a5d      	ldr	r2, [pc, #372]	; (8002350 <HAL_RCC_OscConfig+0x4cc>)
 80021da:	f043 0301 	orr.w	r3, r3, #1
 80021de:	6713      	str	r3, [r2, #112]	; 0x70
 80021e0:	e00b      	b.n	80021fa <HAL_RCC_OscConfig+0x376>
 80021e2:	4b5b      	ldr	r3, [pc, #364]	; (8002350 <HAL_RCC_OscConfig+0x4cc>)
 80021e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e6:	4a5a      	ldr	r2, [pc, #360]	; (8002350 <HAL_RCC_OscConfig+0x4cc>)
 80021e8:	f023 0301 	bic.w	r3, r3, #1
 80021ec:	6713      	str	r3, [r2, #112]	; 0x70
 80021ee:	4b58      	ldr	r3, [pc, #352]	; (8002350 <HAL_RCC_OscConfig+0x4cc>)
 80021f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f2:	4a57      	ldr	r2, [pc, #348]	; (8002350 <HAL_RCC_OscConfig+0x4cc>)
 80021f4:	f023 0304 	bic.w	r3, r3, #4
 80021f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d015      	beq.n	800222e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002202:	f7ff f993 	bl	800152c <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002208:	e00a      	b.n	8002220 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800220a:	f7ff f98f 	bl	800152c <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	f241 3288 	movw	r2, #5000	; 0x1388
 8002218:	4293      	cmp	r3, r2
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e0ce      	b.n	80023be <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002220:	4b4b      	ldr	r3, [pc, #300]	; (8002350 <HAL_RCC_OscConfig+0x4cc>)
 8002222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d0ee      	beq.n	800220a <HAL_RCC_OscConfig+0x386>
 800222c:	e014      	b.n	8002258 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800222e:	f7ff f97d 	bl	800152c <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002234:	e00a      	b.n	800224c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002236:	f7ff f979 	bl	800152c <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	f241 3288 	movw	r2, #5000	; 0x1388
 8002244:	4293      	cmp	r3, r2
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e0b8      	b.n	80023be <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800224c:	4b40      	ldr	r3, [pc, #256]	; (8002350 <HAL_RCC_OscConfig+0x4cc>)
 800224e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1ee      	bne.n	8002236 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002258:	7dfb      	ldrb	r3, [r7, #23]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d105      	bne.n	800226a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800225e:	4b3c      	ldr	r3, [pc, #240]	; (8002350 <HAL_RCC_OscConfig+0x4cc>)
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	4a3b      	ldr	r2, [pc, #236]	; (8002350 <HAL_RCC_OscConfig+0x4cc>)
 8002264:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002268:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	2b00      	cmp	r3, #0
 8002270:	f000 80a4 	beq.w	80023bc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002274:	4b36      	ldr	r3, [pc, #216]	; (8002350 <HAL_RCC_OscConfig+0x4cc>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f003 030c 	and.w	r3, r3, #12
 800227c:	2b08      	cmp	r3, #8
 800227e:	d06b      	beq.n	8002358 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	2b02      	cmp	r3, #2
 8002286:	d149      	bne.n	800231c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002288:	4b31      	ldr	r3, [pc, #196]	; (8002350 <HAL_RCC_OscConfig+0x4cc>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a30      	ldr	r2, [pc, #192]	; (8002350 <HAL_RCC_OscConfig+0x4cc>)
 800228e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002292:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002294:	f7ff f94a 	bl	800152c <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800229c:	f7ff f946 	bl	800152c <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e087      	b.n	80023be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ae:	4b28      	ldr	r3, [pc, #160]	; (8002350 <HAL_RCC_OscConfig+0x4cc>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1f0      	bne.n	800229c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	69da      	ldr	r2, [r3, #28]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	431a      	orrs	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c8:	019b      	lsls	r3, r3, #6
 80022ca:	431a      	orrs	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d0:	085b      	lsrs	r3, r3, #1
 80022d2:	3b01      	subs	r3, #1
 80022d4:	041b      	lsls	r3, r3, #16
 80022d6:	431a      	orrs	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022dc:	061b      	lsls	r3, r3, #24
 80022de:	4313      	orrs	r3, r2
 80022e0:	4a1b      	ldr	r2, [pc, #108]	; (8002350 <HAL_RCC_OscConfig+0x4cc>)
 80022e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80022e6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022e8:	4b19      	ldr	r3, [pc, #100]	; (8002350 <HAL_RCC_OscConfig+0x4cc>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a18      	ldr	r2, [pc, #96]	; (8002350 <HAL_RCC_OscConfig+0x4cc>)
 80022ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f4:	f7ff f91a 	bl	800152c <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022fc:	f7ff f916 	bl	800152c <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e057      	b.n	80023be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800230e:	4b10      	ldr	r3, [pc, #64]	; (8002350 <HAL_RCC_OscConfig+0x4cc>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d0f0      	beq.n	80022fc <HAL_RCC_OscConfig+0x478>
 800231a:	e04f      	b.n	80023bc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800231c:	4b0c      	ldr	r3, [pc, #48]	; (8002350 <HAL_RCC_OscConfig+0x4cc>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a0b      	ldr	r2, [pc, #44]	; (8002350 <HAL_RCC_OscConfig+0x4cc>)
 8002322:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002326:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002328:	f7ff f900 	bl	800152c <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002330:	f7ff f8fc 	bl	800152c <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e03d      	b.n	80023be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002342:	4b03      	ldr	r3, [pc, #12]	; (8002350 <HAL_RCC_OscConfig+0x4cc>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1f0      	bne.n	8002330 <HAL_RCC_OscConfig+0x4ac>
 800234e:	e035      	b.n	80023bc <HAL_RCC_OscConfig+0x538>
 8002350:	40023800 	.word	0x40023800
 8002354:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002358:	4b1b      	ldr	r3, [pc, #108]	; (80023c8 <HAL_RCC_OscConfig+0x544>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d028      	beq.n	80023b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002370:	429a      	cmp	r2, r3
 8002372:	d121      	bne.n	80023b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800237e:	429a      	cmp	r2, r3
 8002380:	d11a      	bne.n	80023b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002388:	4013      	ands	r3, r2
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800238e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002390:	4293      	cmp	r3, r2
 8002392:	d111      	bne.n	80023b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239e:	085b      	lsrs	r3, r3, #1
 80023a0:	3b01      	subs	r3, #1
 80023a2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d107      	bne.n	80023b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d001      	beq.n	80023bc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e000      	b.n	80023be <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3718      	adds	r7, #24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40023800 	.word	0x40023800

080023cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80023d6:	2300      	movs	r3, #0
 80023d8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d101      	bne.n	80023e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e0d0      	b.n	8002586 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023e4:	4b6a      	ldr	r3, [pc, #424]	; (8002590 <HAL_RCC_ClockConfig+0x1c4>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 030f 	and.w	r3, r3, #15
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d910      	bls.n	8002414 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023f2:	4b67      	ldr	r3, [pc, #412]	; (8002590 <HAL_RCC_ClockConfig+0x1c4>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f023 020f 	bic.w	r2, r3, #15
 80023fa:	4965      	ldr	r1, [pc, #404]	; (8002590 <HAL_RCC_ClockConfig+0x1c4>)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	4313      	orrs	r3, r2
 8002400:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002402:	4b63      	ldr	r3, [pc, #396]	; (8002590 <HAL_RCC_ClockConfig+0x1c4>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 030f 	and.w	r3, r3, #15
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	429a      	cmp	r2, r3
 800240e:	d001      	beq.n	8002414 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e0b8      	b.n	8002586 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d020      	beq.n	8002462 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0304 	and.w	r3, r3, #4
 8002428:	2b00      	cmp	r3, #0
 800242a:	d005      	beq.n	8002438 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800242c:	4b59      	ldr	r3, [pc, #356]	; (8002594 <HAL_RCC_ClockConfig+0x1c8>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	4a58      	ldr	r2, [pc, #352]	; (8002594 <HAL_RCC_ClockConfig+0x1c8>)
 8002432:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002436:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0308 	and.w	r3, r3, #8
 8002440:	2b00      	cmp	r3, #0
 8002442:	d005      	beq.n	8002450 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002444:	4b53      	ldr	r3, [pc, #332]	; (8002594 <HAL_RCC_ClockConfig+0x1c8>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	4a52      	ldr	r2, [pc, #328]	; (8002594 <HAL_RCC_ClockConfig+0x1c8>)
 800244a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800244e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002450:	4b50      	ldr	r3, [pc, #320]	; (8002594 <HAL_RCC_ClockConfig+0x1c8>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	494d      	ldr	r1, [pc, #308]	; (8002594 <HAL_RCC_ClockConfig+0x1c8>)
 800245e:	4313      	orrs	r3, r2
 8002460:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b00      	cmp	r3, #0
 800246c:	d040      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d107      	bne.n	8002486 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002476:	4b47      	ldr	r3, [pc, #284]	; (8002594 <HAL_RCC_ClockConfig+0x1c8>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d115      	bne.n	80024ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e07f      	b.n	8002586 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b02      	cmp	r3, #2
 800248c:	d107      	bne.n	800249e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800248e:	4b41      	ldr	r3, [pc, #260]	; (8002594 <HAL_RCC_ClockConfig+0x1c8>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d109      	bne.n	80024ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e073      	b.n	8002586 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800249e:	4b3d      	ldr	r3, [pc, #244]	; (8002594 <HAL_RCC_ClockConfig+0x1c8>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e06b      	b.n	8002586 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024ae:	4b39      	ldr	r3, [pc, #228]	; (8002594 <HAL_RCC_ClockConfig+0x1c8>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f023 0203 	bic.w	r2, r3, #3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	4936      	ldr	r1, [pc, #216]	; (8002594 <HAL_RCC_ClockConfig+0x1c8>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024c0:	f7ff f834 	bl	800152c <HAL_GetTick>
 80024c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024c6:	e00a      	b.n	80024de <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024c8:	f7ff f830 	bl	800152c <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e053      	b.n	8002586 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024de:	4b2d      	ldr	r3, [pc, #180]	; (8002594 <HAL_RCC_ClockConfig+0x1c8>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f003 020c 	and.w	r2, r3, #12
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d1eb      	bne.n	80024c8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024f0:	4b27      	ldr	r3, [pc, #156]	; (8002590 <HAL_RCC_ClockConfig+0x1c4>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 030f 	and.w	r3, r3, #15
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d210      	bcs.n	8002520 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024fe:	4b24      	ldr	r3, [pc, #144]	; (8002590 <HAL_RCC_ClockConfig+0x1c4>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f023 020f 	bic.w	r2, r3, #15
 8002506:	4922      	ldr	r1, [pc, #136]	; (8002590 <HAL_RCC_ClockConfig+0x1c4>)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	4313      	orrs	r3, r2
 800250c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800250e:	4b20      	ldr	r3, [pc, #128]	; (8002590 <HAL_RCC_ClockConfig+0x1c4>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 030f 	and.w	r3, r3, #15
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	429a      	cmp	r2, r3
 800251a:	d001      	beq.n	8002520 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e032      	b.n	8002586 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0304 	and.w	r3, r3, #4
 8002528:	2b00      	cmp	r3, #0
 800252a:	d008      	beq.n	800253e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800252c:	4b19      	ldr	r3, [pc, #100]	; (8002594 <HAL_RCC_ClockConfig+0x1c8>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	4916      	ldr	r1, [pc, #88]	; (8002594 <HAL_RCC_ClockConfig+0x1c8>)
 800253a:	4313      	orrs	r3, r2
 800253c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0308 	and.w	r3, r3, #8
 8002546:	2b00      	cmp	r3, #0
 8002548:	d009      	beq.n	800255e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800254a:	4b12      	ldr	r3, [pc, #72]	; (8002594 <HAL_RCC_ClockConfig+0x1c8>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	490e      	ldr	r1, [pc, #56]	; (8002594 <HAL_RCC_ClockConfig+0x1c8>)
 800255a:	4313      	orrs	r3, r2
 800255c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800255e:	f000 f821 	bl	80025a4 <HAL_RCC_GetSysClockFreq>
 8002562:	4601      	mov	r1, r0
 8002564:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <HAL_RCC_ClockConfig+0x1c8>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	091b      	lsrs	r3, r3, #4
 800256a:	f003 030f 	and.w	r3, r3, #15
 800256e:	4a0a      	ldr	r2, [pc, #40]	; (8002598 <HAL_RCC_ClockConfig+0x1cc>)
 8002570:	5cd3      	ldrb	r3, [r2, r3]
 8002572:	fa21 f303 	lsr.w	r3, r1, r3
 8002576:	4a09      	ldr	r2, [pc, #36]	; (800259c <HAL_RCC_ClockConfig+0x1d0>)
 8002578:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800257a:	4b09      	ldr	r3, [pc, #36]	; (80025a0 <HAL_RCC_ClockConfig+0x1d4>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4618      	mov	r0, r3
 8002580:	f7fe ff90 	bl	80014a4 <HAL_InitTick>

  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	40023c00 	.word	0x40023c00
 8002594:	40023800 	.word	0x40023800
 8002598:	080043d8 	.word	0x080043d8
 800259c:	20000000 	.word	0x20000000
 80025a0:	20000004 	.word	0x20000004

080025a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80025aa:	2300      	movs	r3, #0
 80025ac:	607b      	str	r3, [r7, #4]
 80025ae:	2300      	movs	r3, #0
 80025b0:	60fb      	str	r3, [r7, #12]
 80025b2:	2300      	movs	r3, #0
 80025b4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80025b6:	2300      	movs	r3, #0
 80025b8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025ba:	4b63      	ldr	r3, [pc, #396]	; (8002748 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 030c 	and.w	r3, r3, #12
 80025c2:	2b04      	cmp	r3, #4
 80025c4:	d007      	beq.n	80025d6 <HAL_RCC_GetSysClockFreq+0x32>
 80025c6:	2b08      	cmp	r3, #8
 80025c8:	d008      	beq.n	80025dc <HAL_RCC_GetSysClockFreq+0x38>
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f040 80b4 	bne.w	8002738 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025d0:	4b5e      	ldr	r3, [pc, #376]	; (800274c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80025d2:	60bb      	str	r3, [r7, #8]
      break;
 80025d4:	e0b3      	b.n	800273e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025d6:	4b5e      	ldr	r3, [pc, #376]	; (8002750 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80025d8:	60bb      	str	r3, [r7, #8]
      break;
 80025da:	e0b0      	b.n	800273e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025dc:	4b5a      	ldr	r3, [pc, #360]	; (8002748 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025e4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80025e6:	4b58      	ldr	r3, [pc, #352]	; (8002748 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d04a      	beq.n	8002688 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025f2:	4b55      	ldr	r3, [pc, #340]	; (8002748 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	099b      	lsrs	r3, r3, #6
 80025f8:	f04f 0400 	mov.w	r4, #0
 80025fc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002600:	f04f 0200 	mov.w	r2, #0
 8002604:	ea03 0501 	and.w	r5, r3, r1
 8002608:	ea04 0602 	and.w	r6, r4, r2
 800260c:	4629      	mov	r1, r5
 800260e:	4632      	mov	r2, r6
 8002610:	f04f 0300 	mov.w	r3, #0
 8002614:	f04f 0400 	mov.w	r4, #0
 8002618:	0154      	lsls	r4, r2, #5
 800261a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800261e:	014b      	lsls	r3, r1, #5
 8002620:	4619      	mov	r1, r3
 8002622:	4622      	mov	r2, r4
 8002624:	1b49      	subs	r1, r1, r5
 8002626:	eb62 0206 	sbc.w	r2, r2, r6
 800262a:	f04f 0300 	mov.w	r3, #0
 800262e:	f04f 0400 	mov.w	r4, #0
 8002632:	0194      	lsls	r4, r2, #6
 8002634:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002638:	018b      	lsls	r3, r1, #6
 800263a:	1a5b      	subs	r3, r3, r1
 800263c:	eb64 0402 	sbc.w	r4, r4, r2
 8002640:	f04f 0100 	mov.w	r1, #0
 8002644:	f04f 0200 	mov.w	r2, #0
 8002648:	00e2      	lsls	r2, r4, #3
 800264a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800264e:	00d9      	lsls	r1, r3, #3
 8002650:	460b      	mov	r3, r1
 8002652:	4614      	mov	r4, r2
 8002654:	195b      	adds	r3, r3, r5
 8002656:	eb44 0406 	adc.w	r4, r4, r6
 800265a:	f04f 0100 	mov.w	r1, #0
 800265e:	f04f 0200 	mov.w	r2, #0
 8002662:	0262      	lsls	r2, r4, #9
 8002664:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002668:	0259      	lsls	r1, r3, #9
 800266a:	460b      	mov	r3, r1
 800266c:	4614      	mov	r4, r2
 800266e:	4618      	mov	r0, r3
 8002670:	4621      	mov	r1, r4
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f04f 0400 	mov.w	r4, #0
 8002678:	461a      	mov	r2, r3
 800267a:	4623      	mov	r3, r4
 800267c:	f7fd fdc4 	bl	8000208 <__aeabi_uldivmod>
 8002680:	4603      	mov	r3, r0
 8002682:	460c      	mov	r4, r1
 8002684:	60fb      	str	r3, [r7, #12]
 8002686:	e049      	b.n	800271c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002688:	4b2f      	ldr	r3, [pc, #188]	; (8002748 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	099b      	lsrs	r3, r3, #6
 800268e:	f04f 0400 	mov.w	r4, #0
 8002692:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002696:	f04f 0200 	mov.w	r2, #0
 800269a:	ea03 0501 	and.w	r5, r3, r1
 800269e:	ea04 0602 	and.w	r6, r4, r2
 80026a2:	4629      	mov	r1, r5
 80026a4:	4632      	mov	r2, r6
 80026a6:	f04f 0300 	mov.w	r3, #0
 80026aa:	f04f 0400 	mov.w	r4, #0
 80026ae:	0154      	lsls	r4, r2, #5
 80026b0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80026b4:	014b      	lsls	r3, r1, #5
 80026b6:	4619      	mov	r1, r3
 80026b8:	4622      	mov	r2, r4
 80026ba:	1b49      	subs	r1, r1, r5
 80026bc:	eb62 0206 	sbc.w	r2, r2, r6
 80026c0:	f04f 0300 	mov.w	r3, #0
 80026c4:	f04f 0400 	mov.w	r4, #0
 80026c8:	0194      	lsls	r4, r2, #6
 80026ca:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80026ce:	018b      	lsls	r3, r1, #6
 80026d0:	1a5b      	subs	r3, r3, r1
 80026d2:	eb64 0402 	sbc.w	r4, r4, r2
 80026d6:	f04f 0100 	mov.w	r1, #0
 80026da:	f04f 0200 	mov.w	r2, #0
 80026de:	00e2      	lsls	r2, r4, #3
 80026e0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80026e4:	00d9      	lsls	r1, r3, #3
 80026e6:	460b      	mov	r3, r1
 80026e8:	4614      	mov	r4, r2
 80026ea:	195b      	adds	r3, r3, r5
 80026ec:	eb44 0406 	adc.w	r4, r4, r6
 80026f0:	f04f 0100 	mov.w	r1, #0
 80026f4:	f04f 0200 	mov.w	r2, #0
 80026f8:	02a2      	lsls	r2, r4, #10
 80026fa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80026fe:	0299      	lsls	r1, r3, #10
 8002700:	460b      	mov	r3, r1
 8002702:	4614      	mov	r4, r2
 8002704:	4618      	mov	r0, r3
 8002706:	4621      	mov	r1, r4
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f04f 0400 	mov.w	r4, #0
 800270e:	461a      	mov	r2, r3
 8002710:	4623      	mov	r3, r4
 8002712:	f7fd fd79 	bl	8000208 <__aeabi_uldivmod>
 8002716:	4603      	mov	r3, r0
 8002718:	460c      	mov	r4, r1
 800271a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800271c:	4b0a      	ldr	r3, [pc, #40]	; (8002748 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	0c1b      	lsrs	r3, r3, #16
 8002722:	f003 0303 	and.w	r3, r3, #3
 8002726:	3301      	adds	r3, #1
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	fbb2 f3f3 	udiv	r3, r2, r3
 8002734:	60bb      	str	r3, [r7, #8]
      break;
 8002736:	e002      	b.n	800273e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002738:	4b04      	ldr	r3, [pc, #16]	; (800274c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800273a:	60bb      	str	r3, [r7, #8]
      break;
 800273c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800273e:	68bb      	ldr	r3, [r7, #8]
}
 8002740:	4618      	mov	r0, r3
 8002742:	3714      	adds	r7, #20
 8002744:	46bd      	mov	sp, r7
 8002746:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002748:	40023800 	.word	0x40023800
 800274c:	00f42400 	.word	0x00f42400
 8002750:	007a1200 	.word	0x007a1200

08002754 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002758:	4b03      	ldr	r3, [pc, #12]	; (8002768 <HAL_RCC_GetHCLKFreq+0x14>)
 800275a:	681b      	ldr	r3, [r3, #0]
}
 800275c:	4618      	mov	r0, r3
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	20000000 	.word	0x20000000

0800276c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002770:	f7ff fff0 	bl	8002754 <HAL_RCC_GetHCLKFreq>
 8002774:	4601      	mov	r1, r0
 8002776:	4b05      	ldr	r3, [pc, #20]	; (800278c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	0a9b      	lsrs	r3, r3, #10
 800277c:	f003 0307 	and.w	r3, r3, #7
 8002780:	4a03      	ldr	r2, [pc, #12]	; (8002790 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002782:	5cd3      	ldrb	r3, [r2, r3]
 8002784:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002788:	4618      	mov	r0, r3
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40023800 	.word	0x40023800
 8002790:	080043e8 	.word	0x080043e8

08002794 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002798:	f7ff ffdc 	bl	8002754 <HAL_RCC_GetHCLKFreq>
 800279c:	4601      	mov	r1, r0
 800279e:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	0b5b      	lsrs	r3, r3, #13
 80027a4:	f003 0307 	and.w	r3, r3, #7
 80027a8:	4a03      	ldr	r2, [pc, #12]	; (80027b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027aa:	5cd3      	ldrb	r3, [r2, r3]
 80027ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40023800 	.word	0x40023800
 80027b8:	080043e8 	.word	0x080043e8

080027bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b088      	sub	sp, #32
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80027c4:	2300      	movs	r3, #0
 80027c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80027c8:	2300      	movs	r3, #0
 80027ca:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80027cc:	2300      	movs	r3, #0
 80027ce:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80027d0:	2300      	movs	r3, #0
 80027d2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80027d4:	2300      	movs	r3, #0
 80027d6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d012      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80027e4:	4b69      	ldr	r3, [pc, #420]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	4a68      	ldr	r2, [pc, #416]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027ea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80027ee:	6093      	str	r3, [r2, #8]
 80027f0:	4b66      	ldr	r3, [pc, #408]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027f8:	4964      	ldr	r1, [pc, #400]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002806:	2301      	movs	r3, #1
 8002808:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d017      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002816:	4b5d      	ldr	r3, [pc, #372]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002818:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800281c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002824:	4959      	ldr	r1, [pc, #356]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002826:	4313      	orrs	r3, r2
 8002828:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002830:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002834:	d101      	bne.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002836:	2301      	movs	r3, #1
 8002838:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002842:	2301      	movs	r3, #1
 8002844:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d017      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002852:	4b4e      	ldr	r3, [pc, #312]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002854:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002858:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002860:	494a      	ldr	r1, [pc, #296]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002862:	4313      	orrs	r3, r2
 8002864:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002870:	d101      	bne.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002872:	2301      	movs	r3, #1
 8002874:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800287e:	2301      	movs	r3, #1
 8002880:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800288e:	2301      	movs	r3, #1
 8002890:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0320 	and.w	r3, r3, #32
 800289a:	2b00      	cmp	r3, #0
 800289c:	f000 808b 	beq.w	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80028a0:	4b3a      	ldr	r3, [pc, #232]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a4:	4a39      	ldr	r2, [pc, #228]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028aa:	6413      	str	r3, [r2, #64]	; 0x40
 80028ac:	4b37      	ldr	r3, [pc, #220]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b4:	60bb      	str	r3, [r7, #8]
 80028b6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80028b8:	4b35      	ldr	r3, [pc, #212]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a34      	ldr	r2, [pc, #208]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80028be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028c4:	f7fe fe32 	bl	800152c <HAL_GetTick>
 80028c8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80028ca:	e008      	b.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028cc:	f7fe fe2e 	bl	800152c <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b64      	cmp	r3, #100	; 0x64
 80028d8:	d901      	bls.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e355      	b.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80028de:	4b2c      	ldr	r3, [pc, #176]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d0f0      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028ea:	4b28      	ldr	r3, [pc, #160]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028f2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d035      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	429a      	cmp	r2, r3
 8002906:	d02e      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002908:	4b20      	ldr	r3, [pc, #128]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800290a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002910:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002912:	4b1e      	ldr	r3, [pc, #120]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002916:	4a1d      	ldr	r2, [pc, #116]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800291c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800291e:	4b1b      	ldr	r3, [pc, #108]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002922:	4a1a      	ldr	r2, [pc, #104]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002924:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002928:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800292a:	4a18      	ldr	r2, [pc, #96]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002930:	4b16      	ldr	r3, [pc, #88]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	2b01      	cmp	r3, #1
 800293a:	d114      	bne.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293c:	f7fe fdf6 	bl	800152c <HAL_GetTick>
 8002940:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002942:	e00a      	b.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002944:	f7fe fdf2 	bl	800152c <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002952:	4293      	cmp	r3, r2
 8002954:	d901      	bls.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e317      	b.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800295a:	4b0c      	ldr	r3, [pc, #48]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800295c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d0ee      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800296e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002972:	d111      	bne.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002974:	4b05      	ldr	r3, [pc, #20]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002980:	4b04      	ldr	r3, [pc, #16]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002982:	400b      	ands	r3, r1
 8002984:	4901      	ldr	r1, [pc, #4]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002986:	4313      	orrs	r3, r2
 8002988:	608b      	str	r3, [r1, #8]
 800298a:	e00b      	b.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800298c:	40023800 	.word	0x40023800
 8002990:	40007000 	.word	0x40007000
 8002994:	0ffffcff 	.word	0x0ffffcff
 8002998:	4bb0      	ldr	r3, [pc, #704]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	4aaf      	ldr	r2, [pc, #700]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800299e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80029a2:	6093      	str	r3, [r2, #8]
 80029a4:	4bad      	ldr	r3, [pc, #692]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80029a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029b0:	49aa      	ldr	r1, [pc, #680]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0310 	and.w	r3, r3, #16
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d010      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80029c2:	4ba6      	ldr	r3, [pc, #664]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80029c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029c8:	4aa4      	ldr	r2, [pc, #656]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80029ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029ce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80029d2:	4ba2      	ldr	r3, [pc, #648]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80029d4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029dc:	499f      	ldr	r1, [pc, #636]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00a      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029f0:	4b9a      	ldr	r3, [pc, #616]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80029f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029fe:	4997      	ldr	r1, [pc, #604]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00a      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a12:	4b92      	ldr	r3, [pc, #584]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a18:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a20:	498e      	ldr	r1, [pc, #568]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00a      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a34:	4b89      	ldr	r3, [pc, #548]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a42:	4986      	ldr	r1, [pc, #536]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00a      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002a56:	4b81      	ldr	r3, [pc, #516]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a5c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a64:	497d      	ldr	r1, [pc, #500]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00a      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a78:	4b78      	ldr	r3, [pc, #480]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a7e:	f023 0203 	bic.w	r2, r3, #3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a86:	4975      	ldr	r1, [pc, #468]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00a      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a9a:	4b70      	ldr	r3, [pc, #448]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa0:	f023 020c 	bic.w	r2, r3, #12
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aa8:	496c      	ldr	r1, [pc, #432]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00a      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002abc:	4b67      	ldr	r3, [pc, #412]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aca:	4964      	ldr	r1, [pc, #400]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00a      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ade:	4b5f      	ldr	r3, [pc, #380]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aec:	495b      	ldr	r1, [pc, #364]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d00a      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b00:	4b56      	ldr	r3, [pc, #344]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b0e:	4953      	ldr	r1, [pc, #332]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00a      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002b22:	4b4e      	ldr	r3, [pc, #312]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b28:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b30:	494a      	ldr	r1, [pc, #296]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00a      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002b44:	4b45      	ldr	r3, [pc, #276]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b4a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b52:	4942      	ldr	r1, [pc, #264]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00a      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002b66:	4b3d      	ldr	r3, [pc, #244]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b6c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b74:	4939      	ldr	r1, [pc, #228]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d00a      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002b88:	4b34      	ldr	r3, [pc, #208]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b8e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b96:	4931      	ldr	r1, [pc, #196]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d011      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002baa:	4b2c      	ldr	r3, [pc, #176]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bb8:	4928      	ldr	r1, [pc, #160]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bc8:	d101      	bne.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0308 	and.w	r3, r3, #8
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00a      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002bea:	4b1c      	ldr	r3, [pc, #112]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bf0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bf8:	4918      	ldr	r1, [pc, #96]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00b      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c0c:	4b13      	ldr	r3, [pc, #76]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c12:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c1c:	490f      	ldr	r1, [pc, #60]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d005      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c32:	f040 80d8 	bne.w	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002c36:	4b09      	ldr	r3, [pc, #36]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a08      	ldr	r2, [pc, #32]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002c3c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c42:	f7fe fc73 	bl	800152c <HAL_GetTick>
 8002c46:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c48:	e00a      	b.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c4a:	f7fe fc6f 	bl	800152c <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b64      	cmp	r3, #100	; 0x64
 8002c56:	d903      	bls.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e196      	b.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8002c5c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c60:	4b6c      	ldr	r3, [pc, #432]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d1ee      	bne.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0301 	and.w	r3, r3, #1
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d021      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x500>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d11d      	bne.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002c80:	4b64      	ldr	r3, [pc, #400]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002c82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c86:	0c1b      	lsrs	r3, r3, #16
 8002c88:	f003 0303 	and.w	r3, r3, #3
 8002c8c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002c8e:	4b61      	ldr	r3, [pc, #388]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002c90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c94:	0e1b      	lsrs	r3, r3, #24
 8002c96:	f003 030f 	and.w	r3, r3, #15
 8002c9a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	019a      	lsls	r2, r3, #6
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	041b      	lsls	r3, r3, #16
 8002ca6:	431a      	orrs	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	061b      	lsls	r3, r3, #24
 8002cac:	431a      	orrs	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	071b      	lsls	r3, r3, #28
 8002cb4:	4957      	ldr	r1, [pc, #348]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d004      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ccc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cd0:	d00a      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d02e      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ce6:	d129      	bne.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002ce8:	4b4a      	ldr	r3, [pc, #296]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002cea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cee:	0c1b      	lsrs	r3, r3, #16
 8002cf0:	f003 0303 	and.w	r3, r3, #3
 8002cf4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002cf6:	4b47      	ldr	r3, [pc, #284]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002cf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cfc:	0f1b      	lsrs	r3, r3, #28
 8002cfe:	f003 0307 	and.w	r3, r3, #7
 8002d02:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	019a      	lsls	r2, r3, #6
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	041b      	lsls	r3, r3, #16
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	061b      	lsls	r3, r3, #24
 8002d16:	431a      	orrs	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	071b      	lsls	r3, r3, #28
 8002d1c:	493d      	ldr	r1, [pc, #244]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002d24:	4b3b      	ldr	r3, [pc, #236]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002d26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d2a:	f023 021f 	bic.w	r2, r3, #31
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d32:	3b01      	subs	r3, #1
 8002d34:	4937      	ldr	r1, [pc, #220]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d01d      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002d48:	4b32      	ldr	r3, [pc, #200]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002d4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d4e:	0e1b      	lsrs	r3, r3, #24
 8002d50:	f003 030f 	and.w	r3, r3, #15
 8002d54:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002d56:	4b2f      	ldr	r3, [pc, #188]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002d58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d5c:	0f1b      	lsrs	r3, r3, #28
 8002d5e:	f003 0307 	and.w	r3, r3, #7
 8002d62:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	019a      	lsls	r2, r3, #6
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	041b      	lsls	r3, r3, #16
 8002d70:	431a      	orrs	r2, r3
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	061b      	lsls	r3, r3, #24
 8002d76:	431a      	orrs	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	071b      	lsls	r3, r3, #28
 8002d7c:	4925      	ldr	r1, [pc, #148]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d011      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	019a      	lsls	r2, r3, #6
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	041b      	lsls	r3, r3, #16
 8002d9c:	431a      	orrs	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	061b      	lsls	r3, r3, #24
 8002da4:	431a      	orrs	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	071b      	lsls	r3, r3, #28
 8002dac:	4919      	ldr	r1, [pc, #100]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002db4:	4b17      	ldr	r3, [pc, #92]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a16      	ldr	r2, [pc, #88]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002dba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002dbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dc0:	f7fe fbb4 	bl	800152c <HAL_GetTick>
 8002dc4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002dc6:	e008      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002dc8:	f7fe fbb0 	bl	800152c <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b64      	cmp	r3, #100	; 0x64
 8002dd4:	d901      	bls.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e0d7      	b.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002dda:	4b0e      	ldr	r3, [pc, #56]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d0f0      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	f040 80cd 	bne.w	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002dee:	4b09      	ldr	r3, [pc, #36]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a08      	ldr	r2, [pc, #32]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002df4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002df8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dfa:	f7fe fb97 	bl	800152c <HAL_GetTick>
 8002dfe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002e00:	e00a      	b.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e02:	f7fe fb93 	bl	800152c <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b64      	cmp	r3, #100	; 0x64
 8002e0e:	d903      	bls.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e0ba      	b.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8002e14:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002e18:	4b5e      	ldr	r3, [pc, #376]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e24:	d0ed      	beq.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d003      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d009      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d02e      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d12a      	bne.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002e4e:	4b51      	ldr	r3, [pc, #324]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e54:	0c1b      	lsrs	r3, r3, #16
 8002e56:	f003 0303 	and.w	r3, r3, #3
 8002e5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002e5c:	4b4d      	ldr	r3, [pc, #308]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e62:	0f1b      	lsrs	r3, r3, #28
 8002e64:	f003 0307 	and.w	r3, r3, #7
 8002e68:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	019a      	lsls	r2, r3, #6
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	041b      	lsls	r3, r3, #16
 8002e74:	431a      	orrs	r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	061b      	lsls	r3, r3, #24
 8002e7c:	431a      	orrs	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	071b      	lsls	r3, r3, #28
 8002e82:	4944      	ldr	r1, [pc, #272]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002e8a:	4b42      	ldr	r3, [pc, #264]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002e8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e90:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	021b      	lsls	r3, r3, #8
 8002e9c:	493d      	ldr	r1, [pc, #244]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d022      	beq.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002eb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002eb8:	d11d      	bne.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002eba:	4b36      	ldr	r3, [pc, #216]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec0:	0e1b      	lsrs	r3, r3, #24
 8002ec2:	f003 030f 	and.w	r3, r3, #15
 8002ec6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002ec8:	4b32      	ldr	r3, [pc, #200]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ece:	0f1b      	lsrs	r3, r3, #28
 8002ed0:	f003 0307 	and.w	r3, r3, #7
 8002ed4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	019a      	lsls	r2, r3, #6
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	041b      	lsls	r3, r3, #16
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	061b      	lsls	r3, r3, #24
 8002ee8:	431a      	orrs	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	071b      	lsls	r3, r3, #28
 8002eee:	4929      	ldr	r1, [pc, #164]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0308 	and.w	r3, r3, #8
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d028      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002f02:	4b24      	ldr	r3, [pc, #144]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f08:	0e1b      	lsrs	r3, r3, #24
 8002f0a:	f003 030f 	and.w	r3, r3, #15
 8002f0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002f10:	4b20      	ldr	r3, [pc, #128]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f16:	0c1b      	lsrs	r3, r3, #16
 8002f18:	f003 0303 	and.w	r3, r3, #3
 8002f1c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	019a      	lsls	r2, r3, #6
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	041b      	lsls	r3, r3, #16
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	061b      	lsls	r3, r3, #24
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	69db      	ldr	r3, [r3, #28]
 8002f34:	071b      	lsls	r3, r3, #28
 8002f36:	4917      	ldr	r1, [pc, #92]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002f3e:	4b15      	ldr	r3, [pc, #84]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002f40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4c:	4911      	ldr	r1, [pc, #68]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002f54:	4b0f      	ldr	r3, [pc, #60]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a0e      	ldr	r2, [pc, #56]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002f5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f60:	f7fe fae4 	bl	800152c <HAL_GetTick>
 8002f64:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002f66:	e008      	b.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002f68:	f7fe fae0 	bl	800152c <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b64      	cmp	r3, #100	; 0x64
 8002f74:	d901      	bls.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e007      	b.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002f7a:	4b06      	ldr	r3, [pc, #24]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f86:	d1ef      	bne.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3720      	adds	r7, #32
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	40023800 	.word	0x40023800

08002f98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e01d      	b.n	8002fe6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d106      	bne.n	8002fc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f7fe f916 	bl	80011f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	3304      	adds	r3, #4
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	4610      	mov	r0, r2
 8002fd8:	f000 f986 	bl	80032e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
	...

08002ff0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68da      	ldr	r2, [r3, #12]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f042 0201 	orr.w	r2, r2, #1
 8003006:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	689a      	ldr	r2, [r3, #8]
 800300e:	4b0c      	ldr	r3, [pc, #48]	; (8003040 <HAL_TIM_Base_Start_IT+0x50>)
 8003010:	4013      	ands	r3, r2
 8003012:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2b06      	cmp	r3, #6
 8003018:	d00b      	beq.n	8003032 <HAL_TIM_Base_Start_IT+0x42>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003020:	d007      	beq.n	8003032 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f042 0201 	orr.w	r2, r2, #1
 8003030:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3714      	adds	r7, #20
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr
 8003040:	00010007 	.word	0x00010007

08003044 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b02      	cmp	r3, #2
 8003058:	d122      	bne.n	80030a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b02      	cmp	r3, #2
 8003066:	d11b      	bne.n	80030a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f06f 0202 	mvn.w	r2, #2
 8003070:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2201      	movs	r2, #1
 8003076:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	f003 0303 	and.w	r3, r3, #3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 f90f 	bl	80032aa <HAL_TIM_IC_CaptureCallback>
 800308c:	e005      	b.n	800309a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 f901 	bl	8003296 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 f912 	bl	80032be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	f003 0304 	and.w	r3, r3, #4
 80030aa:	2b04      	cmp	r3, #4
 80030ac:	d122      	bne.n	80030f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	f003 0304 	and.w	r3, r3, #4
 80030b8:	2b04      	cmp	r3, #4
 80030ba:	d11b      	bne.n	80030f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f06f 0204 	mvn.w	r2, #4
 80030c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2202      	movs	r2, #2
 80030ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d003      	beq.n	80030e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 f8e5 	bl	80032aa <HAL_TIM_IC_CaptureCallback>
 80030e0:	e005      	b.n	80030ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 f8d7 	bl	8003296 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f000 f8e8 	bl	80032be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	f003 0308 	and.w	r3, r3, #8
 80030fe:	2b08      	cmp	r3, #8
 8003100:	d122      	bne.n	8003148 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	f003 0308 	and.w	r3, r3, #8
 800310c:	2b08      	cmp	r3, #8
 800310e:	d11b      	bne.n	8003148 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f06f 0208 	mvn.w	r2, #8
 8003118:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2204      	movs	r2, #4
 800311e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	f003 0303 	and.w	r3, r3, #3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d003      	beq.n	8003136 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 f8bb 	bl	80032aa <HAL_TIM_IC_CaptureCallback>
 8003134:	e005      	b.n	8003142 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 f8ad 	bl	8003296 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 f8be 	bl	80032be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	f003 0310 	and.w	r3, r3, #16
 8003152:	2b10      	cmp	r3, #16
 8003154:	d122      	bne.n	800319c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	f003 0310 	and.w	r3, r3, #16
 8003160:	2b10      	cmp	r3, #16
 8003162:	d11b      	bne.n	800319c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f06f 0210 	mvn.w	r2, #16
 800316c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2208      	movs	r2, #8
 8003172:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	69db      	ldr	r3, [r3, #28]
 800317a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 f891 	bl	80032aa <HAL_TIM_IC_CaptureCallback>
 8003188:	e005      	b.n	8003196 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 f883 	bl	8003296 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 f894 	bl	80032be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d10e      	bne.n	80031c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d107      	bne.n	80031c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f06f 0201 	mvn.w	r2, #1
 80031c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f85d 	bl	8003282 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031d2:	2b80      	cmp	r3, #128	; 0x80
 80031d4:	d10e      	bne.n	80031f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e0:	2b80      	cmp	r3, #128	; 0x80
 80031e2:	d107      	bne.n	80031f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 f9b2 	bl	8003558 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003202:	d10e      	bne.n	8003222 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800320e:	2b80      	cmp	r3, #128	; 0x80
 8003210:	d107      	bne.n	8003222 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800321a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 f9a5 	bl	800356c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800322c:	2b40      	cmp	r3, #64	; 0x40
 800322e:	d10e      	bne.n	800324e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800323a:	2b40      	cmp	r3, #64	; 0x40
 800323c:	d107      	bne.n	800324e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003246:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 f842 	bl	80032d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	f003 0320 	and.w	r3, r3, #32
 8003258:	2b20      	cmp	r3, #32
 800325a:	d10e      	bne.n	800327a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	f003 0320 	and.w	r3, r3, #32
 8003266:	2b20      	cmp	r3, #32
 8003268:	d107      	bne.n	800327a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f06f 0220 	mvn.w	r2, #32
 8003272:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f000 f965 	bl	8003544 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800327a:	bf00      	nop
 800327c:	3708      	adds	r7, #8
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003282:	b480      	push	{r7}
 8003284:	b083      	sub	sp, #12
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800328a:	bf00      	nop
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr

08003296 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003296:	b480      	push	{r7}
 8003298:	b083      	sub	sp, #12
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800329e:	bf00      	nop
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr

080032aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032aa:	b480      	push	{r7}
 80032ac:	b083      	sub	sp, #12
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032b2:	bf00      	nop
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr

080032be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032be:	b480      	push	{r7}
 80032c0:	b083      	sub	sp, #12
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032c6:	bf00      	nop
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr

080032d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b083      	sub	sp, #12
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032da:	bf00      	nop
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
	...

080032e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a40      	ldr	r2, [pc, #256]	; (80033fc <TIM_Base_SetConfig+0x114>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d013      	beq.n	8003328 <TIM_Base_SetConfig+0x40>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003306:	d00f      	beq.n	8003328 <TIM_Base_SetConfig+0x40>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a3d      	ldr	r2, [pc, #244]	; (8003400 <TIM_Base_SetConfig+0x118>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d00b      	beq.n	8003328 <TIM_Base_SetConfig+0x40>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a3c      	ldr	r2, [pc, #240]	; (8003404 <TIM_Base_SetConfig+0x11c>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d007      	beq.n	8003328 <TIM_Base_SetConfig+0x40>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a3b      	ldr	r2, [pc, #236]	; (8003408 <TIM_Base_SetConfig+0x120>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d003      	beq.n	8003328 <TIM_Base_SetConfig+0x40>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a3a      	ldr	r2, [pc, #232]	; (800340c <TIM_Base_SetConfig+0x124>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d108      	bne.n	800333a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800332e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	4313      	orrs	r3, r2
 8003338:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a2f      	ldr	r2, [pc, #188]	; (80033fc <TIM_Base_SetConfig+0x114>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d02b      	beq.n	800339a <TIM_Base_SetConfig+0xb2>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003348:	d027      	beq.n	800339a <TIM_Base_SetConfig+0xb2>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a2c      	ldr	r2, [pc, #176]	; (8003400 <TIM_Base_SetConfig+0x118>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d023      	beq.n	800339a <TIM_Base_SetConfig+0xb2>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a2b      	ldr	r2, [pc, #172]	; (8003404 <TIM_Base_SetConfig+0x11c>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d01f      	beq.n	800339a <TIM_Base_SetConfig+0xb2>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a2a      	ldr	r2, [pc, #168]	; (8003408 <TIM_Base_SetConfig+0x120>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d01b      	beq.n	800339a <TIM_Base_SetConfig+0xb2>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a29      	ldr	r2, [pc, #164]	; (800340c <TIM_Base_SetConfig+0x124>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d017      	beq.n	800339a <TIM_Base_SetConfig+0xb2>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a28      	ldr	r2, [pc, #160]	; (8003410 <TIM_Base_SetConfig+0x128>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d013      	beq.n	800339a <TIM_Base_SetConfig+0xb2>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a27      	ldr	r2, [pc, #156]	; (8003414 <TIM_Base_SetConfig+0x12c>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d00f      	beq.n	800339a <TIM_Base_SetConfig+0xb2>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a26      	ldr	r2, [pc, #152]	; (8003418 <TIM_Base_SetConfig+0x130>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d00b      	beq.n	800339a <TIM_Base_SetConfig+0xb2>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a25      	ldr	r2, [pc, #148]	; (800341c <TIM_Base_SetConfig+0x134>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d007      	beq.n	800339a <TIM_Base_SetConfig+0xb2>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a24      	ldr	r2, [pc, #144]	; (8003420 <TIM_Base_SetConfig+0x138>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d003      	beq.n	800339a <TIM_Base_SetConfig+0xb2>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a23      	ldr	r2, [pc, #140]	; (8003424 <TIM_Base_SetConfig+0x13c>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d108      	bne.n	80033ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a0a      	ldr	r2, [pc, #40]	; (80033fc <TIM_Base_SetConfig+0x114>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d003      	beq.n	80033e0 <TIM_Base_SetConfig+0xf8>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a0c      	ldr	r2, [pc, #48]	; (800340c <TIM_Base_SetConfig+0x124>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d103      	bne.n	80033e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	691a      	ldr	r2, [r3, #16]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	615a      	str	r2, [r3, #20]
}
 80033ee:	bf00      	nop
 80033f0:	3714      	adds	r7, #20
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	40010000 	.word	0x40010000
 8003400:	40000400 	.word	0x40000400
 8003404:	40000800 	.word	0x40000800
 8003408:	40000c00 	.word	0x40000c00
 800340c:	40010400 	.word	0x40010400
 8003410:	40014000 	.word	0x40014000
 8003414:	40014400 	.word	0x40014400
 8003418:	40014800 	.word	0x40014800
 800341c:	40001800 	.word	0x40001800
 8003420:	40001c00 	.word	0x40001c00
 8003424:	40002000 	.word	0x40002000

08003428 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003438:	2b01      	cmp	r3, #1
 800343a:	d101      	bne.n	8003440 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800343c:	2302      	movs	r3, #2
 800343e:	e06d      	b.n	800351c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2202      	movs	r2, #2
 800344c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a30      	ldr	r2, [pc, #192]	; (8003528 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d004      	beq.n	8003474 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a2f      	ldr	r2, [pc, #188]	; (800352c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d108      	bne.n	8003486 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800347a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	4313      	orrs	r3, r2
 8003484:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800348c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	4313      	orrs	r3, r2
 8003496:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a20      	ldr	r2, [pc, #128]	; (8003528 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d022      	beq.n	80034f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b2:	d01d      	beq.n	80034f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a1d      	ldr	r2, [pc, #116]	; (8003530 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d018      	beq.n	80034f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a1c      	ldr	r2, [pc, #112]	; (8003534 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d013      	beq.n	80034f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a1a      	ldr	r2, [pc, #104]	; (8003538 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d00e      	beq.n	80034f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a15      	ldr	r2, [pc, #84]	; (800352c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d009      	beq.n	80034f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a16      	ldr	r2, [pc, #88]	; (800353c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d004      	beq.n	80034f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a15      	ldr	r2, [pc, #84]	; (8003540 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d10c      	bne.n	800350a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	68ba      	ldr	r2, [r7, #8]
 80034fe:	4313      	orrs	r3, r2
 8003500:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3714      	adds	r7, #20
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr
 8003528:	40010000 	.word	0x40010000
 800352c:	40010400 	.word	0x40010400
 8003530:	40000400 	.word	0x40000400
 8003534:	40000800 	.word	0x40000800
 8003538:	40000c00 	.word	0x40000c00
 800353c:	40014000 	.word	0x40014000
 8003540:	40001800 	.word	0x40001800

08003544 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e040      	b.n	8003614 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003596:	2b00      	cmp	r3, #0
 8003598:	d106      	bne.n	80035a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f7fd fe7a 	bl	800129c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2224      	movs	r2, #36	; 0x24
 80035ac:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f022 0201 	bic.w	r2, r2, #1
 80035bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f82c 	bl	800361c <UART_SetConfig>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d101      	bne.n	80035ce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e022      	b.n	8003614 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d002      	beq.n	80035dc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 faca 	bl	8003b70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689a      	ldr	r2, [r3, #8]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f042 0201 	orr.w	r2, r2, #1
 800360a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 fb51 	bl	8003cb4 <UART_CheckIdleState>
 8003612:	4603      	mov	r3, r0
}
 8003614:	4618      	mov	r0, r3
 8003616:	3708      	adds	r7, #8
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b088      	sub	sp, #32
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003624:	2300      	movs	r3, #0
 8003626:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003628:	2300      	movs	r3, #0
 800362a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	689a      	ldr	r2, [r3, #8]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	431a      	orrs	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	431a      	orrs	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	69db      	ldr	r3, [r3, #28]
 8003640:	4313      	orrs	r3, r2
 8003642:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	4bb1      	ldr	r3, [pc, #708]	; (8003910 <UART_SetConfig+0x2f4>)
 800364c:	4013      	ands	r3, r2
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	6812      	ldr	r2, [r2, #0]
 8003652:	6939      	ldr	r1, [r7, #16]
 8003654:	430b      	orrs	r3, r1
 8003656:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68da      	ldr	r2, [r3, #12]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	430a      	orrs	r2, r1
 800366c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a1b      	ldr	r3, [r3, #32]
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	4313      	orrs	r3, r2
 800367c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	430a      	orrs	r2, r1
 8003690:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a9f      	ldr	r2, [pc, #636]	; (8003914 <UART_SetConfig+0x2f8>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d121      	bne.n	80036e0 <UART_SetConfig+0xc4>
 800369c:	4b9e      	ldr	r3, [pc, #632]	; (8003918 <UART_SetConfig+0x2fc>)
 800369e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a2:	f003 0303 	and.w	r3, r3, #3
 80036a6:	2b03      	cmp	r3, #3
 80036a8:	d816      	bhi.n	80036d8 <UART_SetConfig+0xbc>
 80036aa:	a201      	add	r2, pc, #4	; (adr r2, 80036b0 <UART_SetConfig+0x94>)
 80036ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036b0:	080036c1 	.word	0x080036c1
 80036b4:	080036cd 	.word	0x080036cd
 80036b8:	080036c7 	.word	0x080036c7
 80036bc:	080036d3 	.word	0x080036d3
 80036c0:	2301      	movs	r3, #1
 80036c2:	77fb      	strb	r3, [r7, #31]
 80036c4:	e151      	b.n	800396a <UART_SetConfig+0x34e>
 80036c6:	2302      	movs	r3, #2
 80036c8:	77fb      	strb	r3, [r7, #31]
 80036ca:	e14e      	b.n	800396a <UART_SetConfig+0x34e>
 80036cc:	2304      	movs	r3, #4
 80036ce:	77fb      	strb	r3, [r7, #31]
 80036d0:	e14b      	b.n	800396a <UART_SetConfig+0x34e>
 80036d2:	2308      	movs	r3, #8
 80036d4:	77fb      	strb	r3, [r7, #31]
 80036d6:	e148      	b.n	800396a <UART_SetConfig+0x34e>
 80036d8:	2310      	movs	r3, #16
 80036da:	77fb      	strb	r3, [r7, #31]
 80036dc:	bf00      	nop
 80036de:	e144      	b.n	800396a <UART_SetConfig+0x34e>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a8d      	ldr	r2, [pc, #564]	; (800391c <UART_SetConfig+0x300>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d134      	bne.n	8003754 <UART_SetConfig+0x138>
 80036ea:	4b8b      	ldr	r3, [pc, #556]	; (8003918 <UART_SetConfig+0x2fc>)
 80036ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f0:	f003 030c 	and.w	r3, r3, #12
 80036f4:	2b0c      	cmp	r3, #12
 80036f6:	d829      	bhi.n	800374c <UART_SetConfig+0x130>
 80036f8:	a201      	add	r2, pc, #4	; (adr r2, 8003700 <UART_SetConfig+0xe4>)
 80036fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036fe:	bf00      	nop
 8003700:	08003735 	.word	0x08003735
 8003704:	0800374d 	.word	0x0800374d
 8003708:	0800374d 	.word	0x0800374d
 800370c:	0800374d 	.word	0x0800374d
 8003710:	08003741 	.word	0x08003741
 8003714:	0800374d 	.word	0x0800374d
 8003718:	0800374d 	.word	0x0800374d
 800371c:	0800374d 	.word	0x0800374d
 8003720:	0800373b 	.word	0x0800373b
 8003724:	0800374d 	.word	0x0800374d
 8003728:	0800374d 	.word	0x0800374d
 800372c:	0800374d 	.word	0x0800374d
 8003730:	08003747 	.word	0x08003747
 8003734:	2300      	movs	r3, #0
 8003736:	77fb      	strb	r3, [r7, #31]
 8003738:	e117      	b.n	800396a <UART_SetConfig+0x34e>
 800373a:	2302      	movs	r3, #2
 800373c:	77fb      	strb	r3, [r7, #31]
 800373e:	e114      	b.n	800396a <UART_SetConfig+0x34e>
 8003740:	2304      	movs	r3, #4
 8003742:	77fb      	strb	r3, [r7, #31]
 8003744:	e111      	b.n	800396a <UART_SetConfig+0x34e>
 8003746:	2308      	movs	r3, #8
 8003748:	77fb      	strb	r3, [r7, #31]
 800374a:	e10e      	b.n	800396a <UART_SetConfig+0x34e>
 800374c:	2310      	movs	r3, #16
 800374e:	77fb      	strb	r3, [r7, #31]
 8003750:	bf00      	nop
 8003752:	e10a      	b.n	800396a <UART_SetConfig+0x34e>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a71      	ldr	r2, [pc, #452]	; (8003920 <UART_SetConfig+0x304>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d120      	bne.n	80037a0 <UART_SetConfig+0x184>
 800375e:	4b6e      	ldr	r3, [pc, #440]	; (8003918 <UART_SetConfig+0x2fc>)
 8003760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003764:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003768:	2b10      	cmp	r3, #16
 800376a:	d00f      	beq.n	800378c <UART_SetConfig+0x170>
 800376c:	2b10      	cmp	r3, #16
 800376e:	d802      	bhi.n	8003776 <UART_SetConfig+0x15a>
 8003770:	2b00      	cmp	r3, #0
 8003772:	d005      	beq.n	8003780 <UART_SetConfig+0x164>
 8003774:	e010      	b.n	8003798 <UART_SetConfig+0x17c>
 8003776:	2b20      	cmp	r3, #32
 8003778:	d005      	beq.n	8003786 <UART_SetConfig+0x16a>
 800377a:	2b30      	cmp	r3, #48	; 0x30
 800377c:	d009      	beq.n	8003792 <UART_SetConfig+0x176>
 800377e:	e00b      	b.n	8003798 <UART_SetConfig+0x17c>
 8003780:	2300      	movs	r3, #0
 8003782:	77fb      	strb	r3, [r7, #31]
 8003784:	e0f1      	b.n	800396a <UART_SetConfig+0x34e>
 8003786:	2302      	movs	r3, #2
 8003788:	77fb      	strb	r3, [r7, #31]
 800378a:	e0ee      	b.n	800396a <UART_SetConfig+0x34e>
 800378c:	2304      	movs	r3, #4
 800378e:	77fb      	strb	r3, [r7, #31]
 8003790:	e0eb      	b.n	800396a <UART_SetConfig+0x34e>
 8003792:	2308      	movs	r3, #8
 8003794:	77fb      	strb	r3, [r7, #31]
 8003796:	e0e8      	b.n	800396a <UART_SetConfig+0x34e>
 8003798:	2310      	movs	r3, #16
 800379a:	77fb      	strb	r3, [r7, #31]
 800379c:	bf00      	nop
 800379e:	e0e4      	b.n	800396a <UART_SetConfig+0x34e>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a5f      	ldr	r2, [pc, #380]	; (8003924 <UART_SetConfig+0x308>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d120      	bne.n	80037ec <UART_SetConfig+0x1d0>
 80037aa:	4b5b      	ldr	r3, [pc, #364]	; (8003918 <UART_SetConfig+0x2fc>)
 80037ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80037b4:	2b40      	cmp	r3, #64	; 0x40
 80037b6:	d00f      	beq.n	80037d8 <UART_SetConfig+0x1bc>
 80037b8:	2b40      	cmp	r3, #64	; 0x40
 80037ba:	d802      	bhi.n	80037c2 <UART_SetConfig+0x1a6>
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d005      	beq.n	80037cc <UART_SetConfig+0x1b0>
 80037c0:	e010      	b.n	80037e4 <UART_SetConfig+0x1c8>
 80037c2:	2b80      	cmp	r3, #128	; 0x80
 80037c4:	d005      	beq.n	80037d2 <UART_SetConfig+0x1b6>
 80037c6:	2bc0      	cmp	r3, #192	; 0xc0
 80037c8:	d009      	beq.n	80037de <UART_SetConfig+0x1c2>
 80037ca:	e00b      	b.n	80037e4 <UART_SetConfig+0x1c8>
 80037cc:	2300      	movs	r3, #0
 80037ce:	77fb      	strb	r3, [r7, #31]
 80037d0:	e0cb      	b.n	800396a <UART_SetConfig+0x34e>
 80037d2:	2302      	movs	r3, #2
 80037d4:	77fb      	strb	r3, [r7, #31]
 80037d6:	e0c8      	b.n	800396a <UART_SetConfig+0x34e>
 80037d8:	2304      	movs	r3, #4
 80037da:	77fb      	strb	r3, [r7, #31]
 80037dc:	e0c5      	b.n	800396a <UART_SetConfig+0x34e>
 80037de:	2308      	movs	r3, #8
 80037e0:	77fb      	strb	r3, [r7, #31]
 80037e2:	e0c2      	b.n	800396a <UART_SetConfig+0x34e>
 80037e4:	2310      	movs	r3, #16
 80037e6:	77fb      	strb	r3, [r7, #31]
 80037e8:	bf00      	nop
 80037ea:	e0be      	b.n	800396a <UART_SetConfig+0x34e>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a4d      	ldr	r2, [pc, #308]	; (8003928 <UART_SetConfig+0x30c>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d124      	bne.n	8003840 <UART_SetConfig+0x224>
 80037f6:	4b48      	ldr	r3, [pc, #288]	; (8003918 <UART_SetConfig+0x2fc>)
 80037f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003800:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003804:	d012      	beq.n	800382c <UART_SetConfig+0x210>
 8003806:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800380a:	d802      	bhi.n	8003812 <UART_SetConfig+0x1f6>
 800380c:	2b00      	cmp	r3, #0
 800380e:	d007      	beq.n	8003820 <UART_SetConfig+0x204>
 8003810:	e012      	b.n	8003838 <UART_SetConfig+0x21c>
 8003812:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003816:	d006      	beq.n	8003826 <UART_SetConfig+0x20a>
 8003818:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800381c:	d009      	beq.n	8003832 <UART_SetConfig+0x216>
 800381e:	e00b      	b.n	8003838 <UART_SetConfig+0x21c>
 8003820:	2300      	movs	r3, #0
 8003822:	77fb      	strb	r3, [r7, #31]
 8003824:	e0a1      	b.n	800396a <UART_SetConfig+0x34e>
 8003826:	2302      	movs	r3, #2
 8003828:	77fb      	strb	r3, [r7, #31]
 800382a:	e09e      	b.n	800396a <UART_SetConfig+0x34e>
 800382c:	2304      	movs	r3, #4
 800382e:	77fb      	strb	r3, [r7, #31]
 8003830:	e09b      	b.n	800396a <UART_SetConfig+0x34e>
 8003832:	2308      	movs	r3, #8
 8003834:	77fb      	strb	r3, [r7, #31]
 8003836:	e098      	b.n	800396a <UART_SetConfig+0x34e>
 8003838:	2310      	movs	r3, #16
 800383a:	77fb      	strb	r3, [r7, #31]
 800383c:	bf00      	nop
 800383e:	e094      	b.n	800396a <UART_SetConfig+0x34e>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a39      	ldr	r2, [pc, #228]	; (800392c <UART_SetConfig+0x310>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d124      	bne.n	8003894 <UART_SetConfig+0x278>
 800384a:	4b33      	ldr	r3, [pc, #204]	; (8003918 <UART_SetConfig+0x2fc>)
 800384c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003850:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003854:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003858:	d012      	beq.n	8003880 <UART_SetConfig+0x264>
 800385a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800385e:	d802      	bhi.n	8003866 <UART_SetConfig+0x24a>
 8003860:	2b00      	cmp	r3, #0
 8003862:	d007      	beq.n	8003874 <UART_SetConfig+0x258>
 8003864:	e012      	b.n	800388c <UART_SetConfig+0x270>
 8003866:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800386a:	d006      	beq.n	800387a <UART_SetConfig+0x25e>
 800386c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003870:	d009      	beq.n	8003886 <UART_SetConfig+0x26a>
 8003872:	e00b      	b.n	800388c <UART_SetConfig+0x270>
 8003874:	2301      	movs	r3, #1
 8003876:	77fb      	strb	r3, [r7, #31]
 8003878:	e077      	b.n	800396a <UART_SetConfig+0x34e>
 800387a:	2302      	movs	r3, #2
 800387c:	77fb      	strb	r3, [r7, #31]
 800387e:	e074      	b.n	800396a <UART_SetConfig+0x34e>
 8003880:	2304      	movs	r3, #4
 8003882:	77fb      	strb	r3, [r7, #31]
 8003884:	e071      	b.n	800396a <UART_SetConfig+0x34e>
 8003886:	2308      	movs	r3, #8
 8003888:	77fb      	strb	r3, [r7, #31]
 800388a:	e06e      	b.n	800396a <UART_SetConfig+0x34e>
 800388c:	2310      	movs	r3, #16
 800388e:	77fb      	strb	r3, [r7, #31]
 8003890:	bf00      	nop
 8003892:	e06a      	b.n	800396a <UART_SetConfig+0x34e>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a25      	ldr	r2, [pc, #148]	; (8003930 <UART_SetConfig+0x314>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d124      	bne.n	80038e8 <UART_SetConfig+0x2cc>
 800389e:	4b1e      	ldr	r3, [pc, #120]	; (8003918 <UART_SetConfig+0x2fc>)
 80038a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80038a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038ac:	d012      	beq.n	80038d4 <UART_SetConfig+0x2b8>
 80038ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038b2:	d802      	bhi.n	80038ba <UART_SetConfig+0x29e>
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d007      	beq.n	80038c8 <UART_SetConfig+0x2ac>
 80038b8:	e012      	b.n	80038e0 <UART_SetConfig+0x2c4>
 80038ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038be:	d006      	beq.n	80038ce <UART_SetConfig+0x2b2>
 80038c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80038c4:	d009      	beq.n	80038da <UART_SetConfig+0x2be>
 80038c6:	e00b      	b.n	80038e0 <UART_SetConfig+0x2c4>
 80038c8:	2300      	movs	r3, #0
 80038ca:	77fb      	strb	r3, [r7, #31]
 80038cc:	e04d      	b.n	800396a <UART_SetConfig+0x34e>
 80038ce:	2302      	movs	r3, #2
 80038d0:	77fb      	strb	r3, [r7, #31]
 80038d2:	e04a      	b.n	800396a <UART_SetConfig+0x34e>
 80038d4:	2304      	movs	r3, #4
 80038d6:	77fb      	strb	r3, [r7, #31]
 80038d8:	e047      	b.n	800396a <UART_SetConfig+0x34e>
 80038da:	2308      	movs	r3, #8
 80038dc:	77fb      	strb	r3, [r7, #31]
 80038de:	e044      	b.n	800396a <UART_SetConfig+0x34e>
 80038e0:	2310      	movs	r3, #16
 80038e2:	77fb      	strb	r3, [r7, #31]
 80038e4:	bf00      	nop
 80038e6:	e040      	b.n	800396a <UART_SetConfig+0x34e>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a11      	ldr	r2, [pc, #68]	; (8003934 <UART_SetConfig+0x318>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d139      	bne.n	8003966 <UART_SetConfig+0x34a>
 80038f2:	4b09      	ldr	r3, [pc, #36]	; (8003918 <UART_SetConfig+0x2fc>)
 80038f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80038fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003900:	d027      	beq.n	8003952 <UART_SetConfig+0x336>
 8003902:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003906:	d817      	bhi.n	8003938 <UART_SetConfig+0x31c>
 8003908:	2b00      	cmp	r3, #0
 800390a:	d01c      	beq.n	8003946 <UART_SetConfig+0x32a>
 800390c:	e027      	b.n	800395e <UART_SetConfig+0x342>
 800390e:	bf00      	nop
 8003910:	efff69f3 	.word	0xefff69f3
 8003914:	40011000 	.word	0x40011000
 8003918:	40023800 	.word	0x40023800
 800391c:	40004400 	.word	0x40004400
 8003920:	40004800 	.word	0x40004800
 8003924:	40004c00 	.word	0x40004c00
 8003928:	40005000 	.word	0x40005000
 800392c:	40011400 	.word	0x40011400
 8003930:	40007800 	.word	0x40007800
 8003934:	40007c00 	.word	0x40007c00
 8003938:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800393c:	d006      	beq.n	800394c <UART_SetConfig+0x330>
 800393e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003942:	d009      	beq.n	8003958 <UART_SetConfig+0x33c>
 8003944:	e00b      	b.n	800395e <UART_SetConfig+0x342>
 8003946:	2300      	movs	r3, #0
 8003948:	77fb      	strb	r3, [r7, #31]
 800394a:	e00e      	b.n	800396a <UART_SetConfig+0x34e>
 800394c:	2302      	movs	r3, #2
 800394e:	77fb      	strb	r3, [r7, #31]
 8003950:	e00b      	b.n	800396a <UART_SetConfig+0x34e>
 8003952:	2304      	movs	r3, #4
 8003954:	77fb      	strb	r3, [r7, #31]
 8003956:	e008      	b.n	800396a <UART_SetConfig+0x34e>
 8003958:	2308      	movs	r3, #8
 800395a:	77fb      	strb	r3, [r7, #31]
 800395c:	e005      	b.n	800396a <UART_SetConfig+0x34e>
 800395e:	2310      	movs	r3, #16
 8003960:	77fb      	strb	r3, [r7, #31]
 8003962:	bf00      	nop
 8003964:	e001      	b.n	800396a <UART_SetConfig+0x34e>
 8003966:	2310      	movs	r3, #16
 8003968:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	69db      	ldr	r3, [r3, #28]
 800396e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003972:	d17f      	bne.n	8003a74 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8003974:	7ffb      	ldrb	r3, [r7, #31]
 8003976:	2b08      	cmp	r3, #8
 8003978:	d85c      	bhi.n	8003a34 <UART_SetConfig+0x418>
 800397a:	a201      	add	r2, pc, #4	; (adr r2, 8003980 <UART_SetConfig+0x364>)
 800397c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003980:	080039a5 	.word	0x080039a5
 8003984:	080039c5 	.word	0x080039c5
 8003988:	080039e5 	.word	0x080039e5
 800398c:	08003a35 	.word	0x08003a35
 8003990:	080039fd 	.word	0x080039fd
 8003994:	08003a35 	.word	0x08003a35
 8003998:	08003a35 	.word	0x08003a35
 800399c:	08003a35 	.word	0x08003a35
 80039a0:	08003a1d 	.word	0x08003a1d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039a4:	f7fe fee2 	bl	800276c <HAL_RCC_GetPCLK1Freq>
 80039a8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	005a      	lsls	r2, r3, #1
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	085b      	lsrs	r3, r3, #1
 80039b4:	441a      	add	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80039be:	b29b      	uxth	r3, r3
 80039c0:	61bb      	str	r3, [r7, #24]
        break;
 80039c2:	e03a      	b.n	8003a3a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039c4:	f7fe fee6 	bl	8002794 <HAL_RCC_GetPCLK2Freq>
 80039c8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	005a      	lsls	r2, r3, #1
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	085b      	lsrs	r3, r3, #1
 80039d4:	441a      	add	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	fbb2 f3f3 	udiv	r3, r2, r3
 80039de:	b29b      	uxth	r3, r3
 80039e0:	61bb      	str	r3, [r7, #24]
        break;
 80039e2:	e02a      	b.n	8003a3a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	085a      	lsrs	r2, r3, #1
 80039ea:	4b5f      	ldr	r3, [pc, #380]	; (8003b68 <UART_SetConfig+0x54c>)
 80039ec:	4413      	add	r3, r2
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	6852      	ldr	r2, [r2, #4]
 80039f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	61bb      	str	r3, [r7, #24]
        break;
 80039fa:	e01e      	b.n	8003a3a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039fc:	f7fe fdd2 	bl	80025a4 <HAL_RCC_GetSysClockFreq>
 8003a00:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	005a      	lsls	r2, r3, #1
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	085b      	lsrs	r3, r3, #1
 8003a0c:	441a      	add	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	61bb      	str	r3, [r7, #24]
        break;
 8003a1a:	e00e      	b.n	8003a3a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	085b      	lsrs	r3, r3, #1
 8003a22:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	61bb      	str	r3, [r7, #24]
        break;
 8003a32:	e002      	b.n	8003a3a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	75fb      	strb	r3, [r7, #23]
        break;
 8003a38:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	2b0f      	cmp	r3, #15
 8003a3e:	d916      	bls.n	8003a6e <UART_SetConfig+0x452>
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a46:	d212      	bcs.n	8003a6e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	f023 030f 	bic.w	r3, r3, #15
 8003a50:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	085b      	lsrs	r3, r3, #1
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	f003 0307 	and.w	r3, r3, #7
 8003a5c:	b29a      	uxth	r2, r3
 8003a5e:	897b      	ldrh	r3, [r7, #10]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	897a      	ldrh	r2, [r7, #10]
 8003a6a:	60da      	str	r2, [r3, #12]
 8003a6c:	e070      	b.n	8003b50 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	75fb      	strb	r3, [r7, #23]
 8003a72:	e06d      	b.n	8003b50 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8003a74:	7ffb      	ldrb	r3, [r7, #31]
 8003a76:	2b08      	cmp	r3, #8
 8003a78:	d859      	bhi.n	8003b2e <UART_SetConfig+0x512>
 8003a7a:	a201      	add	r2, pc, #4	; (adr r2, 8003a80 <UART_SetConfig+0x464>)
 8003a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a80:	08003aa5 	.word	0x08003aa5
 8003a84:	08003ac3 	.word	0x08003ac3
 8003a88:	08003ae1 	.word	0x08003ae1
 8003a8c:	08003b2f 	.word	0x08003b2f
 8003a90:	08003af9 	.word	0x08003af9
 8003a94:	08003b2f 	.word	0x08003b2f
 8003a98:	08003b2f 	.word	0x08003b2f
 8003a9c:	08003b2f 	.word	0x08003b2f
 8003aa0:	08003b17 	.word	0x08003b17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003aa4:	f7fe fe62 	bl	800276c <HAL_RCC_GetPCLK1Freq>
 8003aa8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	085a      	lsrs	r2, r3, #1
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	441a      	add	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	61bb      	str	r3, [r7, #24]
        break;
 8003ac0:	e038      	b.n	8003b34 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ac2:	f7fe fe67 	bl	8002794 <HAL_RCC_GetPCLK2Freq>
 8003ac6:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	085a      	lsrs	r2, r3, #1
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	441a      	add	r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	61bb      	str	r3, [r7, #24]
        break;
 8003ade:	e029      	b.n	8003b34 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	085a      	lsrs	r2, r3, #1
 8003ae6:	4b21      	ldr	r3, [pc, #132]	; (8003b6c <UART_SetConfig+0x550>)
 8003ae8:	4413      	add	r3, r2
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	6852      	ldr	r2, [r2, #4]
 8003aee:	fbb3 f3f2 	udiv	r3, r3, r2
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	61bb      	str	r3, [r7, #24]
        break;
 8003af6:	e01d      	b.n	8003b34 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003af8:	f7fe fd54 	bl	80025a4 <HAL_RCC_GetSysClockFreq>
 8003afc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	085a      	lsrs	r2, r3, #1
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	441a      	add	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	61bb      	str	r3, [r7, #24]
        break;
 8003b14:	e00e      	b.n	8003b34 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	085b      	lsrs	r3, r3, #1
 8003b1c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	61bb      	str	r3, [r7, #24]
        break;
 8003b2c:	e002      	b.n	8003b34 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	75fb      	strb	r3, [r7, #23]
        break;
 8003b32:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	2b0f      	cmp	r3, #15
 8003b38:	d908      	bls.n	8003b4c <UART_SetConfig+0x530>
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b40:	d204      	bcs.n	8003b4c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	60da      	str	r2, [r3, #12]
 8003b4a:	e001      	b.n	8003b50 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003b5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3720      	adds	r7, #32
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	01e84800 	.word	0x01e84800
 8003b6c:	00f42400 	.word	0x00f42400

08003b70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00a      	beq.n	8003b9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00a      	beq.n	8003bbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc0:	f003 0304 	and.w	r3, r3, #4
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00a      	beq.n	8003bde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be2:	f003 0308 	and.w	r3, r3, #8
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00a      	beq.n	8003c00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c04:	f003 0310 	and.w	r3, r3, #16
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00a      	beq.n	8003c22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c26:	f003 0320 	and.w	r3, r3, #32
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00a      	beq.n	8003c44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	430a      	orrs	r2, r1
 8003c42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d01a      	beq.n	8003c86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	430a      	orrs	r2, r1
 8003c64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c6e:	d10a      	bne.n	8003c86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00a      	beq.n	8003ca8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	605a      	str	r2, [r3, #4]
  }
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b086      	sub	sp, #24
 8003cb8:	af02      	add	r7, sp, #8
 8003cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003cc2:	f7fd fc33 	bl	800152c <HAL_GetTick>
 8003cc6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0308 	and.w	r3, r3, #8
 8003cd2:	2b08      	cmp	r3, #8
 8003cd4:	d10e      	bne.n	8003cf4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cd6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cda:	9300      	str	r3, [sp, #0]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 f814 	bl	8003d12 <UART_WaitOnFlagUntilTimeout>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d001      	beq.n	8003cf4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e00a      	b.n	8003d0a <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2220      	movs	r2, #32
 8003cf8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2220      	movs	r2, #32
 8003cfe:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b084      	sub	sp, #16
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	60f8      	str	r0, [r7, #12]
 8003d1a:	60b9      	str	r1, [r7, #8]
 8003d1c:	603b      	str	r3, [r7, #0]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d22:	e05d      	b.n	8003de0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d2a:	d059      	beq.n	8003de0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d2c:	f7fd fbfe 	bl	800152c <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	69ba      	ldr	r2, [r7, #24]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d302      	bcc.n	8003d42 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d11b      	bne.n	8003d7a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d50:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	689a      	ldr	r2, [r3, #8]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f022 0201 	bic.w	r2, r2, #1
 8003d60:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2220      	movs	r2, #32
 8003d66:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e042      	b.n	8003e00 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0304 	and.w	r3, r3, #4
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d02b      	beq.n	8003de0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	69db      	ldr	r3, [r3, #28]
 8003d8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d96:	d123      	bne.n	8003de0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003da0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003db0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 0201 	bic.w	r2, r2, #1
 8003dc0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2220      	movs	r2, #32
 8003dcc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2220      	movs	r2, #32
 8003dd2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e00f      	b.n	8003e00 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	69da      	ldr	r2, [r3, #28]
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	4013      	ands	r3, r2
 8003dea:	68ba      	ldr	r2, [r7, #8]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	bf0c      	ite	eq
 8003df0:	2301      	moveq	r3, #1
 8003df2:	2300      	movne	r3, #0
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	461a      	mov	r2, r3
 8003df8:	79fb      	ldrb	r3, [r7, #7]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d092      	beq.n	8003d24 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3710      	adds	r7, #16
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003e08:	b084      	sub	sp, #16
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b084      	sub	sp, #16
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
 8003e12:	f107 001c 	add.w	r0, r7, #28
 8003e16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d120      	bne.n	8003e62 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	68da      	ldr	r2, [r3, #12]
 8003e30:	4b20      	ldr	r3, [pc, #128]	; (8003eb4 <USB_CoreInit+0xac>)
 8003e32:	4013      	ands	r3, r2
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003e44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d105      	bne.n	8003e56 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 fa52 	bl	8004300 <USB_CoreReset>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	73fb      	strb	r3, [r7, #15]
 8003e60:	e010      	b.n	8003e84 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 fa46 	bl	8004300 <USB_CoreReset>
 8003e74:	4603      	mov	r3, r0
 8003e76:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8003e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d10b      	bne.n	8003ea2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f043 0206 	orr.w	r2, r3, #6
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f043 0220 	orr.w	r2, r3, #32
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3710      	adds	r7, #16
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003eae:	b004      	add	sp, #16
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	ffbdffbf 	.word	0xffbdffbf

08003eb8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f023 0201 	bic.w	r2, r3, #1
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b082      	sub	sp, #8
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003ef2:	78fb      	ldrb	r3, [r7, #3]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d106      	bne.n	8003f06 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	60da      	str	r2, [r3, #12]
 8003f04:	e00b      	b.n	8003f1e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003f06:	78fb      	ldrb	r3, [r7, #3]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d106      	bne.n	8003f1a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	60da      	str	r2, [r3, #12]
 8003f18:	e001      	b.n	8003f1e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e003      	b.n	8003f26 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003f1e:	2032      	movs	r0, #50	; 0x32
 8003f20:	f7fd fb10 	bl	8001544 <HAL_Delay>

  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3708      	adds	r7, #8
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
	...

08003f30 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f30:	b084      	sub	sp, #16
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b086      	sub	sp, #24
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
 8003f3a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003f3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003f42:	2300      	movs	r3, #0
 8003f44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	613b      	str	r3, [r7, #16]
 8003f4e:	e009      	b.n	8003f64 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	3340      	adds	r3, #64	; 0x40
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	4413      	add	r3, r2
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	3301      	adds	r3, #1
 8003f62:	613b      	str	r3, [r7, #16]
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	2b0e      	cmp	r3, #14
 8003f68:	d9f2      	bls.n	8003f50 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003f6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d11c      	bne.n	8003faa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f7e:	f043 0302 	orr.w	r3, r3, #2
 8003f82:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f88:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	601a      	str	r2, [r3, #0]
 8003fa8:	e005      	b.n	8003fb6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fc8:	4619      	mov	r1, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	680b      	ldr	r3, [r1, #0]
 8003fd4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d10c      	bne.n	8003ff6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d104      	bne.n	8003fec <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003fe2:	2100      	movs	r1, #0
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f000 f959 	bl	800429c <USB_SetDevSpeed>
 8003fea:	e018      	b.n	800401e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003fec:	2101      	movs	r1, #1
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 f954 	bl	800429c <USB_SetDevSpeed>
 8003ff4:	e013      	b.n	800401e <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8003ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff8:	2b03      	cmp	r3, #3
 8003ffa:	d10c      	bne.n	8004016 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d104      	bne.n	800400c <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004002:	2100      	movs	r1, #0
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 f949 	bl	800429c <USB_SetDevSpeed>
 800400a:	e008      	b.n	800401e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800400c:	2101      	movs	r1, #1
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 f944 	bl	800429c <USB_SetDevSpeed>
 8004014:	e003      	b.n	800401e <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004016:	2103      	movs	r1, #3
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 f93f 	bl	800429c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800401e:	2110      	movs	r1, #16
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 f8f3 	bl	800420c <USB_FlushTxFifo>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d001      	beq.n	8004030 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f000 f911 	bl	8004258 <USB_FlushRxFifo>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d001      	beq.n	8004040 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004046:	461a      	mov	r2, r3
 8004048:	2300      	movs	r3, #0
 800404a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004052:	461a      	mov	r2, r3
 8004054:	2300      	movs	r3, #0
 8004056:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800405e:	461a      	mov	r2, r3
 8004060:	2300      	movs	r3, #0
 8004062:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004064:	2300      	movs	r3, #0
 8004066:	613b      	str	r3, [r7, #16]
 8004068:	e043      	b.n	80040f2 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	015a      	lsls	r2, r3, #5
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	4413      	add	r3, r2
 8004072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800407c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004080:	d118      	bne.n	80040b4 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d10a      	bne.n	800409e <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	015a      	lsls	r2, r3, #5
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	4413      	add	r3, r2
 8004090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004094:	461a      	mov	r2, r3
 8004096:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800409a:	6013      	str	r3, [r2, #0]
 800409c:	e013      	b.n	80040c6 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	015a      	lsls	r2, r3, #5
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	4413      	add	r3, r2
 80040a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040aa:	461a      	mov	r2, r3
 80040ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80040b0:	6013      	str	r3, [r2, #0]
 80040b2:	e008      	b.n	80040c6 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	015a      	lsls	r2, r3, #5
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	4413      	add	r3, r2
 80040bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040c0:	461a      	mov	r2, r3
 80040c2:	2300      	movs	r3, #0
 80040c4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	015a      	lsls	r2, r3, #5
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	4413      	add	r3, r2
 80040ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040d2:	461a      	mov	r2, r3
 80040d4:	2300      	movs	r3, #0
 80040d6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	015a      	lsls	r2, r3, #5
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	4413      	add	r3, r2
 80040e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040e4:	461a      	mov	r2, r3
 80040e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80040ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	3301      	adds	r3, #1
 80040f0:	613b      	str	r3, [r7, #16]
 80040f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d3b7      	bcc.n	800406a <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040fa:	2300      	movs	r3, #0
 80040fc:	613b      	str	r3, [r7, #16]
 80040fe:	e043      	b.n	8004188 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	015a      	lsls	r2, r3, #5
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	4413      	add	r3, r2
 8004108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004112:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004116:	d118      	bne.n	800414a <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d10a      	bne.n	8004134 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	015a      	lsls	r2, r3, #5
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	4413      	add	r3, r2
 8004126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800412a:	461a      	mov	r2, r3
 800412c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004130:	6013      	str	r3, [r2, #0]
 8004132:	e013      	b.n	800415c <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	015a      	lsls	r2, r3, #5
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	4413      	add	r3, r2
 800413c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004140:	461a      	mov	r2, r3
 8004142:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004146:	6013      	str	r3, [r2, #0]
 8004148:	e008      	b.n	800415c <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	015a      	lsls	r2, r3, #5
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	4413      	add	r3, r2
 8004152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004156:	461a      	mov	r2, r3
 8004158:	2300      	movs	r3, #0
 800415a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	015a      	lsls	r2, r3, #5
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	4413      	add	r3, r2
 8004164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004168:	461a      	mov	r2, r3
 800416a:	2300      	movs	r3, #0
 800416c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	015a      	lsls	r2, r3, #5
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	4413      	add	r3, r2
 8004176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800417a:	461a      	mov	r2, r3
 800417c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004180:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	3301      	adds	r3, #1
 8004186:	613b      	str	r3, [r7, #16]
 8004188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	429a      	cmp	r2, r3
 800418e:	d3b7      	bcc.n	8004100 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800419e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041a2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80041b0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80041b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d105      	bne.n	80041c4 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	f043 0210 	orr.w	r2, r3, #16
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	699a      	ldr	r2, [r3, #24]
 80041c8:	4b0e      	ldr	r3, [pc, #56]	; (8004204 <USB_DevInit+0x2d4>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80041d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d005      	beq.n	80041e2 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	f043 0208 	orr.w	r2, r3, #8
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80041e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d105      	bne.n	80041f4 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	699a      	ldr	r2, [r3, #24]
 80041ec:	4b06      	ldr	r3, [pc, #24]	; (8004208 <USB_DevInit+0x2d8>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80041f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3718      	adds	r7, #24
 80041fa:	46bd      	mov	sp, r7
 80041fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004200:	b004      	add	sp, #16
 8004202:	4770      	bx	lr
 8004204:	803c3800 	.word	0x803c3800
 8004208:	40000004 	.word	0x40000004

0800420c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004216:	2300      	movs	r3, #0
 8004218:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	019b      	lsls	r3, r3, #6
 800421e:	f043 0220 	orr.w	r2, r3, #32
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	3301      	adds	r3, #1
 800422a:	60fb      	str	r3, [r7, #12]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	4a09      	ldr	r2, [pc, #36]	; (8004254 <USB_FlushTxFifo+0x48>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d901      	bls.n	8004238 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e006      	b.n	8004246 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	f003 0320 	and.w	r3, r3, #32
 8004240:	2b20      	cmp	r3, #32
 8004242:	d0f0      	beq.n	8004226 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3714      	adds	r7, #20
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	00030d40 	.word	0x00030d40

08004258 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004258:	b480      	push	{r7}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004260:	2300      	movs	r3, #0
 8004262:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2210      	movs	r2, #16
 8004268:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	3301      	adds	r3, #1
 800426e:	60fb      	str	r3, [r7, #12]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	4a09      	ldr	r2, [pc, #36]	; (8004298 <USB_FlushRxFifo+0x40>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d901      	bls.n	800427c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e006      	b.n	800428a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	f003 0310 	and.w	r3, r3, #16
 8004284:	2b10      	cmp	r3, #16
 8004286:	d0f0      	beq.n	800426a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3714      	adds	r7, #20
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	00030d40 	.word	0x00030d40

0800429c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	460b      	mov	r3, r1
 80042a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	78fb      	ldrb	r3, [r7, #3]
 80042b6:	68f9      	ldr	r1, [r7, #12]
 80042b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042bc:	4313      	orrs	r3, r2
 80042be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3714      	adds	r7, #20
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr

080042ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b084      	sub	sp, #16
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042e8:	f043 0302 	orr.w	r3, r3, #2
 80042ec:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80042ee:	2003      	movs	r0, #3
 80042f0:	f7fd f928 	bl	8001544 <HAL_Delay>

  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
	...

08004300 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004308:	2300      	movs	r3, #0
 800430a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	3301      	adds	r3, #1
 8004310:	60fb      	str	r3, [r7, #12]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	4a13      	ldr	r2, [pc, #76]	; (8004364 <USB_CoreReset+0x64>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d901      	bls.n	800431e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e01b      	b.n	8004356 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	2b00      	cmp	r3, #0
 8004324:	daf2      	bge.n	800430c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004326:	2300      	movs	r3, #0
 8004328:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	f043 0201 	orr.w	r2, r3, #1
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	3301      	adds	r3, #1
 800433a:	60fb      	str	r3, [r7, #12]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	4a09      	ldr	r2, [pc, #36]	; (8004364 <USB_CoreReset+0x64>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d901      	bls.n	8004348 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e006      	b.n	8004356 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	f003 0301 	and.w	r3, r3, #1
 8004350:	2b01      	cmp	r3, #1
 8004352:	d0f0      	beq.n	8004336 <USB_CoreReset+0x36>

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3714      	adds	r7, #20
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	00030d40 	.word	0x00030d40

08004368 <__libc_init_array>:
 8004368:	b570      	push	{r4, r5, r6, lr}
 800436a:	4e0d      	ldr	r6, [pc, #52]	; (80043a0 <__libc_init_array+0x38>)
 800436c:	4c0d      	ldr	r4, [pc, #52]	; (80043a4 <__libc_init_array+0x3c>)
 800436e:	1ba4      	subs	r4, r4, r6
 8004370:	10a4      	asrs	r4, r4, #2
 8004372:	2500      	movs	r5, #0
 8004374:	42a5      	cmp	r5, r4
 8004376:	d109      	bne.n	800438c <__libc_init_array+0x24>
 8004378:	4e0b      	ldr	r6, [pc, #44]	; (80043a8 <__libc_init_array+0x40>)
 800437a:	4c0c      	ldr	r4, [pc, #48]	; (80043ac <__libc_init_array+0x44>)
 800437c:	f000 f820 	bl	80043c0 <_init>
 8004380:	1ba4      	subs	r4, r4, r6
 8004382:	10a4      	asrs	r4, r4, #2
 8004384:	2500      	movs	r5, #0
 8004386:	42a5      	cmp	r5, r4
 8004388:	d105      	bne.n	8004396 <__libc_init_array+0x2e>
 800438a:	bd70      	pop	{r4, r5, r6, pc}
 800438c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004390:	4798      	blx	r3
 8004392:	3501      	adds	r5, #1
 8004394:	e7ee      	b.n	8004374 <__libc_init_array+0xc>
 8004396:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800439a:	4798      	blx	r3
 800439c:	3501      	adds	r5, #1
 800439e:	e7f2      	b.n	8004386 <__libc_init_array+0x1e>
 80043a0:	080043f8 	.word	0x080043f8
 80043a4:	080043f8 	.word	0x080043f8
 80043a8:	080043f8 	.word	0x080043f8
 80043ac:	080043fc 	.word	0x080043fc

080043b0 <memset>:
 80043b0:	4402      	add	r2, r0
 80043b2:	4603      	mov	r3, r0
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d100      	bne.n	80043ba <memset+0xa>
 80043b8:	4770      	bx	lr
 80043ba:	f803 1b01 	strb.w	r1, [r3], #1
 80043be:	e7f9      	b.n	80043b4 <memset+0x4>

080043c0 <_init>:
 80043c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043c2:	bf00      	nop
 80043c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043c6:	bc08      	pop	{r3}
 80043c8:	469e      	mov	lr, r3
 80043ca:	4770      	bx	lr

080043cc <_fini>:
 80043cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ce:	bf00      	nop
 80043d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043d2:	bc08      	pop	{r3}
 80043d4:	469e      	mov	lr, r3
 80043d6:	4770      	bx	lr
