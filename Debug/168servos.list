
168servos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002440  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002608  08002608  00012608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002618  08002618  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002618  08002618  00012618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002620  08002620  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002620  08002620  00012620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002624  08002624  00012624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002628  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019c8  2000000c  08002634  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200019d4  08002634  000219d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b072  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b5c  00000000  00000000  0002b0ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ae8  00000000  00000000  0002cc10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009f0  00000000  00000000  0002d6f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024dc7  00000000  00000000  0002e0e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008d4b  00000000  00000000  00052eaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e5506  00000000  00000000  0005bbfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00141100  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bd0  00000000  00000000  0014117c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080025f0 	.word	0x080025f0

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	080025f0 	.word	0x080025f0

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000218:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800021c:	f000 b972 	b.w	8000504 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	4688      	mov	r8, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14b      	bne.n	80002de <__udivmoddi4+0xa6>
 8000246:	428a      	cmp	r2, r1
 8000248:	4615      	mov	r5, r2
 800024a:	d967      	bls.n	800031c <__udivmoddi4+0xe4>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0720 	rsb	r7, r2, #32
 8000256:	fa01 f302 	lsl.w	r3, r1, r2
 800025a:	fa20 f707 	lsr.w	r7, r0, r7
 800025e:	4095      	lsls	r5, r2
 8000260:	ea47 0803 	orr.w	r8, r7, r3
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000270:	fa1f fc85 	uxth.w	ip, r5
 8000274:	fb0e 8817 	mls	r8, lr, r7, r8
 8000278:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027c:	fb07 f10c 	mul.w	r1, r7, ip
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18eb      	adds	r3, r5, r3
 8000286:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800028a:	f080 811b 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8118 	bls.w	80004c4 <__udivmoddi4+0x28c>
 8000294:	3f02      	subs	r7, #2
 8000296:	442b      	add	r3, r5
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ac:	45a4      	cmp	ip, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	192c      	adds	r4, r5, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x290>
 80002ba:	45a4      	cmp	ip, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x290>
 80002c0:	3802      	subs	r0, #2
 80002c2:	442c      	add	r4, r5
 80002c4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c8:	eba4 040c 	sub.w	r4, r4, ip
 80002cc:	2700      	movs	r7, #0
 80002ce:	b11e      	cbz	r6, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c6 4300 	strd	r4, r3, [r6]
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xbe>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80eb 	beq.w	80004be <__udivmoddi4+0x286>
 80002e8:	2700      	movs	r7, #0
 80002ea:	e9c6 0100 	strd	r0, r1, [r6]
 80002ee:	4638      	mov	r0, r7
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f783 	clz	r7, r3
 80002fa:	2f00      	cmp	r7, #0
 80002fc:	d147      	bne.n	800038e <__udivmoddi4+0x156>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd0>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80fa 	bhi.w	80004fc <__udivmoddi4+0x2c4>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4698      	mov	r8, r3
 8000312:	2e00      	cmp	r6, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000316:	e9c6 4800 	strd	r4, r8, [r6]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa0>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xe8>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 808f 	bne.w	8000448 <__udivmoddi4+0x210>
 800032a:	1b49      	subs	r1, r1, r5
 800032c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000330:	fa1f f885 	uxth.w	r8, r5
 8000334:	2701      	movs	r7, #1
 8000336:	fbb1 fcfe 	udiv	ip, r1, lr
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000340:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000344:	fb08 f10c 	mul.w	r1, r8, ip
 8000348:	4299      	cmp	r1, r3
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x124>
 800034c:	18eb      	adds	r3, r5, r3
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4299      	cmp	r1, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 800035a:	4684      	mov	ip, r0
 800035c:	1a59      	subs	r1, r3, r1
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1410 	mls	r4, lr, r0, r1
 8000368:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x14c>
 8000374:	192c      	adds	r4, r5, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x14a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80b6 	bhi.w	80004ee <__udivmoddi4+0x2b6>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e79f      	b.n	80002ce <__udivmoddi4+0x96>
 800038e:	f1c7 0c20 	rsb	ip, r7, #32
 8000392:	40bb      	lsls	r3, r7
 8000394:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000398:	ea4e 0e03 	orr.w	lr, lr, r3
 800039c:	fa01 f407 	lsl.w	r4, r1, r7
 80003a0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003ac:	4325      	orrs	r5, r4
 80003ae:	fbb3 f9f8 	udiv	r9, r3, r8
 80003b2:	0c2c      	lsrs	r4, r5, #16
 80003b4:	fb08 3319 	mls	r3, r8, r9, r3
 80003b8:	fa1f fa8e 	uxth.w	sl, lr
 80003bc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c0:	fb09 f40a 	mul.w	r4, r9, sl
 80003c4:	429c      	cmp	r4, r3
 80003c6:	fa02 f207 	lsl.w	r2, r2, r7
 80003ca:	fa00 f107 	lsl.w	r1, r0, r7
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1e 0303 	adds.w	r3, lr, r3
 80003d4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003d8:	f080 8087 	bcs.w	80004ea <__udivmoddi4+0x2b2>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f240 8084 	bls.w	80004ea <__udivmoddi4+0x2b2>
 80003e2:	f1a9 0902 	sub.w	r9, r9, #2
 80003e6:	4473      	add	r3, lr
 80003e8:	1b1b      	subs	r3, r3, r4
 80003ea:	b2ad      	uxth	r5, r5
 80003ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f0:	fb08 3310 	mls	r3, r8, r0, r3
 80003f4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003fc:	45a2      	cmp	sl, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1e 0404 	adds.w	r4, lr, r4
 8000404:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000408:	d26b      	bcs.n	80004e2 <__udivmoddi4+0x2aa>
 800040a:	45a2      	cmp	sl, r4
 800040c:	d969      	bls.n	80004e2 <__udivmoddi4+0x2aa>
 800040e:	3802      	subs	r0, #2
 8000410:	4474      	add	r4, lr
 8000412:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000416:	fba0 8902 	umull	r8, r9, r0, r2
 800041a:	eba4 040a 	sub.w	r4, r4, sl
 800041e:	454c      	cmp	r4, r9
 8000420:	46c2      	mov	sl, r8
 8000422:	464b      	mov	r3, r9
 8000424:	d354      	bcc.n	80004d0 <__udivmoddi4+0x298>
 8000426:	d051      	beq.n	80004cc <__udivmoddi4+0x294>
 8000428:	2e00      	cmp	r6, #0
 800042a:	d069      	beq.n	8000500 <__udivmoddi4+0x2c8>
 800042c:	ebb1 050a 	subs.w	r5, r1, sl
 8000430:	eb64 0403 	sbc.w	r4, r4, r3
 8000434:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000438:	40fd      	lsrs	r5, r7
 800043a:	40fc      	lsrs	r4, r7
 800043c:	ea4c 0505 	orr.w	r5, ip, r5
 8000440:	e9c6 5400 	strd	r5, r4, [r6]
 8000444:	2700      	movs	r7, #0
 8000446:	e747      	b.n	80002d8 <__udivmoddi4+0xa0>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f703 	lsr.w	r7, r0, r3
 8000450:	4095      	lsls	r5, r2
 8000452:	fa01 f002 	lsl.w	r0, r1, r2
 8000456:	fa21 f303 	lsr.w	r3, r1, r3
 800045a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045e:	4338      	orrs	r0, r7
 8000460:	0c01      	lsrs	r1, r0, #16
 8000462:	fbb3 f7fe 	udiv	r7, r3, lr
 8000466:	fa1f f885 	uxth.w	r8, r5
 800046a:	fb0e 3317 	mls	r3, lr, r7, r3
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb07 f308 	mul.w	r3, r7, r8
 8000476:	428b      	cmp	r3, r1
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x256>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000484:	d22f      	bcs.n	80004e6 <__udivmoddi4+0x2ae>
 8000486:	428b      	cmp	r3, r1
 8000488:	d92d      	bls.n	80004e6 <__udivmoddi4+0x2ae>
 800048a:	3f02      	subs	r7, #2
 800048c:	4429      	add	r1, r5
 800048e:	1acb      	subs	r3, r1, r3
 8000490:	b281      	uxth	r1, r0
 8000492:	fbb3 f0fe 	udiv	r0, r3, lr
 8000496:	fb0e 3310 	mls	r3, lr, r0, r3
 800049a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049e:	fb00 f308 	mul.w	r3, r0, r8
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x27e>
 80004a6:	1869      	adds	r1, r5, r1
 80004a8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004ac:	d217      	bcs.n	80004de <__udivmoddi4+0x2a6>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d915      	bls.n	80004de <__udivmoddi4+0x2a6>
 80004b2:	3802      	subs	r0, #2
 80004b4:	4429      	add	r1, r5
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004bc:	e73b      	b.n	8000336 <__udivmoddi4+0xfe>
 80004be:	4637      	mov	r7, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e709      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c4:	4607      	mov	r7, r0
 80004c6:	e6e7      	b.n	8000298 <__udivmoddi4+0x60>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004cc:	4541      	cmp	r1, r8
 80004ce:	d2ab      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d4:	eb69 020e 	sbc.w	r2, r9, lr
 80004d8:	3801      	subs	r0, #1
 80004da:	4613      	mov	r3, r2
 80004dc:	e7a4      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004de:	4660      	mov	r0, ip
 80004e0:	e7e9      	b.n	80004b6 <__udivmoddi4+0x27e>
 80004e2:	4618      	mov	r0, r3
 80004e4:	e795      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e6:	4667      	mov	r7, ip
 80004e8:	e7d1      	b.n	800048e <__udivmoddi4+0x256>
 80004ea:	4681      	mov	r9, r0
 80004ec:	e77c      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004ee:	3802      	subs	r0, #2
 80004f0:	442c      	add	r4, r5
 80004f2:	e747      	b.n	8000384 <__udivmoddi4+0x14c>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	442b      	add	r3, r5
 80004fa:	e72f      	b.n	800035c <__udivmoddi4+0x124>
 80004fc:	4638      	mov	r0, r7
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xda>
 8000500:	4637      	mov	r7, r6
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0xa0>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08c      	sub	sp, #48	; 0x30
 800050c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050e:	f107 031c 	add.w	r3, r7, #28
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
 800051c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800051e:	4b93      	ldr	r3, [pc, #588]	; (800076c <MX_GPIO_Init+0x264>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	4a92      	ldr	r2, [pc, #584]	; (800076c <MX_GPIO_Init+0x264>)
 8000524:	f043 0304 	orr.w	r3, r3, #4
 8000528:	6313      	str	r3, [r2, #48]	; 0x30
 800052a:	4b90      	ldr	r3, [pc, #576]	; (800076c <MX_GPIO_Init+0x264>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	f003 0304 	and.w	r3, r3, #4
 8000532:	61bb      	str	r3, [r7, #24]
 8000534:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000536:	4b8d      	ldr	r3, [pc, #564]	; (800076c <MX_GPIO_Init+0x264>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	4a8c      	ldr	r2, [pc, #560]	; (800076c <MX_GPIO_Init+0x264>)
 800053c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000540:	6313      	str	r3, [r2, #48]	; 0x30
 8000542:	4b8a      	ldr	r3, [pc, #552]	; (800076c <MX_GPIO_Init+0x264>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800054a:	617b      	str	r3, [r7, #20]
 800054c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800054e:	4b87      	ldr	r3, [pc, #540]	; (800076c <MX_GPIO_Init+0x264>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000552:	4a86      	ldr	r2, [pc, #536]	; (800076c <MX_GPIO_Init+0x264>)
 8000554:	f043 0301 	orr.w	r3, r3, #1
 8000558:	6313      	str	r3, [r2, #48]	; 0x30
 800055a:	4b84      	ldr	r3, [pc, #528]	; (800076c <MX_GPIO_Init+0x264>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	613b      	str	r3, [r7, #16]
 8000564:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000566:	4b81      	ldr	r3, [pc, #516]	; (800076c <MX_GPIO_Init+0x264>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	4a80      	ldr	r2, [pc, #512]	; (800076c <MX_GPIO_Init+0x264>)
 800056c:	f043 0302 	orr.w	r3, r3, #2
 8000570:	6313      	str	r3, [r2, #48]	; 0x30
 8000572:	4b7e      	ldr	r3, [pc, #504]	; (800076c <MX_GPIO_Init+0x264>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	f003 0302 	and.w	r3, r3, #2
 800057a:	60fb      	str	r3, [r7, #12]
 800057c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800057e:	4b7b      	ldr	r3, [pc, #492]	; (800076c <MX_GPIO_Init+0x264>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	4a7a      	ldr	r2, [pc, #488]	; (800076c <MX_GPIO_Init+0x264>)
 8000584:	f043 0308 	orr.w	r3, r3, #8
 8000588:	6313      	str	r3, [r2, #48]	; 0x30
 800058a:	4b78      	ldr	r3, [pc, #480]	; (800076c <MX_GPIO_Init+0x264>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	f003 0308 	and.w	r3, r3, #8
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000596:	4b75      	ldr	r3, [pc, #468]	; (800076c <MX_GPIO_Init+0x264>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	4a74      	ldr	r2, [pc, #464]	; (800076c <MX_GPIO_Init+0x264>)
 800059c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005a0:	6313      	str	r3, [r2, #48]	; 0x30
 80005a2:	4b72      	ldr	r3, [pc, #456]	; (800076c <MX_GPIO_Init+0x264>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80005ae:	2200      	movs	r2, #0
 80005b0:	f244 0181 	movw	r1, #16513	; 0x4081
 80005b4:	486e      	ldr	r0, [pc, #440]	; (8000770 <MX_GPIO_Init+0x268>)
 80005b6:	f001 f989 	bl	80018cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2140      	movs	r1, #64	; 0x40
 80005be:	486d      	ldr	r0, [pc, #436]	; (8000774 <MX_GPIO_Init+0x26c>)
 80005c0:	f001 f984 	bl	80018cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SERVO_4_Pin|SERVO_3_Pin|SERVO_2_Pin, GPIO_PIN_RESET);
 80005c4:	2200      	movs	r2, #0
 80005c6:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80005ca:	486b      	ldr	r0, [pc, #428]	; (8000778 <MX_GPIO_Init+0x270>)
 80005cc:	f001 f97e 	bl	80018cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SERVO_1_GPIO_Port, SERVO_1_Pin, GPIO_PIN_RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	2104      	movs	r1, #4
 80005d4:	4869      	ldr	r0, [pc, #420]	; (800077c <MX_GPIO_Init+0x274>)
 80005d6:	f001 f979 	bl	80018cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80005da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005e0:	4b67      	ldr	r3, [pc, #412]	; (8000780 <MX_GPIO_Init+0x278>)
 80005e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e4:	2300      	movs	r3, #0
 80005e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80005e8:	f107 031c 	add.w	r3, r7, #28
 80005ec:	4619      	mov	r1, r3
 80005ee:	4862      	ldr	r0, [pc, #392]	; (8000778 <MX_GPIO_Init+0x270>)
 80005f0:	f000 ffc2 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80005f4:	2332      	movs	r3, #50	; 0x32
 80005f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005f8:	2302      	movs	r3, #2
 80005fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fc:	2300      	movs	r3, #0
 80005fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000600:	2303      	movs	r3, #3
 8000602:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000604:	230b      	movs	r3, #11
 8000606:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000608:	f107 031c 	add.w	r3, r7, #28
 800060c:	4619      	mov	r1, r3
 800060e:	485a      	ldr	r0, [pc, #360]	; (8000778 <MX_GPIO_Init+0x270>)
 8000610:	f000 ffb2 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000614:	2386      	movs	r3, #134	; 0x86
 8000616:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000618:	2302      	movs	r3, #2
 800061a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061c:	2300      	movs	r3, #0
 800061e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000620:	2303      	movs	r3, #3
 8000622:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000624:	230b      	movs	r3, #11
 8000626:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000628:	f107 031c 	add.w	r3, r7, #28
 800062c:	4619      	mov	r1, r3
 800062e:	4855      	ldr	r0, [pc, #340]	; (8000784 <MX_GPIO_Init+0x27c>)
 8000630:	f000 ffa2 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000634:	f244 0381 	movw	r3, #16513	; 0x4081
 8000638:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063a:	2301      	movs	r3, #1
 800063c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063e:	2300      	movs	r3, #0
 8000640:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000642:	2300      	movs	r3, #0
 8000644:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000646:	f107 031c 	add.w	r3, r7, #28
 800064a:	4619      	mov	r1, r3
 800064c:	4848      	ldr	r0, [pc, #288]	; (8000770 <MX_GPIO_Init+0x268>)
 800064e:	f000 ff93 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000652:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000656:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000658:	2302      	movs	r3, #2
 800065a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000660:	2303      	movs	r3, #3
 8000662:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000664:	230b      	movs	r3, #11
 8000666:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000668:	f107 031c 	add.w	r3, r7, #28
 800066c:	4619      	mov	r1, r3
 800066e:	4840      	ldr	r0, [pc, #256]	; (8000770 <MX_GPIO_Init+0x268>)
 8000670:	f000 ff82 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000674:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000678:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800067a:	2302      	movs	r3, #2
 800067c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	2300      	movs	r3, #0
 8000680:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000682:	2303      	movs	r3, #3
 8000684:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000686:	2307      	movs	r3, #7
 8000688:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800068a:	f107 031c 	add.w	r3, r7, #28
 800068e:	4619      	mov	r1, r3
 8000690:	483a      	ldr	r0, [pc, #232]	; (800077c <MX_GPIO_Init+0x274>)
 8000692:	f000 ff71 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000696:	2340      	movs	r3, #64	; 0x40
 8000698:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069a:	2301      	movs	r3, #1
 800069c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a2:	2300      	movs	r3, #0
 80006a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80006a6:	f107 031c 	add.w	r3, r7, #28
 80006aa:	4619      	mov	r1, r3
 80006ac:	4831      	ldr	r0, [pc, #196]	; (8000774 <MX_GPIO_Init+0x26c>)
 80006ae:	f000 ff63 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80006b2:	2380      	movs	r3, #128	; 0x80
 80006b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b6:	2300      	movs	r3, #0
 80006b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80006be:	f107 031c 	add.w	r3, r7, #28
 80006c2:	4619      	mov	r1, r3
 80006c4:	482b      	ldr	r0, [pc, #172]	; (8000774 <MX_GPIO_Init+0x26c>)
 80006c6:	f000 ff57 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80006ca:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80006ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d0:	2302      	movs	r3, #2
 80006d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d4:	2300      	movs	r3, #0
 80006d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006d8:	2303      	movs	r3, #3
 80006da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80006dc:	230a      	movs	r3, #10
 80006de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e0:	f107 031c 	add.w	r3, r7, #28
 80006e4:	4619      	mov	r1, r3
 80006e6:	4827      	ldr	r0, [pc, #156]	; (8000784 <MX_GPIO_Init+0x27c>)
 80006e8:	f000 ff46 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80006ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f2:	2300      	movs	r3, #0
 80006f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80006fa:	f107 031c 	add.w	r3, r7, #28
 80006fe:	4619      	mov	r1, r3
 8000700:	4820      	ldr	r0, [pc, #128]	; (8000784 <MX_GPIO_Init+0x27c>)
 8000702:	f000 ff39 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SERVO_4_Pin|SERVO_3_Pin|SERVO_2_Pin;
 8000706:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800070a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070c:	2301      	movs	r3, #1
 800070e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000714:	2300      	movs	r3, #0
 8000716:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000718:	f107 031c 	add.w	r3, r7, #28
 800071c:	4619      	mov	r1, r3
 800071e:	4816      	ldr	r0, [pc, #88]	; (8000778 <MX_GPIO_Init+0x270>)
 8000720:	f000 ff2a 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SERVO_1_Pin;
 8000724:	2304      	movs	r3, #4
 8000726:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000728:	2301      	movs	r3, #1
 800072a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000730:	2300      	movs	r3, #0
 8000732:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SERVO_1_GPIO_Port, &GPIO_InitStruct);
 8000734:	f107 031c 	add.w	r3, r7, #28
 8000738:	4619      	mov	r1, r3
 800073a:	4810      	ldr	r0, [pc, #64]	; (800077c <MX_GPIO_Init+0x274>)
 800073c:	f000 ff1c 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000740:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000744:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000746:	2302      	movs	r3, #2
 8000748:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800074e:	2303      	movs	r3, #3
 8000750:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000752:	230b      	movs	r3, #11
 8000754:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000756:	f107 031c 	add.w	r3, r7, #28
 800075a:	4619      	mov	r1, r3
 800075c:	4805      	ldr	r0, [pc, #20]	; (8000774 <MX_GPIO_Init+0x26c>)
 800075e:	f000 ff0b 	bl	8001578 <HAL_GPIO_Init>

}
 8000762:	bf00      	nop
 8000764:	3730      	adds	r7, #48	; 0x30
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800
 8000770:	40020400 	.word	0x40020400
 8000774:	40021800 	.word	0x40021800
 8000778:	40020800 	.word	0x40020800
 800077c:	40020c00 	.word	0x40020c00
 8000780:	10110000 	.word	0x10110000
 8000784:	40020000 	.word	0x40020000

08000788 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800078c:	f000 fd85 	bl	800129a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000790:	f000 f8c4 	bl	800091c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000794:	f7ff feb8 	bl	8000508 <MX_GPIO_Init>
  MX_TIM6_Init();
 8000798:	f000 fcfa 	bl	8001190 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  SERVOS_Init();
 800079c:	f000 f930 	bl	8000a00 <SERVOS_Init>
  SERVOS_Configure(0, SERVO_1_Pin, SERVO_1_GPIO_Port);
 80007a0:	4a5a      	ldr	r2, [pc, #360]	; (800090c <main+0x184>)
 80007a2:	2104      	movs	r1, #4
 80007a4:	2000      	movs	r0, #0
 80007a6:	f000 f999 	bl	8000adc <SERVOS_Configure>
  SERVOS_Configure(1, SERVO_2_Pin, SERVO_2_GPIO_Port);
 80007aa:	4a59      	ldr	r2, [pc, #356]	; (8000910 <main+0x188>)
 80007ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007b0:	2001      	movs	r0, #1
 80007b2:	f000 f993 	bl	8000adc <SERVOS_Configure>
  SERVOS_Configure(2, LD3_Pin, LD3_GPIO_Port);
 80007b6:	4a57      	ldr	r2, [pc, #348]	; (8000914 <main+0x18c>)
 80007b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007bc:	2002      	movs	r0, #2
 80007be:	f000 f98d 	bl	8000adc <SERVOS_Configure>
  SERVOS_Configure(3, LD3_Pin, LD3_GPIO_Port);
 80007c2:	4a54      	ldr	r2, [pc, #336]	; (8000914 <main+0x18c>)
 80007c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007c8:	2003      	movs	r0, #3
 80007ca:	f000 f987 	bl	8000adc <SERVOS_Configure>
  SERVOS_Configure(4, LD3_Pin, LD3_GPIO_Port);
 80007ce:	4a51      	ldr	r2, [pc, #324]	; (8000914 <main+0x18c>)
 80007d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007d4:	2004      	movs	r0, #4
 80007d6:	f000 f981 	bl	8000adc <SERVOS_Configure>
  SERVOS_Configure(5, LD3_Pin, LD3_GPIO_Port);
 80007da:	4a4e      	ldr	r2, [pc, #312]	; (8000914 <main+0x18c>)
 80007dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007e0:	2005      	movs	r0, #5
 80007e2:	f000 f97b 	bl	8000adc <SERVOS_Configure>
  SERVOS_Configure(6, LD3_Pin, LD3_GPIO_Port);
 80007e6:	4a4b      	ldr	r2, [pc, #300]	; (8000914 <main+0x18c>)
 80007e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007ec:	2006      	movs	r0, #6
 80007ee:	f000 f975 	bl	8000adc <SERVOS_Configure>
  SERVOS_Configure(7, LD3_Pin, LD3_GPIO_Port);
 80007f2:	4a48      	ldr	r2, [pc, #288]	; (8000914 <main+0x18c>)
 80007f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007f8:	2007      	movs	r0, #7
 80007fa:	f000 f96f 	bl	8000adc <SERVOS_Configure>
  SERVOS_Configure(8, SERVO_3_Pin, SERVO_3_GPIO_Port);
 80007fe:	4a44      	ldr	r2, [pc, #272]	; (8000910 <main+0x188>)
 8000800:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000804:	2008      	movs	r0, #8
 8000806:	f000 f969 	bl	8000adc <SERVOS_Configure>
  SERVOS_Configure(9, LD3_Pin, LD3_GPIO_Port);
 800080a:	4a42      	ldr	r2, [pc, #264]	; (8000914 <main+0x18c>)
 800080c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000810:	2009      	movs	r0, #9
 8000812:	f000 f963 	bl	8000adc <SERVOS_Configure>
  SERVOS_Configure(10, LD3_Pin, LD3_GPIO_Port);
 8000816:	4a3f      	ldr	r2, [pc, #252]	; (8000914 <main+0x18c>)
 8000818:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800081c:	200a      	movs	r0, #10
 800081e:	f000 f95d 	bl	8000adc <SERVOS_Configure>
  SERVOS_Configure(11, LD3_Pin, LD3_GPIO_Port);
 8000822:	4a3c      	ldr	r2, [pc, #240]	; (8000914 <main+0x18c>)
 8000824:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000828:	200b      	movs	r0, #11
 800082a:	f000 f957 	bl	8000adc <SERVOS_Configure>
  SERVOS_Configure(12, LD3_Pin, LD3_GPIO_Port);
 800082e:	4a39      	ldr	r2, [pc, #228]	; (8000914 <main+0x18c>)
 8000830:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000834:	200c      	movs	r0, #12
 8000836:	f000 f951 	bl	8000adc <SERVOS_Configure>
  SERVOS_Configure(13, LD3_Pin, LD3_GPIO_Port);
 800083a:	4a36      	ldr	r2, [pc, #216]	; (8000914 <main+0x18c>)
 800083c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000840:	200d      	movs	r0, #13
 8000842:	f000 f94b 	bl	8000adc <SERVOS_Configure>
  SERVOS_Configure(14, LD3_Pin, LD3_GPIO_Port);
 8000846:	4a33      	ldr	r2, [pc, #204]	; (8000914 <main+0x18c>)
 8000848:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800084c:	200e      	movs	r0, #14
 800084e:	f000 f945 	bl	8000adc <SERVOS_Configure>
  SERVOS_Configure(15, LD3_Pin, LD3_GPIO_Port);
 8000852:	4a30      	ldr	r2, [pc, #192]	; (8000914 <main+0x18c>)
 8000854:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000858:	200f      	movs	r0, #15
 800085a:	f000 f93f 	bl	8000adc <SERVOS_Configure>
  SERVOS_Configure(16, SERVO_4_Pin, SERVO_4_GPIO_Port);
 800085e:	4a2c      	ldr	r2, [pc, #176]	; (8000910 <main+0x188>)
 8000860:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000864:	2010      	movs	r0, #16
 8000866:	f000 f939 	bl	8000adc <SERVOS_Configure>
  SERVOS_Configure(17, LD3_Pin, LD3_GPIO_Port);
 800086a:	4a2a      	ldr	r2, [pc, #168]	; (8000914 <main+0x18c>)
 800086c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000870:	2011      	movs	r0, #17
 8000872:	f000 f933 	bl	8000adc <SERVOS_Configure>
  SERVOS_Configure(18, LD3_Pin, LD3_GPIO_Port);
 8000876:	4a27      	ldr	r2, [pc, #156]	; (8000914 <main+0x18c>)
 8000878:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800087c:	2012      	movs	r0, #18
 800087e:	f000 f92d 	bl	8000adc <SERVOS_Configure>
  SERVOS_Configure(19, LD3_Pin, LD3_GPIO_Port);
 8000882:	4a24      	ldr	r2, [pc, #144]	; (8000914 <main+0x18c>)
 8000884:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000888:	2013      	movs	r0, #19
 800088a:	f000 f927 	bl	8000adc <SERVOS_Configure>
  SERVOS_Configure(20, LD3_Pin, LD3_GPIO_Port);
 800088e:	4a21      	ldr	r2, [pc, #132]	; (8000914 <main+0x18c>)
 8000890:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000894:	2014      	movs	r0, #20
 8000896:	f000 f921 	bl	8000adc <SERVOS_Configure>
  SERVOS_Configure(21, LD3_Pin, LD3_GPIO_Port);
 800089a:	4a1e      	ldr	r2, [pc, #120]	; (8000914 <main+0x18c>)
 800089c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008a0:	2015      	movs	r0, #21
 80008a2:	f000 f91b 	bl	8000adc <SERVOS_Configure>
  SERVOS_Configure(22, LD3_Pin, LD3_GPIO_Port);
 80008a6:	4a1b      	ldr	r2, [pc, #108]	; (8000914 <main+0x18c>)
 80008a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008ac:	2016      	movs	r0, #22
 80008ae:	f000 f915 	bl	8000adc <SERVOS_Configure>
  SERVOS_Configure(23, LD3_Pin, LD3_GPIO_Port);
 80008b2:	4a18      	ldr	r2, [pc, #96]	; (8000914 <main+0x18c>)
 80008b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008b8:	2017      	movs	r0, #23
 80008ba:	f000 f90f 	bl	8000adc <SERVOS_Configure>
  SERVOS_Configure(24, LD3_Pin, LD3_GPIO_Port);
 80008be:	4a15      	ldr	r2, [pc, #84]	; (8000914 <main+0x18c>)
 80008c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008c4:	2018      	movs	r0, #24
 80008c6:	f000 f909 	bl	8000adc <SERVOS_Configure>
  SERVOS_Set(0, 100);
 80008ca:	2164      	movs	r1, #100	; 0x64
 80008cc:	2000      	movs	r0, #0
 80008ce:	f000 f9c9 	bl	8000c64 <SERVOS_Set>
  SERVOS_Set(8, 200);
 80008d2:	21c8      	movs	r1, #200	; 0xc8
 80008d4:	2008      	movs	r0, #8
 80008d6:	f000 f9c5 	bl	8000c64 <SERVOS_Set>
  SERVOS_Set(16, 300);
 80008da:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80008de:	2010      	movs	r0, #16
 80008e0:	f000 f9c0 	bl	8000c64 <SERVOS_Set>
  SERVOS_Set(1, 400);
 80008e4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80008e8:	2001      	movs	r0, #1
 80008ea:	f000 f9bb 	bl	8000c64 <SERVOS_Set>

  SERVOS_Set(16, 150);
 80008ee:	2196      	movs	r1, #150	; 0x96
 80008f0:	2010      	movs	r0, #16
 80008f2:	f000 f9b7 	bl	8000c64 <SERVOS_Set>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (bTick1ms)
 80008f6:	4b08      	ldr	r3, [pc, #32]	; (8000918 <main+0x190>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d0fb      	beq.n	80008f6 <main+0x16e>
	{
	  bTick1ms = 0;
 80008fe:	4b06      	ldr	r3, [pc, #24]	; (8000918 <main+0x190>)
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
	  SERVOS_Task1ms();
 8000904:	f000 fb6e 	bl	8000fe4 <SERVOS_Task1ms>
	if (bTick1ms)
 8000908:	e7f5      	b.n	80008f6 <main+0x16e>
 800090a:	bf00      	nop
 800090c:	40020c00 	.word	0x40020c00
 8000910:	40020800 	.word	0x40020800
 8000914:	40020400 	.word	0x40020400
 8000918:	20000028 	.word	0x20000028

0800091c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b094      	sub	sp, #80	; 0x50
 8000920:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000922:	f107 0320 	add.w	r3, r7, #32
 8000926:	2230      	movs	r2, #48	; 0x30
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f001 fe58 	bl	80025e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000930:	f107 030c 	add.w	r3, r7, #12
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
 800093e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000940:	f000 ffde 	bl	8001900 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000944:	4b2a      	ldr	r3, [pc, #168]	; (80009f0 <SystemClock_Config+0xd4>)
 8000946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000948:	4a29      	ldr	r2, [pc, #164]	; (80009f0 <SystemClock_Config+0xd4>)
 800094a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800094e:	6413      	str	r3, [r2, #64]	; 0x40
 8000950:	4b27      	ldr	r3, [pc, #156]	; (80009f0 <SystemClock_Config+0xd4>)
 8000952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800095c:	4b25      	ldr	r3, [pc, #148]	; (80009f4 <SystemClock_Config+0xd8>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a24      	ldr	r2, [pc, #144]	; (80009f4 <SystemClock_Config+0xd8>)
 8000962:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000966:	6013      	str	r3, [r2, #0]
 8000968:	4b22      	ldr	r3, [pc, #136]	; (80009f4 <SystemClock_Config+0xd8>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000974:	2301      	movs	r3, #1
 8000976:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000978:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800097e:	2302      	movs	r3, #2
 8000980:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000982:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000986:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000988:	2304      	movs	r3, #4
 800098a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 800098c:	23d8      	movs	r3, #216	; 0xd8
 800098e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000990:	2302      	movs	r3, #2
 8000992:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000994:	2309      	movs	r3, #9
 8000996:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000998:	f107 0320 	add.w	r3, r7, #32
 800099c:	4618      	mov	r0, r3
 800099e:	f001 f80f 	bl	80019c0 <HAL_RCC_OscConfig>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <SystemClock_Config+0x90>
  {
    Error_Handler();
 80009a8:	f000 f826 	bl	80009f8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009ac:	f000 ffb8 	bl	8001920 <HAL_PWREx_EnableOverDrive>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80009b6:	f000 f81f 	bl	80009f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ba:	230f      	movs	r3, #15
 80009bc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009be:	2302      	movs	r3, #2
 80009c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c2:	2300      	movs	r3, #0
 80009c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009c6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80009d2:	f107 030c 	add.w	r3, r7, #12
 80009d6:	2107      	movs	r1, #7
 80009d8:	4618      	mov	r0, r3
 80009da:	f001 fa95 	bl	8001f08 <HAL_RCC_ClockConfig>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80009e4:	f000 f808 	bl	80009f8 <Error_Handler>
  }
}
 80009e8:	bf00      	nop
 80009ea:	3750      	adds	r7, #80	; 0x50
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40007000 	.word	0x40007000

080009f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009fc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009fe:	e7fe      	b.n	80009fe <Error_Handler+0x6>

08000a00 <SERVOS_Init>:
 * Initializes the data fields and starts the timer with an empty sequence
 * with 20ms period time
 *
 */
void SERVOS_Init()
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
	servos_iCnt = 0;
 8000a06:	4b29      	ldr	r3, [pc, #164]	; (8000aac <SERVOS_Init+0xac>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
	for (int i=0; i<SERVOS_TOTAL; i++)
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	e007      	b.n	8000a22 <SERVOS_Init+0x22>
	{
		servos_au8Indices[i] = SERVOS_ID_EMPTY;
 8000a12:	4a27      	ldr	r2, [pc, #156]	; (8000ab0 <SERVOS_Init+0xb0>)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	4413      	add	r3, r2
 8000a18:	22ff      	movs	r2, #255	; 0xff
 8000a1a:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<SERVOS_TOTAL; i++)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	607b      	str	r3, [r7, #4]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2ba7      	cmp	r3, #167	; 0xa7
 8000a26:	ddf4      	ble.n	8000a12 <SERVOS_Init+0x12>
	}
	for (int i=0; i<SERVOS_SERIAL; i++)
 8000a28:	2300      	movs	r3, #0
 8000a2a:	603b      	str	r3, [r7, #0]
 8000a2c:	e00b      	b.n	8000a46 <SERVOS_Init+0x46>
	{
		servos_asParallel[i].cnt = 0;
 8000a2e:	4921      	ldr	r1, [pc, #132]	; (8000ab4 <SERVOS_Init+0xb4>)
 8000a30:	683a      	ldr	r2, [r7, #0]
 8000a32:	4613      	mov	r3, r2
 8000a34:	00db      	lsls	r3, r3, #3
 8000a36:	1a9b      	subs	r3, r3, r2
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	440b      	add	r3, r1
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
	for (int i=0; i<SERVOS_SERIAL; i++)
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	3301      	adds	r3, #1
 8000a44:	603b      	str	r3, [r7, #0]
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	2b07      	cmp	r3, #7
 8000a4a:	ddf0      	ble.n	8000a2e <SERVOS_Init+0x2e>
	}

	servos_asActions[0].pServosBSSR = &(servos_u32DummyBSSR);
 8000a4c:	4b1a      	ldr	r3, [pc, #104]	; (8000ab8 <SERVOS_Init+0xb8>)
 8000a4e:	4a1b      	ldr	r2, [pc, #108]	; (8000abc <SERVOS_Init+0xbc>)
 8000a50:	605a      	str	r2, [r3, #4]
	servos_asActions[0].u32ServosBSSRVal = 0;
 8000a52:	4b19      	ldr	r3, [pc, #100]	; (8000ab8 <SERVOS_Init+0xb8>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
	servos_asActions[0].u16ARR = 0 ;
 8000a58:	4b17      	ldr	r3, [pc, #92]	; (8000ab8 <SERVOS_Init+0xb8>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	801a      	strh	r2, [r3, #0]

	servos_pBSSR      = servos_asActions[1].pServosBSSR = &(servos_u32DummyBSSR);
 8000a5e:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <SERVOS_Init+0xb8>)
 8000a60:	4a16      	ldr	r2, [pc, #88]	; (8000abc <SERVOS_Init+0xbc>)
 8000a62:	611a      	str	r2, [r3, #16]
 8000a64:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <SERVOS_Init+0xb8>)
 8000a66:	691b      	ldr	r3, [r3, #16]
 8000a68:	4a15      	ldr	r2, [pc, #84]	; (8000ac0 <SERVOS_Init+0xc0>)
 8000a6a:	6013      	str	r3, [r2, #0]
	servos_u32BSSRVal = servos_asActions[1].u32ServosBSSRVal = 0;
 8000a6c:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <SERVOS_Init+0xb8>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	615a      	str	r2, [r3, #20]
 8000a72:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <SERVOS_Init+0xb8>)
 8000a74:	695b      	ldr	r3, [r3, #20]
 8000a76:	4a13      	ldr	r2, [pc, #76]	; (8000ac4 <SERVOS_Init+0xc4>)
 8000a78:	6013      	str	r3, [r2, #0]
	servos_u16ARR     = servos_asActions[1].u16ARR = 1000-1;
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <SERVOS_Init+0xb8>)
 8000a7c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a80:	819a      	strh	r2, [r3, #12]
 8000a82:	4b0d      	ldr	r3, [pc, #52]	; (8000ab8 <SERVOS_Init+0xb8>)
 8000a84:	899a      	ldrh	r2, [r3, #12]
 8000a86:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <SERVOS_Init+0xc8>)
 8000a88:	801a      	strh	r2, [r3, #0]

	servos_iActionCnt = 0;
 8000a8a:	4b10      	ldr	r3, [pc, #64]	; (8000acc <SERVOS_Init+0xcc>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
	servos_iActionLen = 2;
 8000a90:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <SERVOS_Init+0xd0>)
 8000a92:	2202      	movs	r2, #2
 8000a94:	601a      	str	r2, [r3, #0]

	servos_bRequestUpdate = 0;
 8000a96:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <SERVOS_Init+0xd4>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim6);
 8000a9c:	480e      	ldr	r0, [pc, #56]	; (8000ad8 <SERVOS_Init+0xd8>)
 8000a9e:	f001 fc23 	bl	80022e8 <HAL_TIM_Base_Start_IT>
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20001988 	.word	0x20001988
 8000ab0:	20000030 	.word	0x20000030
 8000ab4:	200010b0 	.word	0x200010b0
 8000ab8:	200000d8 	.word	0x200000d8
 8000abc:	20001190 	.word	0x20001190
 8000ac0:	20001980 	.word	0x20001980
 8000ac4:	2000198c 	.word	0x2000198c
 8000ac8:	20001984 	.word	0x20001984
 8000acc:	20001194 	.word	0x20001194
 8000ad0:	20001198 	.word	0x20001198
 8000ad4:	2000197c 	.word	0x2000197c
 8000ad8:	20001990 	.word	0x20001990

08000adc <SERVOS_Configure>:
 *
 * \return error result
 *
 */
int SERVOS_Configure(uint8_t u8ServoId, uint16_t u16GpioPin, GPIO_TypeDef* pGpioPort)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	603a      	str	r2, [r7, #0]
 8000ae6:	71fb      	strb	r3, [r7, #7]
 8000ae8:	460b      	mov	r3, r1
 8000aea:	80bb      	strh	r3, [r7, #4]
	int iSerialIx;
	int iParallelIx;

	// Check range of u8ServoId
	if (u8ServoId >= SERVOS_TOTAL)
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	2ba7      	cmp	r3, #167	; 0xa7
 8000af0:	d901      	bls.n	8000af6 <SERVOS_Configure+0x1a>
	{
		return SERVOS_ERROR_ID_OUT_OF_RANGE;
 8000af2:	2301      	movs	r3, #1
 8000af4:	e080      	b.n	8000bf8 <SERVOS_Configure+0x11c>
	}

	// configure a servo only one time
	if (servos_au8Indices[u8ServoId] != SERVOS_ID_EMPTY)
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	4a42      	ldr	r2, [pc, #264]	; (8000c04 <SERVOS_Configure+0x128>)
 8000afa:	5cd3      	ldrb	r3, [r2, r3]
 8000afc:	2bff      	cmp	r3, #255	; 0xff
 8000afe:	d001      	beq.n	8000b04 <SERVOS_Configure+0x28>
	{
		return SERVOS_ERROR_ALREADY_CONFIGURED;
 8000b00:	2303      	movs	r3, #3
 8000b02:	e079      	b.n	8000bf8 <SERVOS_Configure+0x11c>
	}

	// Add servoID to table
	servos_au8Indices[u8ServoId] = servos_iCnt;
 8000b04:	4b40      	ldr	r3, [pc, #256]	; (8000c08 <SERVOS_Configure+0x12c>)
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	b2d1      	uxtb	r1, r2
 8000b0c:	4a3d      	ldr	r2, [pc, #244]	; (8000c04 <SERVOS_Configure+0x128>)
 8000b0e:	54d1      	strb	r1, [r2, r3]
	servos_asAll[servos_iCnt].value = SERVOS_DEFAULT_VAL;
 8000b10:	4b3d      	ldr	r3, [pc, #244]	; (8000c08 <SERVOS_Configure+0x12c>)
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	493d      	ldr	r1, [pc, #244]	; (8000c0c <SERVOS_Configure+0x130>)
 8000b16:	4613      	mov	r3, r2
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	4413      	add	r3, r2
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	18ca      	adds	r2, r1, r3
 8000b20:	8813      	ldrh	r3, [r2, #0]
 8000b22:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000b26:	f361 0309 	bfi	r3, r1, #0, #10
 8000b2a:	8013      	strh	r3, [r2, #0]
	servos_asAll[servos_iCnt].attached = 0;
 8000b2c:	4b36      	ldr	r3, [pc, #216]	; (8000c08 <SERVOS_Configure+0x12c>)
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	4936      	ldr	r1, [pc, #216]	; (8000c0c <SERVOS_Configure+0x130>)
 8000b32:	4613      	mov	r3, r2
 8000b34:	005b      	lsls	r3, r3, #1
 8000b36:	4413      	add	r3, r2
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	18ca      	adds	r2, r1, r3
 8000b3c:	7853      	ldrb	r3, [r2, #1]
 8000b3e:	f36f 0382 	bfc	r3, #2, #1
 8000b42:	7053      	strb	r3, [r2, #1]
	servos_asAll[servos_iCnt].servoIndex = servos_iCnt;
 8000b44:	4b30      	ldr	r3, [pc, #192]	; (8000c08 <SERVOS_Configure+0x12c>)
 8000b46:	6819      	ldr	r1, [r3, #0]
 8000b48:	4b2f      	ldr	r3, [pc, #188]	; (8000c08 <SERVOS_Configure+0x12c>)
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	b2c8      	uxtb	r0, r1
 8000b4e:	492f      	ldr	r1, [pc, #188]	; (8000c0c <SERVOS_Configure+0x130>)
 8000b50:	4613      	mov	r3, r2
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	4413      	add	r3, r2
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	440b      	add	r3, r1
 8000b5a:	3309      	adds	r3, #9
 8000b5c:	4602      	mov	r2, r0
 8000b5e:	701a      	strb	r2, [r3, #0]
	servos_asAll[servos_iCnt].pGpioPort = pGpioPort;
 8000b60:	4b29      	ldr	r3, [pc, #164]	; (8000c08 <SERVOS_Configure+0x12c>)
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	4929      	ldr	r1, [pc, #164]	; (8000c0c <SERVOS_Configure+0x130>)
 8000b66:	4613      	mov	r3, r2
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	4413      	add	r3, r2
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	440b      	add	r3, r1
 8000b70:	3304      	adds	r3, #4
 8000b72:	683a      	ldr	r2, [r7, #0]
 8000b74:	601a      	str	r2, [r3, #0]
	servos_asAll[servos_iCnt].u16GpioPin = u16GpioPin;
 8000b76:	4b24      	ldr	r3, [pc, #144]	; (8000c08 <SERVOS_Configure+0x12c>)
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	4924      	ldr	r1, [pc, #144]	; (8000c0c <SERVOS_Configure+0x130>)
 8000b7c:	4613      	mov	r3, r2
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	4413      	add	r3, r2
 8000b82:	009b      	lsls	r3, r3, #2
 8000b84:	440b      	add	r3, r1
 8000b86:	3302      	adds	r3, #2
 8000b88:	88ba      	ldrh	r2, [r7, #4]
 8000b8a:	801a      	strh	r2, [r3, #0]

	// update the parallel counter
	iSerialIx = servos_iCnt & SERVOS_SERIAL_MASK;
 8000b8c:	4b1e      	ldr	r3, [pc, #120]	; (8000c08 <SERVOS_Configure+0x12c>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f003 0307 	and.w	r3, r3, #7
 8000b94:	60fb      	str	r3, [r7, #12]
	iParallelIx = servos_iCnt >> SERVOS_SERIAL_SHIFT;
 8000b96:	4b1c      	ldr	r3, [pc, #112]	; (8000c08 <SERVOS_Configure+0x12c>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	10db      	asrs	r3, r3, #3
 8000b9c:	60bb      	str	r3, [r7, #8]
	servos_asParallel[iSerialIx].cnt = iParallelIx + 1;
 8000b9e:	68bb      	ldr	r3, [r7, #8]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	491a      	ldr	r1, [pc, #104]	; (8000c10 <SERVOS_Configure+0x134>)
 8000ba6:	68fa      	ldr	r2, [r7, #12]
 8000ba8:	4613      	mov	r3, r2
 8000baa:	00db      	lsls	r3, r3, #3
 8000bac:	1a9b      	subs	r3, r3, r2
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	440b      	add	r3, r1
 8000bb2:	6018      	str	r0, [r3, #0]
	servos_asParallel[iSerialIx].servos[iParallelIx] = servos_iCnt;
 8000bb4:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <SERVOS_Configure+0x12c>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	b2d8      	uxtb	r0, r3
 8000bba:	4915      	ldr	r1, [pc, #84]	; (8000c10 <SERVOS_Configure+0x134>)
 8000bbc:	68fa      	ldr	r2, [r7, #12]
 8000bbe:	4613      	mov	r3, r2
 8000bc0:	00db      	lsls	r3, r3, #3
 8000bc2:	1a9b      	subs	r3, r3, r2
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	18ca      	adds	r2, r1, r3
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	4413      	add	r3, r2
 8000bcc:	3304      	adds	r3, #4
 8000bce:	4602      	mov	r2, r0
 8000bd0:	701a      	strb	r2, [r3, #0]
	servos_asAll[servos_iCnt].parallelSortPos = iParallelIx;
 8000bd2:	4b0d      	ldr	r3, [pc, #52]	; (8000c08 <SERVOS_Configure+0x12c>)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	b2d8      	uxtb	r0, r3
 8000bda:	490c      	ldr	r1, [pc, #48]	; (8000c0c <SERVOS_Configure+0x130>)
 8000bdc:	4613      	mov	r3, r2
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	4413      	add	r3, r2
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	440b      	add	r3, r1
 8000be6:	3308      	adds	r3, #8
 8000be8:	4602      	mov	r2, r0
 8000bea:	701a      	strb	r2, [r3, #0]

	//added
	servos_iCnt++;
 8000bec:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <SERVOS_Configure+0x12c>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	4a05      	ldr	r2, [pc, #20]	; (8000c08 <SERVOS_Configure+0x12c>)
 8000bf4:	6013      	str	r3, [r2, #0]

	return SERVOS_ERROR_OK;
 8000bf6:	2300      	movs	r3, #0
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3714      	adds	r7, #20
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	20000030 	.word	0x20000030
 8000c08:	20001988 	.word	0x20001988
 8000c0c:	2000119c 	.word	0x2000119c
 8000c10:	200010b0 	.word	0x200010b0

08000c14 <SERVOS_Swap>:
 * \param otherServo and the other servo to swap
 * \param servosParallel the current parallel structure
 *
 */
__STATIC_INLINE void SERVOS_Swap(SERVO_s* thisServo, SERVO_s* otherServo, SERVO_PARALLEL_s* servosParallel)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
	// Swap
	thisServo->parallelSortPos--;
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	7a1b      	ldrb	r3, [r3, #8]
 8000c24:	3b01      	subs	r3, #1
 8000c26:	b2da      	uxtb	r2, r3
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	721a      	strb	r2, [r3, #8]
	otherServo->parallelSortPos++;
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	7a1b      	ldrb	r3, [r3, #8]
 8000c30:	3301      	adds	r3, #1
 8000c32:	b2da      	uxtb	r2, r3
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	721a      	strb	r2, [r3, #8]
	servosParallel->servos[thisServo->parallelSortPos] = thisServo->servoIndex;
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	7a1b      	ldrb	r3, [r3, #8]
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	7a5a      	ldrb	r2, [r3, #9]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	440b      	add	r3, r1
 8000c46:	711a      	strb	r2, [r3, #4]
	servosParallel->servos[otherServo->parallelSortPos] = otherServo->servoIndex;
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	7a1b      	ldrb	r3, [r3, #8]
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	7a5a      	ldrb	r2, [r3, #9]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	440b      	add	r3, r1
 8000c56:	711a      	strb	r2, [r3, #4]
}
 8000c58:	bf00      	nop
 8000c5a:	3714      	adds	r7, #20
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <SERVOS_Set>:
 *
 * \return error result
 *
 */
int SERVOS_Set(uint8_t u8ServoId, uint32_t u32Value)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b088      	sub	sp, #32
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	6039      	str	r1, [r7, #0]
 8000c6e:	71fb      	strb	r3, [r7, #7]
	SERVO_s* thisServo;
	SERVO_s* otherServo;
	SERVO_PARALLEL_s* servosParallel;

	// Check range of u8ServoId
	if (u8ServoId >= SERVOS_TOTAL)
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	2ba7      	cmp	r3, #167	; 0xa7
 8000c74:	d901      	bls.n	8000c7a <SERVOS_Set+0x16>
	{
		return SERVOS_ERROR_ID_OUT_OF_RANGE;
 8000c76:	2301      	movs	r3, #1
 8000c78:	e091      	b.n	8000d9e <SERVOS_Set+0x13a>
	}

	// Limit to maximum value
	if (u32Value > SERVOS_MAXVAL)
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c80:	d902      	bls.n	8000c88 <SERVOS_Set+0x24>
	{
		u32Value = SERVOS_MAXVAL;
 8000c82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c86:	603b      	str	r3, [r7, #0]
	}


	// Get reference of the servo
	servoindex = servos_au8Indices[u8ServoId];
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	4a47      	ldr	r2, [pc, #284]	; (8000da8 <SERVOS_Set+0x144>)
 8000c8c:	5cd3      	ldrb	r3, [r2, r3]
 8000c8e:	61bb      	str	r3, [r7, #24]
	// Check if configured
	if (servoindex == SERVOS_ID_EMPTY)
 8000c90:	69bb      	ldr	r3, [r7, #24]
 8000c92:	2bff      	cmp	r3, #255	; 0xff
 8000c94:	d101      	bne.n	8000c9a <SERVOS_Set+0x36>
	{
		return SERVOS_ERROR_NOT_CONFIGURED;
 8000c96:	2302      	movs	r3, #2
 8000c98:	e081      	b.n	8000d9e <SERVOS_Set+0x13a>
	}
	thisServo = &servos_asAll[servoindex];
 8000c9a:	69ba      	ldr	r2, [r7, #24]
 8000c9c:	4613      	mov	r3, r2
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	4413      	add	r3, r2
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	4a41      	ldr	r2, [pc, #260]	; (8000dac <SERVOS_Set+0x148>)
 8000ca6:	4413      	add	r3, r2
 8000ca8:	617b      	str	r3, [r7, #20]

	// Attach it if not
	thisServo->attached = 1;
 8000caa:	697a      	ldr	r2, [r7, #20]
 8000cac:	7853      	ldrb	r3, [r2, #1]
 8000cae:	f043 0304 	orr.w	r3, r3, #4
 8000cb2:	7053      	strb	r3, [r2, #1]

	// has the value changed?
	if (thisServo->value != u32Value)
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	881b      	ldrh	r3, [r3, #0]
 8000cb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d06a      	beq.n	8000d9c <SERVOS_Set+0x138>
	{
		thisServo->value = u32Value;
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ccc:	b299      	uxth	r1, r3
 8000cce:	697a      	ldr	r2, [r7, #20]
 8000cd0:	8813      	ldrh	r3, [r2, #0]
 8000cd2:	f361 0309 	bfi	r3, r1, #0, #10
 8000cd6:	8013      	strh	r3, [r2, #0]

		// update the parallel counter
		serialIndex = servoindex & SERVOS_SERIAL_MASK;
 8000cd8:	69bb      	ldr	r3, [r7, #24]
 8000cda:	f003 0307 	and.w	r3, r3, #7
 8000cde:	613b      	str	r3, [r7, #16]
		//parallelIndex = servos_cnt >> SERVOS_SERIAL_SHIFT;
		servosParallel = &servos_asParallel[serialIndex];
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	00db      	lsls	r3, r3, #3
 8000ce6:	1a9b      	subs	r3, r3, r2
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	4a31      	ldr	r2, [pc, #196]	; (8000db0 <SERVOS_Set+0x14c>)
 8000cec:	4413      	add	r3, r2
 8000cee:	60fb      	str	r3, [r7, #12]

		// Are there more than 1 servos, we have to sort them
		if ( servosParallel->cnt > 1)
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d951      	bls.n	8000d9c <SERVOS_Set+0x138>
		{
			// sort downwards
			do
			{
				bFound = 0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61fb      	str	r3, [r7, #28]

				if (thisServo->parallelSortPos > 0)
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	7a1b      	ldrb	r3, [r3, #8]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d01d      	beq.n	8000d40 <SERVOS_Set+0xdc>
				{
					otherServo = &servos_asAll[servosParallel->servos[(thisServo->parallelSortPos)-1]];
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	7a1b      	ldrb	r3, [r3, #8]
 8000d08:	3b01      	subs	r3, #1
 8000d0a:	68fa      	ldr	r2, [r7, #12]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	791b      	ldrb	r3, [r3, #4]
 8000d10:	461a      	mov	r2, r3
 8000d12:	4613      	mov	r3, r2
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	4413      	add	r3, r2
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	4a24      	ldr	r2, [pc, #144]	; (8000dac <SERVOS_Set+0x148>)
 8000d1c:	4413      	add	r3, r2
 8000d1e:	60bb      	str	r3, [r7, #8]
					if (u32Value < 	otherServo->value )
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	881b      	ldrh	r3, [r3, #0]
 8000d24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000d28:	b29b      	uxth	r3, r3
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d206      	bcs.n	8000d40 <SERVOS_Set+0xdc>
					{
						bFound = 1;
 8000d32:	2301      	movs	r3, #1
 8000d34:	61fb      	str	r3, [r7, #28]
						// Swap
						SERVOS_Swap(thisServo, otherServo, servosParallel);
 8000d36:	68fa      	ldr	r2, [r7, #12]
 8000d38:	68b9      	ldr	r1, [r7, #8]
 8000d3a:	6978      	ldr	r0, [r7, #20]
 8000d3c:	f7ff ff6a 	bl	8000c14 <SERVOS_Swap>
					}
				}
			} while (bFound);
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d1d8      	bne.n	8000cf8 <SERVOS_Set+0x94>

			// sort upwards
			do
			{
				bFound = 0;
 8000d46:	2300      	movs	r3, #0
 8000d48:	61fb      	str	r3, [r7, #28]

				if (thisServo->parallelSortPos < (servosParallel->cnt-1))
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	7a1b      	ldrb	r3, [r3, #8]
 8000d4e:	461a      	mov	r2, r3
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	3b01      	subs	r3, #1
 8000d56:	429a      	cmp	r2, r3
 8000d58:	d21d      	bcs.n	8000d96 <SERVOS_Set+0x132>
				{
					otherServo = &servos_asAll[servosParallel->servos[(thisServo->parallelSortPos)+1]];
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	7a1b      	ldrb	r3, [r3, #8]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	68fa      	ldr	r2, [r7, #12]
 8000d62:	4413      	add	r3, r2
 8000d64:	791b      	ldrb	r3, [r3, #4]
 8000d66:	461a      	mov	r2, r3
 8000d68:	4613      	mov	r3, r2
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	4413      	add	r3, r2
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	4a0e      	ldr	r2, [pc, #56]	; (8000dac <SERVOS_Set+0x148>)
 8000d72:	4413      	add	r3, r2
 8000d74:	60bb      	str	r3, [r7, #8]
					if (u32Value  >	otherServo->value )
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	881b      	ldrh	r3, [r3, #0]
 8000d7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000d7e:	b29b      	uxth	r3, r3
 8000d80:	461a      	mov	r2, r3
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d906      	bls.n	8000d96 <SERVOS_Set+0x132>
					{
						bFound = 1;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	61fb      	str	r3, [r7, #28]
						// Swap
						SERVOS_Swap(thisServo, otherServo, servosParallel);
 8000d8c:	68fa      	ldr	r2, [r7, #12]
 8000d8e:	68b9      	ldr	r1, [r7, #8]
 8000d90:	6978      	ldr	r0, [r7, #20]
 8000d92:	f7ff ff3f 	bl	8000c14 <SERVOS_Swap>
					}
				}
			} while (bFound);
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d1d4      	bne.n	8000d46 <SERVOS_Set+0xe2>

		}
	}

	return SERVOS_ERROR_OK;
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3720      	adds	r7, #32
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000030 	.word	0x20000030
 8000dac:	2000119c 	.word	0x2000119c
 8000db0:	200010b0 	.word	0x200010b0

08000db4 <SERVOS_Update>:
/**
 * Update the action table for the ISR
 *
 */
static void SERVOS_Update(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b08b      	sub	sp, #44	; 0x2c
 8000db8:	af00      	add	r7, sp, #0
	int iTimeUs = 0;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	613b      	str	r3, [r7, #16]
	int iTimeUsLast = 0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24
	int iActionCnt;
	int iParallelPulsesTime;
	SERVO_s* psServo;
	SERVO_PARALLEL_s* psServosParallel;

	iActionCnt = 1;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	623b      	str	r3, [r7, #32]
	for (int s=0; s<SERVOS_SERIAL; s++)
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61fb      	str	r3, [r7, #28]
 8000dca:	e0cb      	b.n	8000f64 <SERVOS_Update+0x1b0>
	{
		psServosParallel = &servos_asParallel[s];
 8000dcc:	69fa      	ldr	r2, [r7, #28]
 8000dce:	4613      	mov	r3, r2
 8000dd0:	00db      	lsls	r3, r3, #3
 8000dd2:	1a9b      	subs	r3, r3, r2
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	4a7e      	ldr	r2, [pc, #504]	; (8000fd0 <SERVOS_Update+0x21c>)
 8000dd8:	4413      	add	r3, r2
 8000dda:	60fb      	str	r3, [r7, #12]
		iParallelPulsesTime = s * SERVOS_TIME_PULSE_GRID;
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	f640 02ca 	movw	r2, #2250	; 0x8ca
 8000de2:	fb02 f303 	mul.w	r3, r2, r3
 8000de6:	60bb      	str	r3, [r7, #8]

		// Set the action for all positive edged of the servo pulses that
		// are controlled in parallel
		for (int p=0; p<psServosParallel->cnt; p++)
 8000de8:	2300      	movs	r3, #0
 8000dea:	61bb      	str	r3, [r7, #24]
 8000dec:	e05a      	b.n	8000ea4 <SERVOS_Update+0xf0>
		{
			psServo = &servos_asAll[psServosParallel->servos[p]];
 8000dee:	68fa      	ldr	r2, [r7, #12]
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	4413      	add	r3, r2
 8000df4:	3304      	adds	r3, #4
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	461a      	mov	r2, r3
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	4413      	add	r3, r2
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	4a74      	ldr	r2, [pc, #464]	; (8000fd4 <SERVOS_Update+0x220>)
 8000e04:	4413      	add	r3, r2
 8000e06:	607b      	str	r3, [r7, #4]
			iTimeUs = p * SERVOS_TIME_OFFSET_PARALLEL + iParallelPulsesTime;
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	4413      	add	r3, r2
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	461a      	mov	r2, r3
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	4413      	add	r3, r2
 8000e18:	613b      	str	r3, [r7, #16]
			servos_asActions[iActionCnt].pServosBSSR = &psServo->pGpioPort->BSRR;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f103 0118 	add.w	r1, r3, #24
 8000e22:	486d      	ldr	r0, [pc, #436]	; (8000fd8 <SERVOS_Update+0x224>)
 8000e24:	6a3a      	ldr	r2, [r7, #32]
 8000e26:	4613      	mov	r3, r2
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	4413      	add	r3, r2
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	4403      	add	r3, r0
 8000e30:	3304      	adds	r3, #4
 8000e32:	6019      	str	r1, [r3, #0]
			if (psServo->attached)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	785b      	ldrb	r3, [r3, #1]
 8000e38:	f003 0304 	and.w	r3, r3, #4
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d00c      	beq.n	8000e5c <SERVOS_Update+0xa8>
			{
				servos_asActions[iActionCnt].u32ServosBSSRVal = psServo->u16GpioPin;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	885b      	ldrh	r3, [r3, #2]
 8000e46:	4618      	mov	r0, r3
 8000e48:	4963      	ldr	r1, [pc, #396]	; (8000fd8 <SERVOS_Update+0x224>)
 8000e4a:	6a3a      	ldr	r2, [r7, #32]
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	4413      	add	r3, r2
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	440b      	add	r3, r1
 8000e56:	3308      	adds	r3, #8
 8000e58:	6018      	str	r0, [r3, #0]
 8000e5a:	e009      	b.n	8000e70 <SERVOS_Update+0xbc>
			}
			else
			{
				servos_asActions[iActionCnt].u32ServosBSSRVal = 0;
 8000e5c:	495e      	ldr	r1, [pc, #376]	; (8000fd8 <SERVOS_Update+0x224>)
 8000e5e:	6a3a      	ldr	r2, [r7, #32]
 8000e60:	4613      	mov	r3, r2
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	4413      	add	r3, r2
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	440b      	add	r3, r1
 8000e6a:	3308      	adds	r3, #8
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
			}
			servos_asActions[iActionCnt-1].u16ARR = iTimeUs - iTimeUsLast - 1;
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	b29a      	uxth	r2, r3
 8000e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	6a3a      	ldr	r2, [r7, #32]
 8000e7e:	3a01      	subs	r2, #1
 8000e80:	3b01      	subs	r3, #1
 8000e82:	b298      	uxth	r0, r3
 8000e84:	4954      	ldr	r1, [pc, #336]	; (8000fd8 <SERVOS_Update+0x224>)
 8000e86:	4613      	mov	r3, r2
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	4413      	add	r3, r2
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	440b      	add	r3, r1
 8000e90:	4602      	mov	r2, r0
 8000e92:	801a      	strh	r2, [r3, #0]
			iTimeUsLast = iTimeUs;
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	627b      	str	r3, [r7, #36]	; 0x24
			iActionCnt++;
 8000e98:	6a3b      	ldr	r3, [r7, #32]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	623b      	str	r3, [r7, #32]
		for (int p=0; p<psServosParallel->cnt; p++)
 8000e9e:	69bb      	ldr	r3, [r7, #24]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	61bb      	str	r3, [r7, #24]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	d89f      	bhi.n	8000dee <SERVOS_Update+0x3a>
		}
		// Set the action for all negative edged of the servo pulses that
		// are controlled in parallel
		for (int p=0; p<psServosParallel->cnt; p++)
 8000eae:	2300      	movs	r3, #0
 8000eb0:	617b      	str	r3, [r7, #20]
 8000eb2:	e04f      	b.n	8000f54 <SERVOS_Update+0x1a0>
		{
			psServo = &servos_asAll[psServosParallel->servos[p]];
 8000eb4:	68fa      	ldr	r2, [r7, #12]
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	4413      	add	r3, r2
 8000eba:	3304      	adds	r3, #4
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	4413      	add	r3, r2
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	4a42      	ldr	r2, [pc, #264]	; (8000fd4 <SERVOS_Update+0x220>)
 8000eca:	4413      	add	r3, r2
 8000ecc:	607b      	str	r3, [r7, #4]
			iTimeUs = psServo->value + SERVOS_TIME_PULSE_BASE
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	881b      	ldrh	r3, [r3, #0]
 8000ed2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	f503 717a 	add.w	r1, r3, #1000	; 0x3e8
					+  p * SERVOS_TIME_OFFSET_PARALLEL + iParallelPulsesTime;
 8000edc:	697a      	ldr	r2, [r7, #20]
 8000ede:	4613      	mov	r3, r2
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	4413      	add	r3, r2
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	440b      	add	r3, r1
			iTimeUs = psServo->value + SERVOS_TIME_PULSE_BASE
 8000ee8:	68ba      	ldr	r2, [r7, #8]
 8000eea:	4413      	add	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
			servos_asActions[iActionCnt].pServosBSSR = &psServo->pGpioPort->BSRR;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f103 0118 	add.w	r1, r3, #24
 8000ef6:	4838      	ldr	r0, [pc, #224]	; (8000fd8 <SERVOS_Update+0x224>)
 8000ef8:	6a3a      	ldr	r2, [r7, #32]
 8000efa:	4613      	mov	r3, r2
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	4413      	add	r3, r2
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	4403      	add	r3, r0
 8000f04:	3304      	adds	r3, #4
 8000f06:	6019      	str	r1, [r3, #0]
			servos_asActions[iActionCnt].u32ServosBSSRVal = (uint32_t)psServo->u16GpioPin << 16;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	885b      	ldrh	r3, [r3, #2]
 8000f0c:	0419      	lsls	r1, r3, #16
 8000f0e:	4832      	ldr	r0, [pc, #200]	; (8000fd8 <SERVOS_Update+0x224>)
 8000f10:	6a3a      	ldr	r2, [r7, #32]
 8000f12:	4613      	mov	r3, r2
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	4413      	add	r3, r2
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	4403      	add	r3, r0
 8000f1c:	3308      	adds	r3, #8
 8000f1e:	6019      	str	r1, [r3, #0]
			servos_asActions[iActionCnt-1].u16ARR = iTimeUs - iTimeUsLast - 1;
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	b29a      	uxth	r2, r3
 8000f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	6a3a      	ldr	r2, [r7, #32]
 8000f2e:	3a01      	subs	r2, #1
 8000f30:	3b01      	subs	r3, #1
 8000f32:	b298      	uxth	r0, r3
 8000f34:	4928      	ldr	r1, [pc, #160]	; (8000fd8 <SERVOS_Update+0x224>)
 8000f36:	4613      	mov	r3, r2
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	4413      	add	r3, r2
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	440b      	add	r3, r1
 8000f40:	4602      	mov	r2, r0
 8000f42:	801a      	strh	r2, [r3, #0]
			iTimeUsLast = iTimeUs;
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	627b      	str	r3, [r7, #36]	; 0x24
			iActionCnt++;
 8000f48:	6a3b      	ldr	r3, [r7, #32]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	623b      	str	r3, [r7, #32]
		for (int p=0; p<psServosParallel->cnt; p++)
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	3301      	adds	r3, #1
 8000f52:	617b      	str	r3, [r7, #20]
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d8aa      	bhi.n	8000eb4 <SERVOS_Update+0x100>
	for (int s=0; s<SERVOS_SERIAL; s++)
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	3301      	adds	r3, #1
 8000f62:	61fb      	str	r3, [r7, #28]
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	2b07      	cmp	r3, #7
 8000f68:	f77f af30 	ble.w	8000dcc <SERVOS_Update+0x18>
		}
	}

	// Set the last action to a dummy but with time to get a 20ms period
	iTimeUs = SERVOS_TIME_PERIODE;
 8000f6c:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000f70:	613b      	str	r3, [r7, #16]
	servos_asActions[iActionCnt].pServosBSSR = &servos_u32DummyBSSR;
 8000f72:	4919      	ldr	r1, [pc, #100]	; (8000fd8 <SERVOS_Update+0x224>)
 8000f74:	6a3a      	ldr	r2, [r7, #32]
 8000f76:	4613      	mov	r3, r2
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	4413      	add	r3, r2
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	440b      	add	r3, r1
 8000f80:	3304      	adds	r3, #4
 8000f82:	4a16      	ldr	r2, [pc, #88]	; (8000fdc <SERVOS_Update+0x228>)
 8000f84:	601a      	str	r2, [r3, #0]
	servos_asActions[iActionCnt].u32ServosBSSRVal = 0;
 8000f86:	4914      	ldr	r1, [pc, #80]	; (8000fd8 <SERVOS_Update+0x224>)
 8000f88:	6a3a      	ldr	r2, [r7, #32]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	4413      	add	r3, r2
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	440b      	add	r3, r1
 8000f94:	3308      	adds	r3, #8
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
	servos_asActions[iActionCnt-1].u16ARR = iTimeUs - iTimeUsLast - 1;
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	1ad3      	subs	r3, r2, r3
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	6a3a      	ldr	r2, [r7, #32]
 8000fa8:	3a01      	subs	r2, #1
 8000faa:	3b01      	subs	r3, #1
 8000fac:	b298      	uxth	r0, r3
 8000fae:	490a      	ldr	r1, [pc, #40]	; (8000fd8 <SERVOS_Update+0x224>)
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	4413      	add	r3, r2
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	440b      	add	r3, r1
 8000fba:	4602      	mov	r2, r0
 8000fbc:	801a      	strh	r2, [r3, #0]
	servos_iActionLen = iActionCnt;
 8000fbe:	4a08      	ldr	r2, [pc, #32]	; (8000fe0 <SERVOS_Update+0x22c>)
 8000fc0:	6a3b      	ldr	r3, [r7, #32]
 8000fc2:	6013      	str	r3, [r2, #0]
}
 8000fc4:	bf00      	nop
 8000fc6:	372c      	adds	r7, #44	; 0x2c
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	200010b0 	.word	0x200010b0
 8000fd4:	2000119c 	.word	0x2000119c
 8000fd8:	200000d8 	.word	0x200000d8
 8000fdc:	20001190 	.word	0x20001190
 8000fe0:	20001198 	.word	0x20001198

08000fe4 <SERVOS_Task1ms>:
 *
 * It starts the creation of the action tabled triggered from the ISR
 *
 */
void SERVOS_Task1ms()
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	if (servos_bRequestUpdate)
 8000fe8:	4b05      	ldr	r3, [pc, #20]	; (8001000 <SERVOS_Task1ms+0x1c>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d004      	beq.n	8000ffa <SERVOS_Task1ms+0x16>
	{
		SERVOS_Update();
 8000ff0:	f7ff fee0 	bl	8000db4 <SERVOS_Update>
		servos_bRequestUpdate = 0;
 8000ff4:	4b02      	ldr	r3, [pc, #8]	; (8001000 <SERVOS_Task1ms+0x1c>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
	}
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	2000197c 	.word	0x2000197c

08001004 <SERVOS_ISR>:
 *
 * Generates a pulse on one of the 168 GPIOs
 *
 */
__INLINE void SERVOS_ISR(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
	// set port value as fast as possible
	*servos_pBSSR = servos_u32BSSRVal;
 8001008:	4b1c      	ldr	r3, [pc, #112]	; (800107c <SERVOS_ISR+0x78>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a1c      	ldr	r2, [pc, #112]	; (8001080 <SERVOS_ISR+0x7c>)
 800100e:	6812      	ldr	r2, [r2, #0]
 8001010:	601a      	str	r2, [r3, #0]
	// set timer for next edge
	htim6.Instance->ARR = servos_u16ARR;
 8001012:	4b1c      	ldr	r3, [pc, #112]	; (8001084 <SERVOS_ISR+0x80>)
 8001014:	881a      	ldrh	r2, [r3, #0]
 8001016:	4b1c      	ldr	r3, [pc, #112]	; (8001088 <SERVOS_ISR+0x84>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	62da      	str	r2, [r3, #44]	; 0x2c

	// Get the next action for the next IRQ
	servos_iActionCnt++;
 800101c:	4b1b      	ldr	r3, [pc, #108]	; (800108c <SERVOS_ISR+0x88>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	3301      	adds	r3, #1
 8001022:	4a1a      	ldr	r2, [pc, #104]	; (800108c <SERVOS_ISR+0x88>)
 8001024:	6013      	str	r3, [r2, #0]
	if (servos_iActionCnt >= servos_iActionLen)
 8001026:	4b19      	ldr	r3, [pc, #100]	; (800108c <SERVOS_ISR+0x88>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	4b19      	ldr	r3, [pc, #100]	; (8001090 <SERVOS_ISR+0x8c>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	429a      	cmp	r2, r3
 8001030:	db05      	blt.n	800103e <SERVOS_ISR+0x3a>
	{
		servos_iActionCnt = 1;
 8001032:	4b16      	ldr	r3, [pc, #88]	; (800108c <SERVOS_ISR+0x88>)
 8001034:	2201      	movs	r2, #1
 8001036:	601a      	str	r2, [r3, #0]
		servos_bRequestUpdate = 1;
 8001038:	4b16      	ldr	r3, [pc, #88]	; (8001094 <SERVOS_ISR+0x90>)
 800103a:	2201      	movs	r2, #1
 800103c:	601a      	str	r2, [r3, #0]
	}
	servos_pAction = &servos_asActions[servos_iActionCnt];
 800103e:	4b13      	ldr	r3, [pc, #76]	; (800108c <SERVOS_ISR+0x88>)
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	4613      	mov	r3, r2
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	4413      	add	r3, r2
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	4a13      	ldr	r2, [pc, #76]	; (8001098 <SERVOS_ISR+0x94>)
 800104c:	4413      	add	r3, r2
 800104e:	4a13      	ldr	r2, [pc, #76]	; (800109c <SERVOS_ISR+0x98>)
 8001050:	6013      	str	r3, [r2, #0]
	servos_u16ARR = servos_pAction->u16ARR;
 8001052:	4b12      	ldr	r3, [pc, #72]	; (800109c <SERVOS_ISR+0x98>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	881a      	ldrh	r2, [r3, #0]
 8001058:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <SERVOS_ISR+0x80>)
 800105a:	801a      	strh	r2, [r3, #0]
	servos_pBSSR = servos_pAction->pServosBSSR;
 800105c:	4b0f      	ldr	r3, [pc, #60]	; (800109c <SERVOS_ISR+0x98>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	4a06      	ldr	r2, [pc, #24]	; (800107c <SERVOS_ISR+0x78>)
 8001064:	6013      	str	r3, [r2, #0]
	servos_u32BSSRVal= servos_pAction->u32ServosBSSRVal;
 8001066:	4b0d      	ldr	r3, [pc, #52]	; (800109c <SERVOS_ISR+0x98>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	4a04      	ldr	r2, [pc, #16]	; (8001080 <SERVOS_ISR+0x7c>)
 800106e:	6013      	str	r3, [r2, #0]
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	20001980 	.word	0x20001980
 8001080:	2000198c 	.word	0x2000198c
 8001084:	20001984 	.word	0x20001984
 8001088:	20001990 	.word	0x20001990
 800108c:	20001194 	.word	0x20001194
 8001090:	20001198 	.word	0x20001198
 8001094:	2000197c 	.word	0x2000197c
 8001098:	200000d8 	.word	0x200000d8
 800109c:	2000002c 	.word	0x2000002c

080010a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80010a6:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <HAL_MspInit+0x44>)
 80010a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010aa:	4a0e      	ldr	r2, [pc, #56]	; (80010e4 <HAL_MspInit+0x44>)
 80010ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b0:	6413      	str	r3, [r2, #64]	; 0x40
 80010b2:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <HAL_MspInit+0x44>)
 80010b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010be:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <HAL_MspInit+0x44>)
 80010c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c2:	4a08      	ldr	r2, [pc, #32]	; (80010e4 <HAL_MspInit+0x44>)
 80010c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ca:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <HAL_MspInit+0x44>)
 80010cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010d2:	603b      	str	r3, [r7, #0]
 80010d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	40023800 	.word	0x40023800

080010e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010ec:	e7fe      	b.n	80010ec <NMI_Handler+0x4>

080010ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010f2:	e7fe      	b.n	80010f2 <HardFault_Handler+0x4>

080010f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f8:	e7fe      	b.n	80010f8 <MemManage_Handler+0x4>

080010fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010fa:	b480      	push	{r7}
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010fe:	e7fe      	b.n	80010fe <BusFault_Handler+0x4>

08001100 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001104:	e7fe      	b.n	8001104 <UsageFault_Handler+0x4>

08001106 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  bTick1ms = 1;
 8001134:	4b03      	ldr	r3, [pc, #12]	; (8001144 <SysTick_Handler+0x14>)
 8001136:	2201      	movs	r2, #1
 8001138:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800113a:	f000 f8eb 	bl	8001314 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000028 	.word	0x20000028

08001148 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
  SERVOS_ISR();
 800114c:	f7ff ff5a 	bl	8001004 <SERVOS_ISR>
  __HAL_TIM_CLEAR_IT(&htim6, TIM_IT_UPDATE);
 8001150:	4b03      	ldr	r3, [pc, #12]	; (8001160 <TIM6_DAC_IRQHandler+0x18>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f06f 0201 	mvn.w	r2, #1
 8001158:	611a      	str	r2, [r3, #16]
  return;
 800115a:	bf00      	nop
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20001990 	.word	0x20001990

08001164 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001168:	4b08      	ldr	r3, [pc, #32]	; (800118c <SystemInit+0x28>)
 800116a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800116e:	4a07      	ldr	r2, [pc, #28]	; (800118c <SystemInit+0x28>)
 8001170:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001174:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001178:	4b04      	ldr	r3, [pc, #16]	; (800118c <SystemInit+0x28>)
 800117a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800117e:	609a      	str	r2, [r3, #8]
#endif
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001196:	1d3b      	adds	r3, r7, #4
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 80011a0:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <MX_TIM6_Init+0x64>)
 80011a2:	4a15      	ldr	r2, [pc, #84]	; (80011f8 <MX_TIM6_Init+0x68>)
 80011a4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 107;
 80011a6:	4b13      	ldr	r3, [pc, #76]	; (80011f4 <MX_TIM6_Init+0x64>)
 80011a8:	226b      	movs	r2, #107	; 0x6b
 80011aa:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ac:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <MX_TIM6_Init+0x64>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80011b2:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <MX_TIM6_Init+0x64>)
 80011b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011b8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ba:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <MX_TIM6_Init+0x64>)
 80011bc:	2200      	movs	r2, #0
 80011be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80011c0:	480c      	ldr	r0, [pc, #48]	; (80011f4 <MX_TIM6_Init+0x64>)
 80011c2:	f001 f865 	bl	8002290 <HAL_TIM_Base_Init>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80011cc:	f7ff fc14 	bl	80009f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d0:	2300      	movs	r3, #0
 80011d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80011d8:	1d3b      	adds	r3, r7, #4
 80011da:	4619      	mov	r1, r3
 80011dc:	4805      	ldr	r0, [pc, #20]	; (80011f4 <MX_TIM6_Init+0x64>)
 80011de:	f001 f94d 	bl	800247c <HAL_TIMEx_MasterConfigSynchronization>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80011e8:	f7ff fc06 	bl	80009f8 <Error_Handler>
  }

}
 80011ec:	bf00      	nop
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20001990 	.word	0x20001990
 80011f8:	40001000 	.word	0x40001000

080011fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a0d      	ldr	r2, [pc, #52]	; (8001240 <HAL_TIM_Base_MspInit+0x44>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d113      	bne.n	8001236 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800120e:	4b0d      	ldr	r3, [pc, #52]	; (8001244 <HAL_TIM_Base_MspInit+0x48>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	4a0c      	ldr	r2, [pc, #48]	; (8001244 <HAL_TIM_Base_MspInit+0x48>)
 8001214:	f043 0310 	orr.w	r3, r3, #16
 8001218:	6413      	str	r3, [r2, #64]	; 0x40
 800121a:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <HAL_TIM_Base_MspInit+0x48>)
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	f003 0310 	and.w	r3, r3, #16
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001226:	2200      	movs	r2, #0
 8001228:	2100      	movs	r1, #0
 800122a:	2036      	movs	r0, #54	; 0x36
 800122c:	f000 f96d 	bl	800150a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001230:	2036      	movs	r0, #54	; 0x36
 8001232:	f000 f986 	bl	8001542 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001236:	bf00      	nop
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40001000 	.word	0x40001000
 8001244:	40023800 	.word	0x40023800

08001248 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001248:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001280 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800124c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800124e:	e003      	b.n	8001258 <LoopCopyDataInit>

08001250 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001250:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001252:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001254:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001256:	3104      	adds	r1, #4

08001258 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001258:	480b      	ldr	r0, [pc, #44]	; (8001288 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800125a:	4b0c      	ldr	r3, [pc, #48]	; (800128c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800125c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800125e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001260:	d3f6      	bcc.n	8001250 <CopyDataInit>
  ldr  r2, =_sbss
 8001262:	4a0b      	ldr	r2, [pc, #44]	; (8001290 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001264:	e002      	b.n	800126c <LoopFillZerobss>

08001266 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001266:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001268:	f842 3b04 	str.w	r3, [r2], #4

0800126c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800126c:	4b09      	ldr	r3, [pc, #36]	; (8001294 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800126e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001270:	d3f9      	bcc.n	8001266 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001272:	f7ff ff77 	bl	8001164 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001276:	f001 f98f 	bl	8002598 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800127a:	f7ff fa85 	bl	8000788 <main>
  bx  lr    
 800127e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001280:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001284:	08002628 	.word	0x08002628
  ldr  r0, =_sdata
 8001288:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800128c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001290:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001294:	200019d4 	.word	0x200019d4

08001298 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001298:	e7fe      	b.n	8001298 <ADC_IRQHandler>

0800129a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800129e:	2003      	movs	r0, #3
 80012a0:	f000 f928 	bl	80014f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012a4:	2000      	movs	r0, #0
 80012a6:	f000 f805 	bl	80012b4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80012aa:	f7ff fef9 	bl	80010a0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80012ae:	2300      	movs	r3, #0
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012bc:	4b12      	ldr	r3, [pc, #72]	; (8001308 <HAL_InitTick+0x54>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4b12      	ldr	r3, [pc, #72]	; (800130c <HAL_InitTick+0x58>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	4619      	mov	r1, r3
 80012c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 f943 	bl	800155e <HAL_SYSTICK_Config>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e00e      	b.n	8001300 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2b0f      	cmp	r3, #15
 80012e6:	d80a      	bhi.n	80012fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012e8:	2200      	movs	r2, #0
 80012ea:	6879      	ldr	r1, [r7, #4]
 80012ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012f0:	f000 f90b 	bl	800150a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012f4:	4a06      	ldr	r2, [pc, #24]	; (8001310 <HAL_InitTick+0x5c>)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012fa:	2300      	movs	r3, #0
 80012fc:	e000      	b.n	8001300 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
}
 8001300:	4618      	mov	r0, r3
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000000 	.word	0x20000000
 800130c:	20000008 	.word	0x20000008
 8001310:	20000004 	.word	0x20000004

08001314 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001318:	4b06      	ldr	r3, [pc, #24]	; (8001334 <HAL_IncTick+0x20>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	461a      	mov	r2, r3
 800131e:	4b06      	ldr	r3, [pc, #24]	; (8001338 <HAL_IncTick+0x24>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4413      	add	r3, r2
 8001324:	4a04      	ldr	r2, [pc, #16]	; (8001338 <HAL_IncTick+0x24>)
 8001326:	6013      	str	r3, [r2, #0]
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	20000008 	.word	0x20000008
 8001338:	200019d0 	.word	0x200019d0

0800133c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  return uwTick;
 8001340:	4b03      	ldr	r3, [pc, #12]	; (8001350 <HAL_GetTick+0x14>)
 8001342:	681b      	ldr	r3, [r3, #0]
}
 8001344:	4618      	mov	r0, r3
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	200019d0 	.word	0x200019d0

08001354 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001364:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <__NVIC_SetPriorityGrouping+0x40>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800136a:	68ba      	ldr	r2, [r7, #8]
 800136c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001370:	4013      	ands	r3, r2
 8001372:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800137c:	4b06      	ldr	r3, [pc, #24]	; (8001398 <__NVIC_SetPriorityGrouping+0x44>)
 800137e:	4313      	orrs	r3, r2
 8001380:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001382:	4a04      	ldr	r2, [pc, #16]	; (8001394 <__NVIC_SetPriorityGrouping+0x40>)
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	60d3      	str	r3, [r2, #12]
}
 8001388:	bf00      	nop
 800138a:	3714      	adds	r7, #20
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	e000ed00 	.word	0xe000ed00
 8001398:	05fa0000 	.word	0x05fa0000

0800139c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013a0:	4b04      	ldr	r3, [pc, #16]	; (80013b4 <__NVIC_GetPriorityGrouping+0x18>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	0a1b      	lsrs	r3, r3, #8
 80013a6:	f003 0307 	and.w	r3, r3, #7
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	db0b      	blt.n	80013e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	f003 021f 	and.w	r2, r3, #31
 80013d0:	4907      	ldr	r1, [pc, #28]	; (80013f0 <__NVIC_EnableIRQ+0x38>)
 80013d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d6:	095b      	lsrs	r3, r3, #5
 80013d8:	2001      	movs	r0, #1
 80013da:	fa00 f202 	lsl.w	r2, r0, r2
 80013de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	e000e100 	.word	0xe000e100

080013f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	6039      	str	r1, [r7, #0]
 80013fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001404:	2b00      	cmp	r3, #0
 8001406:	db0a      	blt.n	800141e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	b2da      	uxtb	r2, r3
 800140c:	490c      	ldr	r1, [pc, #48]	; (8001440 <__NVIC_SetPriority+0x4c>)
 800140e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001412:	0112      	lsls	r2, r2, #4
 8001414:	b2d2      	uxtb	r2, r2
 8001416:	440b      	add	r3, r1
 8001418:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800141c:	e00a      	b.n	8001434 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	b2da      	uxtb	r2, r3
 8001422:	4908      	ldr	r1, [pc, #32]	; (8001444 <__NVIC_SetPriority+0x50>)
 8001424:	79fb      	ldrb	r3, [r7, #7]
 8001426:	f003 030f 	and.w	r3, r3, #15
 800142a:	3b04      	subs	r3, #4
 800142c:	0112      	lsls	r2, r2, #4
 800142e:	b2d2      	uxtb	r2, r2
 8001430:	440b      	add	r3, r1
 8001432:	761a      	strb	r2, [r3, #24]
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	e000e100 	.word	0xe000e100
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001448:	b480      	push	{r7}
 800144a:	b089      	sub	sp, #36	; 0x24
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	f1c3 0307 	rsb	r3, r3, #7
 8001462:	2b04      	cmp	r3, #4
 8001464:	bf28      	it	cs
 8001466:	2304      	movcs	r3, #4
 8001468:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	3304      	adds	r3, #4
 800146e:	2b06      	cmp	r3, #6
 8001470:	d902      	bls.n	8001478 <NVIC_EncodePriority+0x30>
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	3b03      	subs	r3, #3
 8001476:	e000      	b.n	800147a <NVIC_EncodePriority+0x32>
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800147c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43da      	mvns	r2, r3
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	401a      	ands	r2, r3
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001490:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	fa01 f303 	lsl.w	r3, r1, r3
 800149a:	43d9      	mvns	r1, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a0:	4313      	orrs	r3, r2
         );
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3724      	adds	r7, #36	; 0x24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
	...

080014b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3b01      	subs	r3, #1
 80014bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014c0:	d301      	bcc.n	80014c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014c2:	2301      	movs	r3, #1
 80014c4:	e00f      	b.n	80014e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014c6:	4a0a      	ldr	r2, [pc, #40]	; (80014f0 <SysTick_Config+0x40>)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	3b01      	subs	r3, #1
 80014cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ce:	210f      	movs	r1, #15
 80014d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014d4:	f7ff ff8e 	bl	80013f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014d8:	4b05      	ldr	r3, [pc, #20]	; (80014f0 <SysTick_Config+0x40>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014de:	4b04      	ldr	r3, [pc, #16]	; (80014f0 <SysTick_Config+0x40>)
 80014e0:	2207      	movs	r2, #7
 80014e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	e000e010 	.word	0xe000e010

080014f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f7ff ff29 	bl	8001354 <__NVIC_SetPriorityGrouping>
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800150a:	b580      	push	{r7, lr}
 800150c:	b086      	sub	sp, #24
 800150e:	af00      	add	r7, sp, #0
 8001510:	4603      	mov	r3, r0
 8001512:	60b9      	str	r1, [r7, #8]
 8001514:	607a      	str	r2, [r7, #4]
 8001516:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800151c:	f7ff ff3e 	bl	800139c <__NVIC_GetPriorityGrouping>
 8001520:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	68b9      	ldr	r1, [r7, #8]
 8001526:	6978      	ldr	r0, [r7, #20]
 8001528:	f7ff ff8e 	bl	8001448 <NVIC_EncodePriority>
 800152c:	4602      	mov	r2, r0
 800152e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001532:	4611      	mov	r1, r2
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff ff5d 	bl	80013f4 <__NVIC_SetPriority>
}
 800153a:	bf00      	nop
 800153c:	3718      	adds	r7, #24
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b082      	sub	sp, #8
 8001546:	af00      	add	r7, sp, #0
 8001548:	4603      	mov	r3, r0
 800154a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800154c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff ff31 	bl	80013b8 <__NVIC_EnableIRQ>
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b082      	sub	sp, #8
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f7ff ffa2 	bl	80014b0 <SysTick_Config>
 800156c:	4603      	mov	r3, r0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
	...

08001578 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001578:	b480      	push	{r7}
 800157a:	b089      	sub	sp, #36	; 0x24
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001582:	2300      	movs	r3, #0
 8001584:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001586:	2300      	movs	r3, #0
 8001588:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800158a:	2300      	movs	r3, #0
 800158c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800158e:	2300      	movs	r3, #0
 8001590:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001592:	2300      	movs	r3, #0
 8001594:	61fb      	str	r3, [r7, #28]
 8001596:	e175      	b.n	8001884 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001598:	2201      	movs	r2, #1
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	697a      	ldr	r2, [r7, #20]
 80015a8:	4013      	ands	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	f040 8164 	bne.w	800187e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d00b      	beq.n	80015d6 <HAL_GPIO_Init+0x5e>
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d007      	beq.n	80015d6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015ca:	2b11      	cmp	r3, #17
 80015cc:	d003      	beq.n	80015d6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	2b12      	cmp	r3, #18
 80015d4:	d130      	bne.n	8001638 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	2203      	movs	r2, #3
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	43db      	mvns	r3, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4013      	ands	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	68da      	ldr	r2, [r3, #12]
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800160c:	2201      	movs	r2, #1
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	43db      	mvns	r3, r3
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	4013      	ands	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	091b      	lsrs	r3, r3, #4
 8001622:	f003 0201 	and.w	r2, r3, #1
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4313      	orrs	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	2203      	movs	r2, #3
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	43db      	mvns	r3, r3
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4013      	ands	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	689a      	ldr	r2, [r3, #8]
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	4313      	orrs	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	2b02      	cmp	r3, #2
 800166e:	d003      	beq.n	8001678 <HAL_GPIO_Init+0x100>
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	2b12      	cmp	r3, #18
 8001676:	d123      	bne.n	80016c0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	08da      	lsrs	r2, r3, #3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3208      	adds	r2, #8
 8001680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001684:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	f003 0307 	and.w	r3, r3, #7
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	220f      	movs	r2, #15
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	43db      	mvns	r3, r3
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	4013      	ands	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	691a      	ldr	r2, [r3, #16]
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	08da      	lsrs	r2, r3, #3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	3208      	adds	r2, #8
 80016ba:	69b9      	ldr	r1, [r7, #24]
 80016bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	2203      	movs	r2, #3
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	43db      	mvns	r3, r3
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	4013      	ands	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f003 0203 	and.w	r2, r3, #3
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	f000 80be 	beq.w	800187e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001702:	4b65      	ldr	r3, [pc, #404]	; (8001898 <HAL_GPIO_Init+0x320>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001706:	4a64      	ldr	r2, [pc, #400]	; (8001898 <HAL_GPIO_Init+0x320>)
 8001708:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800170c:	6453      	str	r3, [r2, #68]	; 0x44
 800170e:	4b62      	ldr	r3, [pc, #392]	; (8001898 <HAL_GPIO_Init+0x320>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800171a:	4a60      	ldr	r2, [pc, #384]	; (800189c <HAL_GPIO_Init+0x324>)
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	089b      	lsrs	r3, r3, #2
 8001720:	3302      	adds	r3, #2
 8001722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001726:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	f003 0303 	and.w	r3, r3, #3
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	220f      	movs	r2, #15
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	43db      	mvns	r3, r3
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4013      	ands	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a57      	ldr	r2, [pc, #348]	; (80018a0 <HAL_GPIO_Init+0x328>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d037      	beq.n	80017b6 <HAL_GPIO_Init+0x23e>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a56      	ldr	r2, [pc, #344]	; (80018a4 <HAL_GPIO_Init+0x32c>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d031      	beq.n	80017b2 <HAL_GPIO_Init+0x23a>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a55      	ldr	r2, [pc, #340]	; (80018a8 <HAL_GPIO_Init+0x330>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d02b      	beq.n	80017ae <HAL_GPIO_Init+0x236>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a54      	ldr	r2, [pc, #336]	; (80018ac <HAL_GPIO_Init+0x334>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d025      	beq.n	80017aa <HAL_GPIO_Init+0x232>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a53      	ldr	r2, [pc, #332]	; (80018b0 <HAL_GPIO_Init+0x338>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d01f      	beq.n	80017a6 <HAL_GPIO_Init+0x22e>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a52      	ldr	r2, [pc, #328]	; (80018b4 <HAL_GPIO_Init+0x33c>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d019      	beq.n	80017a2 <HAL_GPIO_Init+0x22a>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a51      	ldr	r2, [pc, #324]	; (80018b8 <HAL_GPIO_Init+0x340>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d013      	beq.n	800179e <HAL_GPIO_Init+0x226>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a50      	ldr	r2, [pc, #320]	; (80018bc <HAL_GPIO_Init+0x344>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d00d      	beq.n	800179a <HAL_GPIO_Init+0x222>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a4f      	ldr	r2, [pc, #316]	; (80018c0 <HAL_GPIO_Init+0x348>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d007      	beq.n	8001796 <HAL_GPIO_Init+0x21e>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a4e      	ldr	r2, [pc, #312]	; (80018c4 <HAL_GPIO_Init+0x34c>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d101      	bne.n	8001792 <HAL_GPIO_Init+0x21a>
 800178e:	2309      	movs	r3, #9
 8001790:	e012      	b.n	80017b8 <HAL_GPIO_Init+0x240>
 8001792:	230a      	movs	r3, #10
 8001794:	e010      	b.n	80017b8 <HAL_GPIO_Init+0x240>
 8001796:	2308      	movs	r3, #8
 8001798:	e00e      	b.n	80017b8 <HAL_GPIO_Init+0x240>
 800179a:	2307      	movs	r3, #7
 800179c:	e00c      	b.n	80017b8 <HAL_GPIO_Init+0x240>
 800179e:	2306      	movs	r3, #6
 80017a0:	e00a      	b.n	80017b8 <HAL_GPIO_Init+0x240>
 80017a2:	2305      	movs	r3, #5
 80017a4:	e008      	b.n	80017b8 <HAL_GPIO_Init+0x240>
 80017a6:	2304      	movs	r3, #4
 80017a8:	e006      	b.n	80017b8 <HAL_GPIO_Init+0x240>
 80017aa:	2303      	movs	r3, #3
 80017ac:	e004      	b.n	80017b8 <HAL_GPIO_Init+0x240>
 80017ae:	2302      	movs	r3, #2
 80017b0:	e002      	b.n	80017b8 <HAL_GPIO_Init+0x240>
 80017b2:	2301      	movs	r3, #1
 80017b4:	e000      	b.n	80017b8 <HAL_GPIO_Init+0x240>
 80017b6:	2300      	movs	r3, #0
 80017b8:	69fa      	ldr	r2, [r7, #28]
 80017ba:	f002 0203 	and.w	r2, r2, #3
 80017be:	0092      	lsls	r2, r2, #2
 80017c0:	4093      	lsls	r3, r2
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80017c8:	4934      	ldr	r1, [pc, #208]	; (800189c <HAL_GPIO_Init+0x324>)
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	089b      	lsrs	r3, r3, #2
 80017ce:	3302      	adds	r3, #2
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017d6:	4b3c      	ldr	r3, [pc, #240]	; (80018c8 <HAL_GPIO_Init+0x350>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	43db      	mvns	r3, r3
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4013      	ands	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d003      	beq.n	80017fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017fa:	4a33      	ldr	r2, [pc, #204]	; (80018c8 <HAL_GPIO_Init+0x350>)
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001800:	4b31      	ldr	r3, [pc, #196]	; (80018c8 <HAL_GPIO_Init+0x350>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	43db      	mvns	r3, r3
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	4013      	ands	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d003      	beq.n	8001824 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	4313      	orrs	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001824:	4a28      	ldr	r2, [pc, #160]	; (80018c8 <HAL_GPIO_Init+0x350>)
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800182a:	4b27      	ldr	r3, [pc, #156]	; (80018c8 <HAL_GPIO_Init+0x350>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	43db      	mvns	r3, r3
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	4013      	ands	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d003      	beq.n	800184e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	4313      	orrs	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800184e:	4a1e      	ldr	r2, [pc, #120]	; (80018c8 <HAL_GPIO_Init+0x350>)
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001854:	4b1c      	ldr	r3, [pc, #112]	; (80018c8 <HAL_GPIO_Init+0x350>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	43db      	mvns	r3, r3
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	4013      	ands	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d003      	beq.n	8001878 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	4313      	orrs	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001878:	4a13      	ldr	r2, [pc, #76]	; (80018c8 <HAL_GPIO_Init+0x350>)
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	3301      	adds	r3, #1
 8001882:	61fb      	str	r3, [r7, #28]
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	2b0f      	cmp	r3, #15
 8001888:	f67f ae86 	bls.w	8001598 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800188c:	bf00      	nop
 800188e:	3724      	adds	r7, #36	; 0x24
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	40023800 	.word	0x40023800
 800189c:	40013800 	.word	0x40013800
 80018a0:	40020000 	.word	0x40020000
 80018a4:	40020400 	.word	0x40020400
 80018a8:	40020800 	.word	0x40020800
 80018ac:	40020c00 	.word	0x40020c00
 80018b0:	40021000 	.word	0x40021000
 80018b4:	40021400 	.word	0x40021400
 80018b8:	40021800 	.word	0x40021800
 80018bc:	40021c00 	.word	0x40021c00
 80018c0:	40022000 	.word	0x40022000
 80018c4:	40022400 	.word	0x40022400
 80018c8:	40013c00 	.word	0x40013c00

080018cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	460b      	mov	r3, r1
 80018d6:	807b      	strh	r3, [r7, #2]
 80018d8:	4613      	mov	r3, r2
 80018da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018dc:	787b      	ldrb	r3, [r7, #1]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d003      	beq.n	80018ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018e2:	887a      	ldrh	r2, [r7, #2]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80018e8:	e003      	b.n	80018f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80018ea:	887b      	ldrh	r3, [r7, #2]
 80018ec:	041a      	lsls	r2, r3, #16
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	619a      	str	r2, [r3, #24]
}
 80018f2:	bf00      	nop
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
	...

08001900 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001904:	4b05      	ldr	r3, [pc, #20]	; (800191c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a04      	ldr	r2, [pc, #16]	; (800191c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800190a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800190e:	6013      	str	r3, [r2, #0]
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	40007000 	.word	0x40007000

08001920 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001926:	2300      	movs	r3, #0
 8001928:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800192a:	4b23      	ldr	r3, [pc, #140]	; (80019b8 <HAL_PWREx_EnableOverDrive+0x98>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	4a22      	ldr	r2, [pc, #136]	; (80019b8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001934:	6413      	str	r3, [r2, #64]	; 0x40
 8001936:	4b20      	ldr	r3, [pc, #128]	; (80019b8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193e:	603b      	str	r3, [r7, #0]
 8001940:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001942:	4b1e      	ldr	r3, [pc, #120]	; (80019bc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a1d      	ldr	r2, [pc, #116]	; (80019bc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800194c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800194e:	f7ff fcf5 	bl	800133c <HAL_GetTick>
 8001952:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001954:	e009      	b.n	800196a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001956:	f7ff fcf1 	bl	800133c <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001964:	d901      	bls.n	800196a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e022      	b.n	80019b0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800196a:	4b14      	ldr	r3, [pc, #80]	; (80019bc <HAL_PWREx_EnableOverDrive+0x9c>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001972:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001976:	d1ee      	bne.n	8001956 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001978:	4b10      	ldr	r3, [pc, #64]	; (80019bc <HAL_PWREx_EnableOverDrive+0x9c>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a0f      	ldr	r2, [pc, #60]	; (80019bc <HAL_PWREx_EnableOverDrive+0x9c>)
 800197e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001982:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001984:	f7ff fcda 	bl	800133c <HAL_GetTick>
 8001988:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800198a:	e009      	b.n	80019a0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800198c:	f7ff fcd6 	bl	800133c <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800199a:	d901      	bls.n	80019a0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e007      	b.n	80019b0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80019a0:	4b06      	ldr	r3, [pc, #24]	; (80019bc <HAL_PWREx_EnableOverDrive+0x9c>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80019ac:	d1ee      	bne.n	800198c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40023800 	.word	0x40023800
 80019bc:	40007000 	.word	0x40007000

080019c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80019c8:	2300      	movs	r3, #0
 80019ca:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e291      	b.n	8001efa <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	2b00      	cmp	r3, #0
 80019e0:	f000 8087 	beq.w	8001af2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019e4:	4b96      	ldr	r3, [pc, #600]	; (8001c40 <HAL_RCC_OscConfig+0x280>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f003 030c 	and.w	r3, r3, #12
 80019ec:	2b04      	cmp	r3, #4
 80019ee:	d00c      	beq.n	8001a0a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019f0:	4b93      	ldr	r3, [pc, #588]	; (8001c40 <HAL_RCC_OscConfig+0x280>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f003 030c 	and.w	r3, r3, #12
 80019f8:	2b08      	cmp	r3, #8
 80019fa:	d112      	bne.n	8001a22 <HAL_RCC_OscConfig+0x62>
 80019fc:	4b90      	ldr	r3, [pc, #576]	; (8001c40 <HAL_RCC_OscConfig+0x280>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a08:	d10b      	bne.n	8001a22 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a0a:	4b8d      	ldr	r3, [pc, #564]	; (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d06c      	beq.n	8001af0 <HAL_RCC_OscConfig+0x130>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d168      	bne.n	8001af0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e26b      	b.n	8001efa <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a2a:	d106      	bne.n	8001a3a <HAL_RCC_OscConfig+0x7a>
 8001a2c:	4b84      	ldr	r3, [pc, #528]	; (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a83      	ldr	r2, [pc, #524]	; (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001a32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a36:	6013      	str	r3, [r2, #0]
 8001a38:	e02e      	b.n	8001a98 <HAL_RCC_OscConfig+0xd8>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d10c      	bne.n	8001a5c <HAL_RCC_OscConfig+0x9c>
 8001a42:	4b7f      	ldr	r3, [pc, #508]	; (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a7e      	ldr	r2, [pc, #504]	; (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001a48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a4c:	6013      	str	r3, [r2, #0]
 8001a4e:	4b7c      	ldr	r3, [pc, #496]	; (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a7b      	ldr	r2, [pc, #492]	; (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001a54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a58:	6013      	str	r3, [r2, #0]
 8001a5a:	e01d      	b.n	8001a98 <HAL_RCC_OscConfig+0xd8>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a64:	d10c      	bne.n	8001a80 <HAL_RCC_OscConfig+0xc0>
 8001a66:	4b76      	ldr	r3, [pc, #472]	; (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a75      	ldr	r2, [pc, #468]	; (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001a6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a70:	6013      	str	r3, [r2, #0]
 8001a72:	4b73      	ldr	r3, [pc, #460]	; (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a72      	ldr	r2, [pc, #456]	; (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a7c:	6013      	str	r3, [r2, #0]
 8001a7e:	e00b      	b.n	8001a98 <HAL_RCC_OscConfig+0xd8>
 8001a80:	4b6f      	ldr	r3, [pc, #444]	; (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a6e      	ldr	r2, [pc, #440]	; (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001a86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a8a:	6013      	str	r3, [r2, #0]
 8001a8c:	4b6c      	ldr	r3, [pc, #432]	; (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a6b      	ldr	r2, [pc, #428]	; (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001a92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d013      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa0:	f7ff fc4c 	bl	800133c <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aa8:	f7ff fc48 	bl	800133c <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b64      	cmp	r3, #100	; 0x64
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e21f      	b.n	8001efa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aba:	4b61      	ldr	r3, [pc, #388]	; (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d0f0      	beq.n	8001aa8 <HAL_RCC_OscConfig+0xe8>
 8001ac6:	e014      	b.n	8001af2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac8:	f7ff fc38 	bl	800133c <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ad0:	f7ff fc34 	bl	800133c <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b64      	cmp	r3, #100	; 0x64
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e20b      	b.n	8001efa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ae2:	4b57      	ldr	r3, [pc, #348]	; (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1f0      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x110>
 8001aee:	e000      	b.n	8001af2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d069      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001afe:	4b50      	ldr	r3, [pc, #320]	; (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f003 030c 	and.w	r3, r3, #12
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d00b      	beq.n	8001b22 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b0a:	4b4d      	ldr	r3, [pc, #308]	; (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 030c 	and.w	r3, r3, #12
 8001b12:	2b08      	cmp	r3, #8
 8001b14:	d11c      	bne.n	8001b50 <HAL_RCC_OscConfig+0x190>
 8001b16:	4b4a      	ldr	r3, [pc, #296]	; (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d116      	bne.n	8001b50 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b22:	4b47      	ldr	r3, [pc, #284]	; (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d005      	beq.n	8001b3a <HAL_RCC_OscConfig+0x17a>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d001      	beq.n	8001b3a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e1df      	b.n	8001efa <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b3a:	4b41      	ldr	r3, [pc, #260]	; (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	493d      	ldr	r1, [pc, #244]	; (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b4e:	e040      	b.n	8001bd2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d023      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b58:	4b39      	ldr	r3, [pc, #228]	; (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a38      	ldr	r2, [pc, #224]	; (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001b5e:	f043 0301 	orr.w	r3, r3, #1
 8001b62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b64:	f7ff fbea 	bl	800133c <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b6c:	f7ff fbe6 	bl	800133c <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e1bd      	b.n	8001efa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b7e:	4b30      	ldr	r3, [pc, #192]	; (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d0f0      	beq.n	8001b6c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b8a:	4b2d      	ldr	r3, [pc, #180]	; (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	4929      	ldr	r1, [pc, #164]	; (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	600b      	str	r3, [r1, #0]
 8001b9e:	e018      	b.n	8001bd2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ba0:	4b27      	ldr	r3, [pc, #156]	; (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a26      	ldr	r2, [pc, #152]	; (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001ba6:	f023 0301 	bic.w	r3, r3, #1
 8001baa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bac:	f7ff fbc6 	bl	800133c <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bb4:	f7ff fbc2 	bl	800133c <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e199      	b.n	8001efa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bc6:	4b1e      	ldr	r3, [pc, #120]	; (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d1f0      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0308 	and.w	r3, r3, #8
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d038      	beq.n	8001c50 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d019      	beq.n	8001c1a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001be6:	4b16      	ldr	r3, [pc, #88]	; (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001be8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bea:	4a15      	ldr	r2, [pc, #84]	; (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf2:	f7ff fba3 	bl	800133c <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bf8:	e008      	b.n	8001c0c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bfa:	f7ff fb9f 	bl	800133c <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e176      	b.n	8001efa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c0c:	4b0c      	ldr	r3, [pc, #48]	; (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001c0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d0f0      	beq.n	8001bfa <HAL_RCC_OscConfig+0x23a>
 8001c18:	e01a      	b.n	8001c50 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c1a:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001c1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c1e:	4a08      	ldr	r2, [pc, #32]	; (8001c40 <HAL_RCC_OscConfig+0x280>)
 8001c20:	f023 0301 	bic.w	r3, r3, #1
 8001c24:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c26:	f7ff fb89 	bl	800133c <HAL_GetTick>
 8001c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c2c:	e00a      	b.n	8001c44 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c2e:	f7ff fb85 	bl	800133c <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d903      	bls.n	8001c44 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e15c      	b.n	8001efa <HAL_RCC_OscConfig+0x53a>
 8001c40:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c44:	4b91      	ldr	r3, [pc, #580]	; (8001e8c <HAL_RCC_OscConfig+0x4cc>)
 8001c46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1ee      	bne.n	8001c2e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	f000 80a4 	beq.w	8001da6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c5e:	4b8b      	ldr	r3, [pc, #556]	; (8001e8c <HAL_RCC_OscConfig+0x4cc>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d10d      	bne.n	8001c86 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c6a:	4b88      	ldr	r3, [pc, #544]	; (8001e8c <HAL_RCC_OscConfig+0x4cc>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	4a87      	ldr	r2, [pc, #540]	; (8001e8c <HAL_RCC_OscConfig+0x4cc>)
 8001c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c74:	6413      	str	r3, [r2, #64]	; 0x40
 8001c76:	4b85      	ldr	r3, [pc, #532]	; (8001e8c <HAL_RCC_OscConfig+0x4cc>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7e:	60bb      	str	r3, [r7, #8]
 8001c80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c82:	2301      	movs	r3, #1
 8001c84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c86:	4b82      	ldr	r3, [pc, #520]	; (8001e90 <HAL_RCC_OscConfig+0x4d0>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d118      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001c92:	4b7f      	ldr	r3, [pc, #508]	; (8001e90 <HAL_RCC_OscConfig+0x4d0>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a7e      	ldr	r2, [pc, #504]	; (8001e90 <HAL_RCC_OscConfig+0x4d0>)
 8001c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c9e:	f7ff fb4d 	bl	800133c <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ca4:	e008      	b.n	8001cb8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ca6:	f7ff fb49 	bl	800133c <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b64      	cmp	r3, #100	; 0x64
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e120      	b.n	8001efa <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cb8:	4b75      	ldr	r3, [pc, #468]	; (8001e90 <HAL_RCC_OscConfig+0x4d0>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d0f0      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d106      	bne.n	8001cda <HAL_RCC_OscConfig+0x31a>
 8001ccc:	4b6f      	ldr	r3, [pc, #444]	; (8001e8c <HAL_RCC_OscConfig+0x4cc>)
 8001cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd0:	4a6e      	ldr	r2, [pc, #440]	; (8001e8c <HAL_RCC_OscConfig+0x4cc>)
 8001cd2:	f043 0301 	orr.w	r3, r3, #1
 8001cd6:	6713      	str	r3, [r2, #112]	; 0x70
 8001cd8:	e02d      	b.n	8001d36 <HAL_RCC_OscConfig+0x376>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d10c      	bne.n	8001cfc <HAL_RCC_OscConfig+0x33c>
 8001ce2:	4b6a      	ldr	r3, [pc, #424]	; (8001e8c <HAL_RCC_OscConfig+0x4cc>)
 8001ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce6:	4a69      	ldr	r2, [pc, #420]	; (8001e8c <HAL_RCC_OscConfig+0x4cc>)
 8001ce8:	f023 0301 	bic.w	r3, r3, #1
 8001cec:	6713      	str	r3, [r2, #112]	; 0x70
 8001cee:	4b67      	ldr	r3, [pc, #412]	; (8001e8c <HAL_RCC_OscConfig+0x4cc>)
 8001cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf2:	4a66      	ldr	r2, [pc, #408]	; (8001e8c <HAL_RCC_OscConfig+0x4cc>)
 8001cf4:	f023 0304 	bic.w	r3, r3, #4
 8001cf8:	6713      	str	r3, [r2, #112]	; 0x70
 8001cfa:	e01c      	b.n	8001d36 <HAL_RCC_OscConfig+0x376>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	2b05      	cmp	r3, #5
 8001d02:	d10c      	bne.n	8001d1e <HAL_RCC_OscConfig+0x35e>
 8001d04:	4b61      	ldr	r3, [pc, #388]	; (8001e8c <HAL_RCC_OscConfig+0x4cc>)
 8001d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d08:	4a60      	ldr	r2, [pc, #384]	; (8001e8c <HAL_RCC_OscConfig+0x4cc>)
 8001d0a:	f043 0304 	orr.w	r3, r3, #4
 8001d0e:	6713      	str	r3, [r2, #112]	; 0x70
 8001d10:	4b5e      	ldr	r3, [pc, #376]	; (8001e8c <HAL_RCC_OscConfig+0x4cc>)
 8001d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d14:	4a5d      	ldr	r2, [pc, #372]	; (8001e8c <HAL_RCC_OscConfig+0x4cc>)
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d1c:	e00b      	b.n	8001d36 <HAL_RCC_OscConfig+0x376>
 8001d1e:	4b5b      	ldr	r3, [pc, #364]	; (8001e8c <HAL_RCC_OscConfig+0x4cc>)
 8001d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d22:	4a5a      	ldr	r2, [pc, #360]	; (8001e8c <HAL_RCC_OscConfig+0x4cc>)
 8001d24:	f023 0301 	bic.w	r3, r3, #1
 8001d28:	6713      	str	r3, [r2, #112]	; 0x70
 8001d2a:	4b58      	ldr	r3, [pc, #352]	; (8001e8c <HAL_RCC_OscConfig+0x4cc>)
 8001d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d2e:	4a57      	ldr	r2, [pc, #348]	; (8001e8c <HAL_RCC_OscConfig+0x4cc>)
 8001d30:	f023 0304 	bic.w	r3, r3, #4
 8001d34:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d015      	beq.n	8001d6a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d3e:	f7ff fafd 	bl	800133c <HAL_GetTick>
 8001d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d44:	e00a      	b.n	8001d5c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d46:	f7ff faf9 	bl	800133c <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e0ce      	b.n	8001efa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d5c:	4b4b      	ldr	r3, [pc, #300]	; (8001e8c <HAL_RCC_OscConfig+0x4cc>)
 8001d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d0ee      	beq.n	8001d46 <HAL_RCC_OscConfig+0x386>
 8001d68:	e014      	b.n	8001d94 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d6a:	f7ff fae7 	bl	800133c <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d70:	e00a      	b.n	8001d88 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d72:	f7ff fae3 	bl	800133c <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e0b8      	b.n	8001efa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d88:	4b40      	ldr	r3, [pc, #256]	; (8001e8c <HAL_RCC_OscConfig+0x4cc>)
 8001d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d1ee      	bne.n	8001d72 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d94:	7dfb      	ldrb	r3, [r7, #23]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d105      	bne.n	8001da6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d9a:	4b3c      	ldr	r3, [pc, #240]	; (8001e8c <HAL_RCC_OscConfig+0x4cc>)
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	4a3b      	ldr	r2, [pc, #236]	; (8001e8c <HAL_RCC_OscConfig+0x4cc>)
 8001da0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001da4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f000 80a4 	beq.w	8001ef8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001db0:	4b36      	ldr	r3, [pc, #216]	; (8001e8c <HAL_RCC_OscConfig+0x4cc>)
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f003 030c 	and.w	r3, r3, #12
 8001db8:	2b08      	cmp	r3, #8
 8001dba:	d06b      	beq.n	8001e94 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d149      	bne.n	8001e58 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dc4:	4b31      	ldr	r3, [pc, #196]	; (8001e8c <HAL_RCC_OscConfig+0x4cc>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a30      	ldr	r2, [pc, #192]	; (8001e8c <HAL_RCC_OscConfig+0x4cc>)
 8001dca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd0:	f7ff fab4 	bl	800133c <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dd8:	f7ff fab0 	bl	800133c <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e087      	b.n	8001efa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dea:	4b28      	ldr	r3, [pc, #160]	; (8001e8c <HAL_RCC_OscConfig+0x4cc>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1f0      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	69da      	ldr	r2, [r3, #28]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a1b      	ldr	r3, [r3, #32]
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e04:	019b      	lsls	r3, r3, #6
 8001e06:	431a      	orrs	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e0c:	085b      	lsrs	r3, r3, #1
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	041b      	lsls	r3, r3, #16
 8001e12:	431a      	orrs	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e18:	061b      	lsls	r3, r3, #24
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	4a1b      	ldr	r2, [pc, #108]	; (8001e8c <HAL_RCC_OscConfig+0x4cc>)
 8001e1e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001e22:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e24:	4b19      	ldr	r3, [pc, #100]	; (8001e8c <HAL_RCC_OscConfig+0x4cc>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a18      	ldr	r2, [pc, #96]	; (8001e8c <HAL_RCC_OscConfig+0x4cc>)
 8001e2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e30:	f7ff fa84 	bl	800133c <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e38:	f7ff fa80 	bl	800133c <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e057      	b.n	8001efa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e4a:	4b10      	ldr	r3, [pc, #64]	; (8001e8c <HAL_RCC_OscConfig+0x4cc>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d0f0      	beq.n	8001e38 <HAL_RCC_OscConfig+0x478>
 8001e56:	e04f      	b.n	8001ef8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e58:	4b0c      	ldr	r3, [pc, #48]	; (8001e8c <HAL_RCC_OscConfig+0x4cc>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a0b      	ldr	r2, [pc, #44]	; (8001e8c <HAL_RCC_OscConfig+0x4cc>)
 8001e5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e64:	f7ff fa6a 	bl	800133c <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e6c:	f7ff fa66 	bl	800133c <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e03d      	b.n	8001efa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e7e:	4b03      	ldr	r3, [pc, #12]	; (8001e8c <HAL_RCC_OscConfig+0x4cc>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1f0      	bne.n	8001e6c <HAL_RCC_OscConfig+0x4ac>
 8001e8a:	e035      	b.n	8001ef8 <HAL_RCC_OscConfig+0x538>
 8001e8c:	40023800 	.word	0x40023800
 8001e90:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001e94:	4b1b      	ldr	r3, [pc, #108]	; (8001f04 <HAL_RCC_OscConfig+0x544>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	699b      	ldr	r3, [r3, #24]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d028      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d121      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d11a      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001eca:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d111      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eda:	085b      	lsrs	r3, r3, #1
 8001edc:	3b01      	subs	r3, #1
 8001ede:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d107      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eee:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d001      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e000      	b.n	8001efa <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3718      	adds	r7, #24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40023800 	.word	0x40023800

08001f08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001f12:	2300      	movs	r3, #0
 8001f14:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d101      	bne.n	8001f20 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e0d0      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f20:	4b6a      	ldr	r3, [pc, #424]	; (80020cc <HAL_RCC_ClockConfig+0x1c4>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 030f 	and.w	r3, r3, #15
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d910      	bls.n	8001f50 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f2e:	4b67      	ldr	r3, [pc, #412]	; (80020cc <HAL_RCC_ClockConfig+0x1c4>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f023 020f 	bic.w	r2, r3, #15
 8001f36:	4965      	ldr	r1, [pc, #404]	; (80020cc <HAL_RCC_ClockConfig+0x1c4>)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f3e:	4b63      	ldr	r3, [pc, #396]	; (80020cc <HAL_RCC_ClockConfig+0x1c4>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 030f 	and.w	r3, r3, #15
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d001      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e0b8      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d020      	beq.n	8001f9e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d005      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f68:	4b59      	ldr	r3, [pc, #356]	; (80020d0 <HAL_RCC_ClockConfig+0x1c8>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	4a58      	ldr	r2, [pc, #352]	; (80020d0 <HAL_RCC_ClockConfig+0x1c8>)
 8001f6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f72:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0308 	and.w	r3, r3, #8
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d005      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f80:	4b53      	ldr	r3, [pc, #332]	; (80020d0 <HAL_RCC_ClockConfig+0x1c8>)
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	4a52      	ldr	r2, [pc, #328]	; (80020d0 <HAL_RCC_ClockConfig+0x1c8>)
 8001f86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f8a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f8c:	4b50      	ldr	r3, [pc, #320]	; (80020d0 <HAL_RCC_ClockConfig+0x1c8>)
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	494d      	ldr	r1, [pc, #308]	; (80020d0 <HAL_RCC_ClockConfig+0x1c8>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d040      	beq.n	800202c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d107      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fb2:	4b47      	ldr	r3, [pc, #284]	; (80020d0 <HAL_RCC_ClockConfig+0x1c8>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d115      	bne.n	8001fea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e07f      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d107      	bne.n	8001fda <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fca:	4b41      	ldr	r3, [pc, #260]	; (80020d0 <HAL_RCC_ClockConfig+0x1c8>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d109      	bne.n	8001fea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e073      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fda:	4b3d      	ldr	r3, [pc, #244]	; (80020d0 <HAL_RCC_ClockConfig+0x1c8>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e06b      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fea:	4b39      	ldr	r3, [pc, #228]	; (80020d0 <HAL_RCC_ClockConfig+0x1c8>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f023 0203 	bic.w	r2, r3, #3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	4936      	ldr	r1, [pc, #216]	; (80020d0 <HAL_RCC_ClockConfig+0x1c8>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ffc:	f7ff f99e 	bl	800133c <HAL_GetTick>
 8002000:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002002:	e00a      	b.n	800201a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002004:	f7ff f99a 	bl	800133c <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002012:	4293      	cmp	r3, r2
 8002014:	d901      	bls.n	800201a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e053      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800201a:	4b2d      	ldr	r3, [pc, #180]	; (80020d0 <HAL_RCC_ClockConfig+0x1c8>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f003 020c 	and.w	r2, r3, #12
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	429a      	cmp	r2, r3
 800202a:	d1eb      	bne.n	8002004 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800202c:	4b27      	ldr	r3, [pc, #156]	; (80020cc <HAL_RCC_ClockConfig+0x1c4>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 030f 	and.w	r3, r3, #15
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	429a      	cmp	r2, r3
 8002038:	d210      	bcs.n	800205c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800203a:	4b24      	ldr	r3, [pc, #144]	; (80020cc <HAL_RCC_ClockConfig+0x1c4>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f023 020f 	bic.w	r2, r3, #15
 8002042:	4922      	ldr	r1, [pc, #136]	; (80020cc <HAL_RCC_ClockConfig+0x1c4>)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	4313      	orrs	r3, r2
 8002048:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800204a:	4b20      	ldr	r3, [pc, #128]	; (80020cc <HAL_RCC_ClockConfig+0x1c4>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 030f 	and.w	r3, r3, #15
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	429a      	cmp	r2, r3
 8002056:	d001      	beq.n	800205c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e032      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0304 	and.w	r3, r3, #4
 8002064:	2b00      	cmp	r3, #0
 8002066:	d008      	beq.n	800207a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002068:	4b19      	ldr	r3, [pc, #100]	; (80020d0 <HAL_RCC_ClockConfig+0x1c8>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	4916      	ldr	r1, [pc, #88]	; (80020d0 <HAL_RCC_ClockConfig+0x1c8>)
 8002076:	4313      	orrs	r3, r2
 8002078:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0308 	and.w	r3, r3, #8
 8002082:	2b00      	cmp	r3, #0
 8002084:	d009      	beq.n	800209a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002086:	4b12      	ldr	r3, [pc, #72]	; (80020d0 <HAL_RCC_ClockConfig+0x1c8>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	490e      	ldr	r1, [pc, #56]	; (80020d0 <HAL_RCC_ClockConfig+0x1c8>)
 8002096:	4313      	orrs	r3, r2
 8002098:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800209a:	f000 f821 	bl	80020e0 <HAL_RCC_GetSysClockFreq>
 800209e:	4601      	mov	r1, r0
 80020a0:	4b0b      	ldr	r3, [pc, #44]	; (80020d0 <HAL_RCC_ClockConfig+0x1c8>)
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	091b      	lsrs	r3, r3, #4
 80020a6:	f003 030f 	and.w	r3, r3, #15
 80020aa:	4a0a      	ldr	r2, [pc, #40]	; (80020d4 <HAL_RCC_ClockConfig+0x1cc>)
 80020ac:	5cd3      	ldrb	r3, [r2, r3]
 80020ae:	fa21 f303 	lsr.w	r3, r1, r3
 80020b2:	4a09      	ldr	r2, [pc, #36]	; (80020d8 <HAL_RCC_ClockConfig+0x1d0>)
 80020b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020b6:	4b09      	ldr	r3, [pc, #36]	; (80020dc <HAL_RCC_ClockConfig+0x1d4>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff f8fa 	bl	80012b4 <HAL_InitTick>

  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40023c00 	.word	0x40023c00
 80020d0:	40023800 	.word	0x40023800
 80020d4:	08002608 	.word	0x08002608
 80020d8:	20000000 	.word	0x20000000
 80020dc:	20000004 	.word	0x20000004

080020e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80020e6:	2300      	movs	r3, #0
 80020e8:	607b      	str	r3, [r7, #4]
 80020ea:	2300      	movs	r3, #0
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	2300      	movs	r3, #0
 80020f0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80020f2:	2300      	movs	r3, #0
 80020f4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020f6:	4b63      	ldr	r3, [pc, #396]	; (8002284 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f003 030c 	and.w	r3, r3, #12
 80020fe:	2b04      	cmp	r3, #4
 8002100:	d007      	beq.n	8002112 <HAL_RCC_GetSysClockFreq+0x32>
 8002102:	2b08      	cmp	r3, #8
 8002104:	d008      	beq.n	8002118 <HAL_RCC_GetSysClockFreq+0x38>
 8002106:	2b00      	cmp	r3, #0
 8002108:	f040 80b4 	bne.w	8002274 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800210c:	4b5e      	ldr	r3, [pc, #376]	; (8002288 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800210e:	60bb      	str	r3, [r7, #8]
      break;
 8002110:	e0b3      	b.n	800227a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002112:	4b5e      	ldr	r3, [pc, #376]	; (800228c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002114:	60bb      	str	r3, [r7, #8]
      break;
 8002116:	e0b0      	b.n	800227a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002118:	4b5a      	ldr	r3, [pc, #360]	; (8002284 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002120:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002122:	4b58      	ldr	r3, [pc, #352]	; (8002284 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d04a      	beq.n	80021c4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800212e:	4b55      	ldr	r3, [pc, #340]	; (8002284 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	099b      	lsrs	r3, r3, #6
 8002134:	f04f 0400 	mov.w	r4, #0
 8002138:	f240 11ff 	movw	r1, #511	; 0x1ff
 800213c:	f04f 0200 	mov.w	r2, #0
 8002140:	ea03 0501 	and.w	r5, r3, r1
 8002144:	ea04 0602 	and.w	r6, r4, r2
 8002148:	4629      	mov	r1, r5
 800214a:	4632      	mov	r2, r6
 800214c:	f04f 0300 	mov.w	r3, #0
 8002150:	f04f 0400 	mov.w	r4, #0
 8002154:	0154      	lsls	r4, r2, #5
 8002156:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800215a:	014b      	lsls	r3, r1, #5
 800215c:	4619      	mov	r1, r3
 800215e:	4622      	mov	r2, r4
 8002160:	1b49      	subs	r1, r1, r5
 8002162:	eb62 0206 	sbc.w	r2, r2, r6
 8002166:	f04f 0300 	mov.w	r3, #0
 800216a:	f04f 0400 	mov.w	r4, #0
 800216e:	0194      	lsls	r4, r2, #6
 8002170:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002174:	018b      	lsls	r3, r1, #6
 8002176:	1a5b      	subs	r3, r3, r1
 8002178:	eb64 0402 	sbc.w	r4, r4, r2
 800217c:	f04f 0100 	mov.w	r1, #0
 8002180:	f04f 0200 	mov.w	r2, #0
 8002184:	00e2      	lsls	r2, r4, #3
 8002186:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800218a:	00d9      	lsls	r1, r3, #3
 800218c:	460b      	mov	r3, r1
 800218e:	4614      	mov	r4, r2
 8002190:	195b      	adds	r3, r3, r5
 8002192:	eb44 0406 	adc.w	r4, r4, r6
 8002196:	f04f 0100 	mov.w	r1, #0
 800219a:	f04f 0200 	mov.w	r2, #0
 800219e:	0262      	lsls	r2, r4, #9
 80021a0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80021a4:	0259      	lsls	r1, r3, #9
 80021a6:	460b      	mov	r3, r1
 80021a8:	4614      	mov	r4, r2
 80021aa:	4618      	mov	r0, r3
 80021ac:	4621      	mov	r1, r4
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f04f 0400 	mov.w	r4, #0
 80021b4:	461a      	mov	r2, r3
 80021b6:	4623      	mov	r3, r4
 80021b8:	f7fe f826 	bl	8000208 <__aeabi_uldivmod>
 80021bc:	4603      	mov	r3, r0
 80021be:	460c      	mov	r4, r1
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	e049      	b.n	8002258 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021c4:	4b2f      	ldr	r3, [pc, #188]	; (8002284 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	099b      	lsrs	r3, r3, #6
 80021ca:	f04f 0400 	mov.w	r4, #0
 80021ce:	f240 11ff 	movw	r1, #511	; 0x1ff
 80021d2:	f04f 0200 	mov.w	r2, #0
 80021d6:	ea03 0501 	and.w	r5, r3, r1
 80021da:	ea04 0602 	and.w	r6, r4, r2
 80021de:	4629      	mov	r1, r5
 80021e0:	4632      	mov	r2, r6
 80021e2:	f04f 0300 	mov.w	r3, #0
 80021e6:	f04f 0400 	mov.w	r4, #0
 80021ea:	0154      	lsls	r4, r2, #5
 80021ec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80021f0:	014b      	lsls	r3, r1, #5
 80021f2:	4619      	mov	r1, r3
 80021f4:	4622      	mov	r2, r4
 80021f6:	1b49      	subs	r1, r1, r5
 80021f8:	eb62 0206 	sbc.w	r2, r2, r6
 80021fc:	f04f 0300 	mov.w	r3, #0
 8002200:	f04f 0400 	mov.w	r4, #0
 8002204:	0194      	lsls	r4, r2, #6
 8002206:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800220a:	018b      	lsls	r3, r1, #6
 800220c:	1a5b      	subs	r3, r3, r1
 800220e:	eb64 0402 	sbc.w	r4, r4, r2
 8002212:	f04f 0100 	mov.w	r1, #0
 8002216:	f04f 0200 	mov.w	r2, #0
 800221a:	00e2      	lsls	r2, r4, #3
 800221c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002220:	00d9      	lsls	r1, r3, #3
 8002222:	460b      	mov	r3, r1
 8002224:	4614      	mov	r4, r2
 8002226:	195b      	adds	r3, r3, r5
 8002228:	eb44 0406 	adc.w	r4, r4, r6
 800222c:	f04f 0100 	mov.w	r1, #0
 8002230:	f04f 0200 	mov.w	r2, #0
 8002234:	02a2      	lsls	r2, r4, #10
 8002236:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800223a:	0299      	lsls	r1, r3, #10
 800223c:	460b      	mov	r3, r1
 800223e:	4614      	mov	r4, r2
 8002240:	4618      	mov	r0, r3
 8002242:	4621      	mov	r1, r4
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f04f 0400 	mov.w	r4, #0
 800224a:	461a      	mov	r2, r3
 800224c:	4623      	mov	r3, r4
 800224e:	f7fd ffdb 	bl	8000208 <__aeabi_uldivmod>
 8002252:	4603      	mov	r3, r0
 8002254:	460c      	mov	r4, r1
 8002256:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002258:	4b0a      	ldr	r3, [pc, #40]	; (8002284 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	0c1b      	lsrs	r3, r3, #16
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	3301      	adds	r3, #1
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002268:	68fa      	ldr	r2, [r7, #12]
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002270:	60bb      	str	r3, [r7, #8]
      break;
 8002272:	e002      	b.n	800227a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002274:	4b04      	ldr	r3, [pc, #16]	; (8002288 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002276:	60bb      	str	r3, [r7, #8]
      break;
 8002278:	bf00      	nop
    }
  }
  return sysclockfreq;
 800227a:	68bb      	ldr	r3, [r7, #8]
}
 800227c:	4618      	mov	r0, r3
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002284:	40023800 	.word	0x40023800
 8002288:	00f42400 	.word	0x00f42400
 800228c:	007a1200 	.word	0x007a1200

08002290 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e01d      	b.n	80022de <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d106      	bne.n	80022bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f7fe ffa0 	bl	80011fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2202      	movs	r2, #2
 80022c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3304      	adds	r3, #4
 80022cc:	4619      	mov	r1, r3
 80022ce:	4610      	mov	r0, r2
 80022d0:	f000 f834 	bl	800233c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
	...

080022e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68da      	ldr	r2, [r3, #12]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f042 0201 	orr.w	r2, r2, #1
 80022fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	689a      	ldr	r2, [r3, #8]
 8002306:	4b0c      	ldr	r3, [pc, #48]	; (8002338 <HAL_TIM_Base_Start_IT+0x50>)
 8002308:	4013      	ands	r3, r2
 800230a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2b06      	cmp	r3, #6
 8002310:	d00b      	beq.n	800232a <HAL_TIM_Base_Start_IT+0x42>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002318:	d007      	beq.n	800232a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f042 0201 	orr.w	r2, r2, #1
 8002328:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	3714      	adds	r7, #20
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	00010007 	.word	0x00010007

0800233c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4a40      	ldr	r2, [pc, #256]	; (8002450 <TIM_Base_SetConfig+0x114>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d013      	beq.n	800237c <TIM_Base_SetConfig+0x40>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800235a:	d00f      	beq.n	800237c <TIM_Base_SetConfig+0x40>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a3d      	ldr	r2, [pc, #244]	; (8002454 <TIM_Base_SetConfig+0x118>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d00b      	beq.n	800237c <TIM_Base_SetConfig+0x40>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a3c      	ldr	r2, [pc, #240]	; (8002458 <TIM_Base_SetConfig+0x11c>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d007      	beq.n	800237c <TIM_Base_SetConfig+0x40>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a3b      	ldr	r2, [pc, #236]	; (800245c <TIM_Base_SetConfig+0x120>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d003      	beq.n	800237c <TIM_Base_SetConfig+0x40>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a3a      	ldr	r2, [pc, #232]	; (8002460 <TIM_Base_SetConfig+0x124>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d108      	bne.n	800238e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002382:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	4313      	orrs	r3, r2
 800238c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a2f      	ldr	r2, [pc, #188]	; (8002450 <TIM_Base_SetConfig+0x114>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d02b      	beq.n	80023ee <TIM_Base_SetConfig+0xb2>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800239c:	d027      	beq.n	80023ee <TIM_Base_SetConfig+0xb2>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a2c      	ldr	r2, [pc, #176]	; (8002454 <TIM_Base_SetConfig+0x118>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d023      	beq.n	80023ee <TIM_Base_SetConfig+0xb2>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a2b      	ldr	r2, [pc, #172]	; (8002458 <TIM_Base_SetConfig+0x11c>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d01f      	beq.n	80023ee <TIM_Base_SetConfig+0xb2>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a2a      	ldr	r2, [pc, #168]	; (800245c <TIM_Base_SetConfig+0x120>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d01b      	beq.n	80023ee <TIM_Base_SetConfig+0xb2>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a29      	ldr	r2, [pc, #164]	; (8002460 <TIM_Base_SetConfig+0x124>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d017      	beq.n	80023ee <TIM_Base_SetConfig+0xb2>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a28      	ldr	r2, [pc, #160]	; (8002464 <TIM_Base_SetConfig+0x128>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d013      	beq.n	80023ee <TIM_Base_SetConfig+0xb2>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a27      	ldr	r2, [pc, #156]	; (8002468 <TIM_Base_SetConfig+0x12c>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d00f      	beq.n	80023ee <TIM_Base_SetConfig+0xb2>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a26      	ldr	r2, [pc, #152]	; (800246c <TIM_Base_SetConfig+0x130>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d00b      	beq.n	80023ee <TIM_Base_SetConfig+0xb2>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a25      	ldr	r2, [pc, #148]	; (8002470 <TIM_Base_SetConfig+0x134>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d007      	beq.n	80023ee <TIM_Base_SetConfig+0xb2>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a24      	ldr	r2, [pc, #144]	; (8002474 <TIM_Base_SetConfig+0x138>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d003      	beq.n	80023ee <TIM_Base_SetConfig+0xb2>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a23      	ldr	r2, [pc, #140]	; (8002478 <TIM_Base_SetConfig+0x13c>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d108      	bne.n	8002400 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	4313      	orrs	r3, r2
 800240c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4a0a      	ldr	r2, [pc, #40]	; (8002450 <TIM_Base_SetConfig+0x114>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d003      	beq.n	8002434 <TIM_Base_SetConfig+0xf8>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4a0c      	ldr	r2, [pc, #48]	; (8002460 <TIM_Base_SetConfig+0x124>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d103      	bne.n	800243c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	691a      	ldr	r2, [r3, #16]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	615a      	str	r2, [r3, #20]
}
 8002442:	bf00      	nop
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	40010000 	.word	0x40010000
 8002454:	40000400 	.word	0x40000400
 8002458:	40000800 	.word	0x40000800
 800245c:	40000c00 	.word	0x40000c00
 8002460:	40010400 	.word	0x40010400
 8002464:	40014000 	.word	0x40014000
 8002468:	40014400 	.word	0x40014400
 800246c:	40014800 	.word	0x40014800
 8002470:	40001800 	.word	0x40001800
 8002474:	40001c00 	.word	0x40001c00
 8002478:	40002000 	.word	0x40002000

0800247c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800248c:	2b01      	cmp	r3, #1
 800248e:	d101      	bne.n	8002494 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002490:	2302      	movs	r3, #2
 8002492:	e06d      	b.n	8002570 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2202      	movs	r2, #2
 80024a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a30      	ldr	r2, [pc, #192]	; (800257c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d004      	beq.n	80024c8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a2f      	ldr	r2, [pc, #188]	; (8002580 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d108      	bne.n	80024da <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80024ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	68fa      	ldr	r2, [r7, #12]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024e0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a20      	ldr	r2, [pc, #128]	; (800257c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d022      	beq.n	8002544 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002506:	d01d      	beq.n	8002544 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a1d      	ldr	r2, [pc, #116]	; (8002584 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d018      	beq.n	8002544 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a1c      	ldr	r2, [pc, #112]	; (8002588 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d013      	beq.n	8002544 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a1a      	ldr	r2, [pc, #104]	; (800258c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d00e      	beq.n	8002544 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a15      	ldr	r2, [pc, #84]	; (8002580 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d009      	beq.n	8002544 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a16      	ldr	r2, [pc, #88]	; (8002590 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d004      	beq.n	8002544 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a15      	ldr	r2, [pc, #84]	; (8002594 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d10c      	bne.n	800255e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800254a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	68ba      	ldr	r2, [r7, #8]
 8002552:	4313      	orrs	r3, r2
 8002554:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68ba      	ldr	r2, [r7, #8]
 800255c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2201      	movs	r2, #1
 8002562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	3714      	adds	r7, #20
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	40010000 	.word	0x40010000
 8002580:	40010400 	.word	0x40010400
 8002584:	40000400 	.word	0x40000400
 8002588:	40000800 	.word	0x40000800
 800258c:	40000c00 	.word	0x40000c00
 8002590:	40014000 	.word	0x40014000
 8002594:	40001800 	.word	0x40001800

08002598 <__libc_init_array>:
 8002598:	b570      	push	{r4, r5, r6, lr}
 800259a:	4e0d      	ldr	r6, [pc, #52]	; (80025d0 <__libc_init_array+0x38>)
 800259c:	4c0d      	ldr	r4, [pc, #52]	; (80025d4 <__libc_init_array+0x3c>)
 800259e:	1ba4      	subs	r4, r4, r6
 80025a0:	10a4      	asrs	r4, r4, #2
 80025a2:	2500      	movs	r5, #0
 80025a4:	42a5      	cmp	r5, r4
 80025a6:	d109      	bne.n	80025bc <__libc_init_array+0x24>
 80025a8:	4e0b      	ldr	r6, [pc, #44]	; (80025d8 <__libc_init_array+0x40>)
 80025aa:	4c0c      	ldr	r4, [pc, #48]	; (80025dc <__libc_init_array+0x44>)
 80025ac:	f000 f820 	bl	80025f0 <_init>
 80025b0:	1ba4      	subs	r4, r4, r6
 80025b2:	10a4      	asrs	r4, r4, #2
 80025b4:	2500      	movs	r5, #0
 80025b6:	42a5      	cmp	r5, r4
 80025b8:	d105      	bne.n	80025c6 <__libc_init_array+0x2e>
 80025ba:	bd70      	pop	{r4, r5, r6, pc}
 80025bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80025c0:	4798      	blx	r3
 80025c2:	3501      	adds	r5, #1
 80025c4:	e7ee      	b.n	80025a4 <__libc_init_array+0xc>
 80025c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80025ca:	4798      	blx	r3
 80025cc:	3501      	adds	r5, #1
 80025ce:	e7f2      	b.n	80025b6 <__libc_init_array+0x1e>
 80025d0:	08002620 	.word	0x08002620
 80025d4:	08002620 	.word	0x08002620
 80025d8:	08002620 	.word	0x08002620
 80025dc:	08002624 	.word	0x08002624

080025e0 <memset>:
 80025e0:	4402      	add	r2, r0
 80025e2:	4603      	mov	r3, r0
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d100      	bne.n	80025ea <memset+0xa>
 80025e8:	4770      	bx	lr
 80025ea:	f803 1b01 	strb.w	r1, [r3], #1
 80025ee:	e7f9      	b.n	80025e4 <memset+0x4>

080025f0 <_init>:
 80025f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025f2:	bf00      	nop
 80025f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025f6:	bc08      	pop	{r3}
 80025f8:	469e      	mov	lr, r3
 80025fa:	4770      	bx	lr

080025fc <_fini>:
 80025fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025fe:	bf00      	nop
 8002600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002602:	bc08      	pop	{r3}
 8002604:	469e      	mov	lr, r3
 8002606:	4770      	bx	lr
